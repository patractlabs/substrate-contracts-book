"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6647],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},633:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],c={},s="Getting Started",l={unversionedId:"ask/tutorial",id:"ask/tutorial",isDocsHomePage:!1,title:"Getting Started",description:"At present, Ask! has only been in the development of the second phase of the Kusama Treasury proposal, and many functions are not yet stable, so they have not been released to public repositories such as npm.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/ask/tutorial.md",sourceDirName:"ask",slug:"/ask/tutorial",permalink:"/en/ask/tutorial",editUrl:"https://github.com/patractlabs/substrate-contracts-book/docs/ask/tutorial.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"What is Ask! smart contract programming\uff1f",permalink:"/en/ask/introduction"},next:{title:"Design",permalink:"/en/ask/design"}},p=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Download",id:"download",children:[]},{value:"Started",id:"started",children:[{value:"Case contract",id:"case-contract",children:[]}]},{value:"Compile",id:"compile",children:[{value:"On-chain environmental testing",id:"on-chain-environmental-testing",children:[]}]}],d={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"At present, Ask! has only been in the development of the second phase of the Kusama Treasury proposal, and many functions are not yet stable, so they have not been released to public repositories such as npm."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"Reading this document requires you to have a programming foundation of AssemblyScript or Typescript. If you have not touched them before, please refer to ",(0,o.kt)("a",{parentName:"p",href:"https://www.assemblyscript.org/"},"AssemblyScript"),"."),(0,o.kt)("h2",{id:"download"},"Download"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Copy the repository. At present, the Ask! project code has not been uploaded to npm, so  you need to copy the repository directly, and it will be released to npm after the function development is stable."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/patractlabs/ask\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Enter the directory to download dependencies."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn\n")))),(0,o.kt)("h2",{id:"started"},"Started"),(0,o.kt)("h3",{id:"case-contract"},"Case contract"),(0,o.kt)("p",null,"Some basic example contracts are maintained in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/examples")," directory of the Ask! project, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"flipper")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"incrementer"),". You can refer to these examples to write smart contracts.\nThe following smart contract writing process takes the contract in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/examples/flipper")," directory as an example."),(0,o.kt)("p",null,"Create a new file ",(0,o.kt)("inlineCode",{parentName:"p"},"flipper.ts")," as the entry point. The ",(0,o.kt)("inlineCode",{parentName:"p"},"export")," section in the Wasm code generated by subsequent compilation corresponds to the function exported after the file is compiled. In fact, the AS single file can be used as a project, but here we need to introduce development dependencies through package.json."),(0,o.kt)("p",null,"You can also use the official ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/AssemblyScript/asbuild/"},"asbuild")," build tool provided by AssemblyScript to generate the initial project."),(0,o.kt)("p",null,"After the project is created, we begin to define contract storage. Ask! uses the decorator ",(0,o.kt)("inlineCode",{parentName:"p"},"@storage")," to define a contract storage class. This process is similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"#[ink(storage)]")," macro in ink!. For example, in this case, we define the following contract storage class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@storage\nclass Stored {\n  flag: bool;\n}\n")),(0,o.kt)("p",null,"In this way, ",(0,o.kt)("inlineCode",{parentName:"p"},"Stored")," can be used as a storage class in the contract. The definition of the contract class is shown below. Ask! provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," decorator to define a contract class, which is similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"#[ink::contract]")," macro in ink!. ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," supports inheritance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@contract\nclass Flipper {\n  // ...\n}\n")),(0,o.kt)("p",null,"Ask! provides ",(0,o.kt)("inlineCode",{parentName:"p"},"@constructor")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@message")," decorators, which can decorate non-static methods in the ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," contract class. They are similar to those in ink!"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"#[ink(constructor)]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"#[ink(message)]")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The method decorated by ",(0,o.kt)("inlineCode",{parentName:"li"},"@constructor")," will become an initialization function of the contract. Each class decorated by ",(0,o.kt)("inlineCode",{parentName:"li"},"@contract")," must have at least one ",(0,o.kt)("inlineCode",{parentName:"li"},"@constructor")," method (excluding the parent class). The initialization function of the parent class will not be directly Become a function of contract initialization."),(0,o.kt)("li",{parentName:"ul"},"The method decorated by ",(0,o.kt)("inlineCode",{parentName:"li"},"@message")," will become a method call of the contract. Each class decorated by ",(0,o.kt)("inlineCode",{parentName:"li"},"@contract")," must have at least one ",(0,o.kt)("inlineCode",{parentName:"li"},"@message")," method (including the parent class), and the child class will inherit the contract of the parent class by default method, you can override the method of the inherited contract.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note")," Each contract class needs to define a parameterless constructor to instantiate the contract. The ",(0,o.kt)("inlineCode",{parentName:"p"},"@constructor")," function is called after the constructor is called."),(0,o.kt)("p",null,"Then we implement the specific logic of Flipper."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@contract\nclass Flipper {\n  private stored: Stored;\n\n  constructor() {\n    this.stored = new Stored();\n  }\n\n  @constructor\n  default(initFlag: bool): void {\n    this.stored.flag = initFlag;\n  }\n\n  @message\n  flip(): void {\n    const v = this.stored.flag;\n    this.stored.flag = !v;\n  }\n\n  @message(mutates = false)\n  get(): bool {\n    return this.stored.flag;\n  }\n")),(0,o.kt)("p",null,"It provides a contract initialization function and two contract methods. The get method is read-only because it sets ",(0,o.kt)("inlineCode",{parentName:"p"},"mutates = false"),"."),(0,o.kt)("p",null,"Here is a brief introduction to the ",(0,o.kt)("inlineCode",{parentName:"p"},"@storage")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," decorators, and we have implemented a minimal contract example."),(0,o.kt)("h2",{id:"compile"},"Compile"),(0,o.kt)("p",null,"Assuming that we compile the contract in the root directory of the Ask! project, and the path of the current contract is located at ",(0,o.kt)("inlineCode",{parentName:"p"},"examples/flipper/flipper.ts")," (you can also replace it with the path of your own contract file), execute the following command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx ask examples/flipper/flipper.ts\n")),(0,o.kt)("p",null,"After executing the above command, a directory ",(0,o.kt)("inlineCode",{parentName:"p"},"extension")," will be generated under the directory of the contract file, which stores the expanded code, and the files generated by the compilation of the contract are located in the ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," directory under the contract file directory."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"metadata.json")," describes the ABI of this contract, which can be provided to chains or tools that support this specification."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"target.wasm")," is the final Wasm contract code, which can be executed when deployed on the corresponding chain.")),(0,o.kt)("h3",{id:"on-chain-environmental-testing"},"On-chain environmental testing"),(0,o.kt)("p",null,"Ask! currently does not support unit testing. You can use the contract execution environment sandbox ",(0,o.kt)("a",{parentName:"p",href:"../europa/introduction"},"Europa")," provided by Patract to deploy and test the contract. After starting Europa, you can deploy and call the contract in the ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," directory through ",(0,o.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps"},"https://polkadot.js.org/apps"),". This process is similar to ink! The operation process of the contract is the same."))}u.isMDXComponent=!0}}]);