"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[362],{3905:function(e,t,n){n.d(t,{Zo:function(){return i},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},i=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(f,u(u({ref:t},i),{},{components:n})):r.createElement(f,u({ref:t},i))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,u=new Array(s);u[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,u[1]=o;for(var l=2;l<s;l++)u[l]=n[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6460:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return i},default:function(){return d}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),u=["components"],o={},c="Reentrancy Guard",l={unversionedId:"metis/guides/security/reentrancy-guard",id:"metis/guides/security/reentrancy-guard",isDocsHomePage:!1,title:"Reentrancy Guard",description:"Contract component that helps prevent reentrant calls to a function.",source:"@site/docs/metis/guides/security/reentrancy-guard.md",sourceDirName:"metis/guides/security",slug:"/metis/guides/security/reentrancy-guard",permalink:"/substrate-contracts-book/metis/guides/security/reentrancy-guard",editUrl:"https://github.com/patractlabs/substrate-contracts-book/edit/master/docs/metis/guides/security/reentrancy-guard.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Pausable",permalink:"/substrate-contracts-book/metis/guides/security/pausable"},next:{title:"ERC20",permalink:"/substrate-contracts-book/metis/guides/tokens/erc20"}},i=[{value:"Dependency",id:"dependency",children:[]},{value:"Storage",id:"storage",children:[]},{value:"Internal Function",id:"internal-function",children:[]},{value:"Usage Example",id:"usage-example",children:[]}],p={toc:i};function d(e){var t=e.components,n=(0,a.Z)(e,u);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"reentrancy-guard"},"Reentrancy Guard"),(0,s.kt)("p",null,"Contract component that helps prevent reentrant calls to a function."),(0,s.kt)("h2",{id:"dependency"},"Dependency"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'metis_reentrancy_guard  = { git = "https://github.com/patractlabs/metis", default-features = false }\n')),(0,s.kt)("h2",{id:"storage"},"Storage"),(0,s.kt)("p",null,"In most cases, developer not need to consider the storage of reentrancy guard."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'const _NOT_ENTERED: u8 = 1;\nconst _ENTERED: u8 = 2;\n\n/// The Data of pausable component\n#[cfg_attr(feature = "std", derive(::ink_storage::traits::StorageLayout))]\n#[derive(Debug)]\npub struct Data {\n    /// is contract current paused\n    status: Lazy<u8>,\n\n    key: ink_primitives::Key,\n}\n')),(0,s.kt)("p",null,"Note the ",(0,s.kt)("inlineCode",{parentName:"p"},"key")," in module, in ",(0,s.kt)("inlineCode",{parentName:"p"},"ink!"),", all storage will flush to storage after the end of message proccess,\nso if contract only modifies ",(0,s.kt)("inlineCode",{parentName:"p"},"status"),", the reentrancy_guard will not work:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"    /// set current status to entered\n    pub fn set_entered(&mut self) {\n        Lazy::set(&mut self.status, _ENTERED);\n        self.flush() // flush to storage\n    }\n\n    /// set current status to not entered\n    pub fn set_not_entered(&mut self) {\n        Lazy::set(&mut self.status, _NOT_ENTERED);\n        self.flush() // flush to storage\n    }\n")),(0,s.kt)("h2",{id:"internal-function"},"Internal Function"),(0,s.kt)("p",null,"There is some internal function for reentrancy_guard, the marco will check it automatically:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"        #[ink(message)]\n        #[metis_lang::reentrancy_guard]\n        pub fn function_can_not_reentrancy(&mut self) {\n            self._check_nonreentrant();\n            self._set_entered();\n\n            // logics\n\n            self._set_not_entered();\n        }\n")),(0,s.kt)("p",null,"the functions:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"_check_nonreentrant")," : check if the current status is ",(0,s.kt)("inlineCode",{parentName:"li"},"_NOT_ENTERED"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'    fn _check_nonreentrant(&self) {\n        assert!(!self.get().is_entered(), "ReentrancyGuard: reentrant call");\n    }\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"_set_entered")," : set current status to ",(0,s.kt)("inlineCode",{parentName:"li"},"_ENTERED"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"    fn _set_entered(&mut self) {\n        self.get_mut().set_entered();\n    }\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"_set_not_entered")," : set current status to ",(0,s.kt)("inlineCode",{parentName:"li"},"_NOT_ENTERED"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"    fn _set_not_entered(&mut self) {\n        self.get_mut().set_not_entered();\n    }\n")),(0,s.kt)("h2",{id:"usage-example"},"Usage Example"),(0,s.kt)("p",null,"To use ",(0,s.kt)("inlineCode",{parentName:"p"},"reentrant_guard")," component, first is import the component:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"    use metis_lang::{\n        import,\n        metis,\n    };\n    \n    use metis_reentrancy_guard as reentrancy_guard;\n\n    #[ink(storage)]\n    #[import(reentrancy_guard)]\n    pub struct Contracts {\n        reentrancy_guard: reentrancy_guard::Data,\n\n        // others\n    }\n")),(0,s.kt)("p",null,"To use reentrancy guard, we can use a marco to check, it like the modifier in solidity:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"        #[ink(message)]\n        #[metis_lang::reentrancy_guard]\n        pub fn function_can_not_reentrancy(&mut self) {\n            // logics\n        }\n")))}d.isMDXComponent=!0}}]);