"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[4220],{3905:function(t,e,a){a.d(e,{Zo:function(){return c},kt:function(){return m}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),p=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},c=function(t){var e=p(t.components);return n.createElement(s.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,c=i(t,["components","mdxType","originalType","parentName"]),u=p(a),m=r,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return a?n.createElement(k,o(o({ref:e},c),{},{components:a})):n.createElement(k,o({ref:e},c))}));function m(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,o=new Array(l);o[0]=u;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6597:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),o=["components"],i={},s="Storage and data strucutures",p={unversionedId:"ask/guides/types-storage/basic_types",id:"ask/guides/types-storage/basic_types",isDocsHomePage:!1,title:"Storage and data strucutures",description:"Basic Types",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/ask/guides/types-storage/basic_types.md",sourceDirName:"ask/guides/types-storage",slug:"/ask/guides/types-storage/basic_types",permalink:"/substrate-contracts-book/en/ask/guides/types-storage/basic_types",editUrl:"https://github.com/patractlabs/substrate-contracts-book/edit/master/docs/ask/guides/types-storage/basic_types.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Event Decorators",permalink:"/substrate-contracts-book/en/ask/guides/decorators/event-decorator"},next:{title:"Composite Types and Storage",permalink:"/substrate-contracts-book/en/ask/guides/types-storage/storage"}},c=[{value:"Basic Types",id:"basic-types",children:[]},{value:"Contract Parameter Types",id:"contract-parameter-types",children:[]},{value:"Usage",id:"usage",children:[{value:"storage",id:"storage",children:[]},{value:"Opt out of storage",id:"opt-out-of-storage",children:[]}]},{value:"Lazy",id:"lazy",children:[]}],d={toc:c};function u(t){var e=t.components,a=(0,r.Z)(t,o);return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"storage-and-data-strucutures"},"Storage and data strucutures"),(0,l.kt)("h2",{id:"basic-types"},"Basic Types"),(0,l.kt)("p",null,"Ask! provides its own data types implmenting scale codec corresponding to basic data types in ",(0,l.kt)("a",{parentName:"p",href:"https://www.assemblyscript.org/"},"AssemblyScript")," and standard library collections."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"AssemblyScript"),(0,l.kt)("th",{parentName:"tr",align:null},"ask!"),(0,l.kt)("th",{parentName:"tr",align:null},"ask! convert"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Bool")),(0,l.kt)("td",{parentName:"tr",align:null},"true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"i{8, 16, 32, 64, 128}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Int{8, 16, 32, 64, 128}")),(0,l.kt)("td",{parentName:"tr",align:null},"true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"u{8, 16, 32, 64, 128}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UInt{8, 16, 32, 64, 128}")),(0,l.kt)("td",{parentName:"tr",align:null},"true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string(String)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ScaleString")),(0,l.kt)("td",{parentName:"tr",align:null},"true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ScaleArray")),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Set")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ScaleSet")),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Map")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ScaleMap")),(0,l.kt)("td",{parentName:"tr",align:null},"false")))),(0,l.kt)("p",null,"When the basic assemblyscript types in the table above are used in the contract code (not including container types such as ",(0,l.kt)("inlineCode",{parentName:"p"},"Array"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"Set"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"Map"),"), Ask! It will be automatically converted to the corresponding Scale type (that is, automatic boxing/unboxing) for storage during compile time."),(0,l.kt)("h2",{id:"contract-parameter-types"},"Contract Parameter Types"),(0,l.kt)("p",null,"Contract Parameter Types are types defined to communicate Frame ",(0,l.kt)("inlineCode",{parentName:"p"},"pallet-contract")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Contract Parameter Types"),(0,l.kt)("th",{parentName:"tr",align:null},"ask! types"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"AccountId")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Array<u8>(32)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Hash")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Array<u8>(32)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Balance")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UInt128"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"BlockNumber")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UInt32"))))),(0,l.kt)("p",null," You can customize them in ",(0,l.kt)("inlineCode",{parentName:"p"},"assembly/env/CustomTypes.ts")," as long as the correct Codec is implementd."),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"storage"},"storage"),(0,l.kt)("p",null,"You can import ",(0,l.kt)("inlineCode",{parentName:"p"},"Bool")," via ",(0,l.kt)("inlineCode",{parentName:"p"},"ask-lang"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Bool } from 'ask-lang';\n")),(0,l.kt)("p",null,"If you need to store this data for blockchain storage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"class Flipper {\n    @state flag: Bool;\n}\n")),(0,l.kt)("p",null,"You can also directly use ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")," and ask! will convert it automatically during compilation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"class Flipper {\n    @state flag: bool;\n}\n")),(0,l.kt)("h3",{id:"opt-out-of-storage"},"Opt out of storage"),(0,l.kt)("p",null,"If you does not need to sync the data to blockchain storage but just declare it as a normal class property"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"class Flipper {\n    @state flag: bool;\n    flag1: bool;\n}\n")),(0,l.kt)("h2",{id:"lazy"},"Lazy"),(0,l.kt)("p",null,"When a data is decorated with ",(0,l.kt)("inlineCode",{parentName:"p"},"@state"),", it means it will sync with the blockchain database when its value gets changed which involves calling host function ",(0,l.kt)("inlineCode",{parentName:"p"},"seal_set_storage")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"seal_get_storage"),". However, calling host function is expensive in terms of wasm performance."),(0,l.kt)("p",null,"Therefore ",(0,l.kt)("inlineCode",{parentName:"p"},"@state")," introduces lazy option as: ",(0,l.kt)("inlineCode",{parentName:"p"},'@state({"lazy": false})')," While lazy is true, that means while a state variable gets changed multiple times in a contract call, only the last change will be synced to blockchain.   "),(0,l.kt)("p",null,"By default, ",(0,l.kt)("inlineCode",{parentName:"p"},"lazy")," is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),". While lazy is false, then every change made to the state variable will be synced to blockchain."),(0,l.kt)("p",null,"Basic principle of implmentation: For every state varible with lazy set as true, the setter function generated by compiler will only updates the value changed in memory; Meanwhile, compiler also creates a ",(0,l.kt)("strong",{parentName:"p"},"commit")," function. If the state variables within this function ever gets changed before the contract call is done, the updated values will be synced to blockchain."))}u.isMDXComponent=!0}}]);