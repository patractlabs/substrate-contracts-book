"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[7682],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5879:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},c="Design",l={unversionedId:"ask/design",id:"ask/design",isDocsHomePage:!1,title:"Design",description:"Ask! design overview",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/ask/design.md",sourceDirName:"ask",slug:"/ask/design",permalink:"/substrate-contracts-book/en/ask/design",editUrl:"https://github.com/patractlabs/substrate-contracts-book/docs/ask/design.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Getting Started",permalink:"/substrate-contracts-book/en/ask/tutorial"},next:{title:"Basics",permalink:"/substrate-contracts-book/en/ask/basics"}},p=[{value:"Ask! design overview",id:"ask-design-overview",children:[]},{value:"Design ideas",id:"design-ideas",children:[]}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"design"},"Design"),(0,o.kt)("h2",{id:"ask-design-overview"},"Ask! design overview"),(0,o.kt)("p",null,"AssemblyScript uses the asc compiler to compile AssemblyScript files into WebAssembly bytecode, but it cannot directly generate Wasm bytecode and ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.json")," meta-information files that conform to the ",(0,o.kt)("inlineCode",{parentName:"p"},"pallet-contract")," ABI, so you need to write AS transform to intervene in the compiler. Compile the process, generate and export ABI-related code at a suitable location, and generate ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.json")," after the type information is determined."),(0,o.kt)("h2",{id:"design-ideas"},"Design ideas"),(0,o.kt)("p",null,"Ask! provides two libraries, ",(0,o.kt)("inlineCode",{parentName:"p"},"ask-transform")," (referred to as ",(0,o.kt)("inlineCode",{parentName:"p"},"transform")," in the following description) and ",(0,o.kt)("inlineCode",{parentName:"p"},"ask-lang"),".\nIn addition, we will provide a build tool called ",(0,o.kt)("inlineCode",{parentName:"p"},"ask-cli")," in the follow-up. This tool is similar to ink!'s ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo-contract")," to help build and manage Wasm smart contracts written with Ask!."),(0,o.kt)("p",null,"The functions of Ask! are implemented as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The main function of ",(0,o.kt)("inlineCode",{parentName:"li"},"ask-lang")," is to provide high-level APIs for writing smart contracts, including high-level encapsulation of ",(0,o.kt)("inlineCode",{parentName:"li"},"pallet-contract")," primitives, scale coding, K/V storage abstraction, common basic types and common interfaces. You can automatically derive a combination of these basic classes by decorators."),(0,o.kt)("li",{parentName:"ul"},"The main function of ",(0,o.kt)("inlineCode",{parentName:"li"},"ask-transform")," is based on the decorator used in the Ask! code to generate code that conforms to the ",(0,o.kt)("inlineCode",{parentName:"li"},"pallet-contract")," specification and the ",(0,o.kt)("inlineCode",{parentName:"li"},"metadata.json")," meta-information file. This part implements the following functions:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Analyze contract interfaces and parameters, and generate metadata files."),(0,o.kt)("li",{parentName:"ul"},"Analyze custom contract decorators and generate corresponding logic codes."),(0,o.kt)("li",{parentName:"ul"},"According to the definition of storage, read/write contract storage according to a certain process.")))))}u.isMDXComponent=!0}}]);