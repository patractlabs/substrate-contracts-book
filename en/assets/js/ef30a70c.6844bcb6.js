"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[652],{3905:function(t,e,a){a.d(e,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function c(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),l=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):c(c({},e),t)),a},p=function(t){var e=l(t.components);return n.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),d=l(a),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(h,c(c({ref:e},p),{},{components:a})):n.createElement(h,c({ref:e},p))}));function m(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,c=new Array(o);c[0]=d;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:r,c[1]=i;for(var l=2;l<o;l++)c[l]=a[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4862:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),c=["components"],i={},s="tutorial",l={unversionedId:"himalia/tutorial",id:"himalia/tutorial",isDocsHomePage:!1,title:"tutorial",description:"The SDK used by Himalia to interact with the contract part of the chain needs to start a node before proceeding with the subsequent execution process.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/himalia/tutorial.md",sourceDirName:"himalia",slug:"/himalia/tutorial",permalink:"/substrate-contracts-book/en/himalia/tutorial",editUrl:"https://github.com/patractlabs/substrate-contracts-book/edit/master/docs/himalia/tutorial.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Himalia",permalink:"/substrate-contracts-book/en/himalia/introduction"},next:{title:"go-patract",permalink:"/substrate-contracts-book/en/himalia/go-patract"}},p=[{value:"go",id:"go",children:[{value:"Deploy the contract",id:"deploy-the-contract",children:[]},{value:"Call contract",id:"call-contract",children:[]}]},{value:"python",id:"python",children:[{value:"Installation",id:"installation",children:[]},{value:"Quick use",id:"quick-use",children:[]}]}],u={toc:p};function d(t){var e=t.components,a=(0,r.Z)(t,c);return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tutorial"},"tutorial"),(0,o.kt)("p",null,"The SDK used by Himalia to interact with the contract part of the chain needs to start a node before proceeding with the subsequent execution process."),(0,o.kt)("p",null,"For nodes with ",(0,o.kt)("inlineCode",{parentName:"p"},"pallet-contracts")," function, we recommend Europa as an alternative to nodes. For more information, please refer to Europa's ",(0,o.kt)("a",{parentName:"p",href:"/substrate-contracts-book/en/europa/intro/overview"},"Document"),"."),(0,o.kt)("p",null,"Europa can be easily installed and used with the following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git install --recurse-submodules https://github.com/patractlabs/europa.git --force --locked\neuropa --tmp\n")),(0,o.kt)("p",null,"On the other hand, you can also use Patract\u2019s testnet ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/jupiter"},"Jupiter"),", or the contract testnet provided by Parity ","[Canvas-node]","(",(0,o.kt)("a",{parentName:"p",href:"https://github.com/paritytech/"},"https://github.com/paritytech/")," canvas-node.git)"),(0,o.kt)("h2",{id:"go"},"go"),(0,o.kt)("p",null,"PatractGo relies on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/centrifuge/go-substrate-rpc-client"},"GSRPC"),". The Go version of Himalia project is called ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/go-patract"},"go-patract")),(0,o.kt)("p",null,"After installing PatractGo, you can use the following methods to quickly deploy and call a contract. For the complete case, please refer to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/go-patract/blob/master/contracts/erc20/transfer_test.go"},"transfer_test")),(0,o.kt)("h3",{id:"deploy-the-contract"},"Deploy the contract"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// read the code wasm from file\ncodeBytes, err := ioutil.ReadFile("/path/to/contracts.wasm")\nif err != nil {\n    return err\n}\n// create the api\ncApi, err := rpc.NewContractAPI(env.URL())\n\n// read the abi(metadata) for contract\nmetaBz, err := ioutil.ReadFile("/path/to/contracts_metadata.json")\ncApi.WithMetaData(metaBz)\n\n// create context with from auth, like Alice\nctx := api.NewCtx(context.Background()).WithFrom(authKey)\n\n// put code\n_, err = cApi.Native().PutCode(ctx, codeBytes)\n\ncodeHash := readCodeHash() // get code hash\n\nvar codeBz []byte\n\nif err := cApi.Native().Cli.GetStorageLatest(&codeBz,\n    "Contracts", "PristineCode",\n    []byte(codeHash), nil); err != nil {\n        return err\n    }\n\nvar endowment uint64 = 1000000000000\n\n// Instantiate\n_, contractAccount, err := cApi.Instantiate(ctx,\n    types.NewCompactBalance(endowment),\n    types.NewCompactGas(test.DefaultGas),\n    contracts.CodeHashERC20,\n    types.NewU128(totalSupply),\n)\n')),(0,o.kt)("h3",{id:"call-contract"},"Call contract"),(0,o.kt)("h4",{id:"rpc-call"},"rpc call"),(0,o.kt)("p",null,"Call ",(0,o.kt)("inlineCode",{parentName:"p"},"total_supply")," to get the current total supply."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var res types.U128\n\nerr := a.CallToRead(ctx,\n    &res,\n    a.ContractAccountID,\n    []string{"total_supply"},\n)\n')),(0,o.kt)("h4",{id:"transaction-call"},"Transaction call"),(0,o.kt)("p",null,"Call ",(0,o.kt)("inlineCode",{parentName:"p"},"transfer")," to transfer a fund."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'toParam := struct {\n    Address AccountID\n}{\n    Address: to,\n}\n\nvalueParam := struct {\n    Value U128\n}{\n    Value: amt,\n}\n\nreturn a.CallToExec(ctx,\n    a.ContractAccountID,\n    types.NewCompactBalance(0),\n    types.NewCompactGas(test.DefaultGas),\n    []string{"transfer"},\n    toParam, valueParam,\n)\n')),(0,o.kt)("h2",{id:"python"},"python"),(0,o.kt)("p",null,"PatractPy relies on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/polkascan/py-substrate-interface"},"py-substrate-interface")," The Python version of the Himalia project is called ","[py-patract]","(",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/py"},"https://github.com/patractlabs/py")," -patract)"),(0,o.kt)("h3",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install -U patract-interface\n")),(0,o.kt)("p",null,"Can be used in python script"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"from patractinterface import ContractFactory, ContractAPI\n\n// ... So something ...\n")),(0,o.kt)("h3",{id:"quick-use"},"Quick use"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os\nfrom substrateinterface import SubstrateInterface, Keypair\nfrom patractinterface.contract import ContractAPI, ContractFactory\nfrom patractinterface.observer import ContractObserver\n\ndef main():\n    # use [europa](https://github.com/patractlabs/europa) as test node endpoint, notice `type_registry` should set correctly.\n    substrate=SubstrateInterface(url='ws://127.0.0.1:9944', type_registry_preset=\"default\", type_registry={'types': {'LookupSource': 'MultiAddress'}})\n    # load deployer key\n    alice = Keypair.create_from_uri('//Alice')\n    bob = Keypair.create_from_uri('//Bob')\n    # 1. load a contract from Wasm file and metadata.json file (Those files is complied by [ink!](https://github.com/paritytech/ink))\n    # in this example, we use `ink/example/erc20` contract as example.\n    contract = ContractFactory.create_from_file(\n            substrate=substrate, # should provide a subtrate endpoint\n            code_file= os.path.join(os.path.dirname(__file__), 'res', 'erc20.wasm'),\n            metadata_file= os.path.join(os.path.dirname(__file__), 'res', 'erc20.json')\n        )\n    # upload code to chain directly\n    res = contract.put_code(alice)\n    print(\"update code hash{} res:{}\".format(contract.code_hash.hex(), res.is_succes))\n    # 2. instantiate the uploaded code as a contract instance\n    erc20_ins = contract.new(alice, 1000000 * (10 ** 15), endowment=2*10**10, gas_limit=20000000000, deployment_salt=\"0x12\")\n    # 2.1 create a observer to listen event\n    observer = ContractObserver(erc20_ins.contract_address, erc20_ins.metadata, substrate)\n    # 3. send a transfer call for this contract\n    res = erc20_ins.transfer(alice, bob.ss58_address, 100000, gas_limit=20000000000)\n    print('transfer res', res.is_succes)\n\n    def on_transfer(num, evt):\n        print(\"on_transfer in {} : {} {} {}\".format(num, evt['from'], evt['to'], evt['value']))\n\n    def on_approval(num, evt):\n        print(\"on_approval in {} : {} {} {}\".format(num, evt['owner'], evt['spender'], evt['value']))\n    # 4 set event callback \n    observer.scanEvents(handlers={\n        'Transfer': on_transfer,\n        'Approve': on_approval\n    })\n\nif __name__ == \"__main__\":\n    main()\n    pass\n")))}d.isMDXComponent=!0}}]);