"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[3776],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||c;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<c;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6043:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),c=(n(7294),n(3905)),o=["components"],i={},s="@redspot_chai  plug-in",l={unversionedId:"redspot/plugin/redspot-chai",id:"redspot/plugin/redspot-chai",isDocsHomePage:!1,title:"@redspot_chai  plug-in",description:"Background Information",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/redspot/plugin/redspot-chai.md",sourceDirName:"redspot/plugin",slug:"/redspot/plugin/redspot-chai",permalink:"/substrate-contracts-book/en/redspot/plugin/redspot-chai",editUrl:"https://github.com/patractlabs/substrate-contracts-book/docs/redspot/plugin/redspot-chai.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"@redspot_known-types plug-in",permalink:"/substrate-contracts-book/en/redspot/plugin/redspot-known-types"},next:{title:"@redspot_gas-reporter plug-in",permalink:"/substrate-contracts-book/en/redspot/plugin/redspot-gas-reporter"}},p=[{value:"Background Information",id:"background-information",children:[]},{value:"Prerequisites for use",id:"prerequisites-for-use",children:[]},{value:"Example of usage",id:"example-of-usage",children:[]},{value:"equal",id:"equal",children:[]},{value:"changeTokenBalance",id:"changetokenbalance",children:[]},{value:"emit",id:"emit",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,c.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"redspot_chai--plug-in"},"@redspot_chai  plug-in"),(0,c.kt)("h2",{id:"background-information"},"Background Information"),(0,c.kt)("p",null,"The plug-in provides a set of matchers that are easy to write contract test cases, and the design is inspired by ",(0,c.kt)("a",{parentName:"p",href:"https://ethereum-waffle.readthedocs.io/en/latest/matchers.html"},"waffle"),"."),(0,c.kt)("h2",{id:"prerequisites-for-use"},"Prerequisites for use"),(0,c.kt)("p",null,"Before using\uff0cplease import @redspot/chai plugin. The plug-in will automatically modify the chai matcher, so you don't need to call it manually."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"// redspot.config.ts\nimport { RedspotUserConfig } from 'redspot/types';\nimport '@redspot/chai';\nexport default {\n ...\n} as RedspotUserConfig;\n")),(0,c.kt)("h2",{id:"example-of-usage"},"Example of usage"),(0,c.kt)("p",null,"A complete example of using the @redspot/chai plug-in is as follows."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"import BN from 'bn.js';\nimport { expect } from 'chai';\nimport { patract, network, artifacts } from 'redspot';\nconst { getContractFactory, getRandomSigner } = patract;\nconst { api, getSigners } = network;\ndescribe('ERC20', () => {\n  after(() => {\n    return api.disconnect();\n  });\n  async function setup() {\n    const one = new BN(10).pow(new BN(api.registry.chainDecimals[0]));\n    const signers = await getSigners();\n    const Alice = signers[0];\n    const sender = Alice;\n    const contractFactory = await getContractFactory('erc20', sender);\n    const contract = await contractFactory.deploy('new', '1000');\n    const abi = artifacts.readArtifact('erc20');\n    const receiver = await getRandomSigner();\n    return { sender, contractFactory, contract, abi, receiver, Alice, one };\n  }\n  it('Assigns initial balance', async () => {\n    const { contract, sender } = await setup();\n    const result = await contract.query.balanceOf(sender.address);\n    expect(result.output).to.equal(1000);\n  });\n  it('Transfer adds amount to destination account', async () => {\n    const { contract, receiver } = await setup();\n    await expect(() =>\n      contract.tx.transfer(receiver.address, 7)\n    ).to.changeTokenBalance(contract, receiver, 7);\n    await expect(() =>\n      contract.tx.transfer(receiver.address, 7)\n    ).to.changeTokenBalances(contract, [contract.signer, receiver], [-7, 7]);\n  });\n  it('Transfer emits event', async () => {\n    const { contract, sender, receiver } = await setup();\n    await expect(contract.tx.transfer(receiver.address, 7))\n      .to.emit(contract, 'Transfer')\n      .withArgs(sender.address, receiver.address, 7);\n  });\n  it('Can not transfer above the amount', async () => {\n    const { contract, receiver } = await setup();\n    await expect(contract.tx.transfer(receiver.address, 1007)).to.not.emit(\n      contract,\n      'Transfer'\n    );\n  });\n  it('Can not transfer from empty account', async () => {\n    const { contract, Alice, one, sender } = await setup();\n    const emptyAccount = await getRandomSigner(Alice, one.muln(10000));\n    await expect(\n      contract.tx.transfer(sender.address, 7, {\n        signer: emptyAccount\n      })\n    ).to.not.emit(contract, 'Transfer');\n  });\n});\n")),(0,c.kt)("p",null,"For more built-in usages of this plugin, please refer to the ",(0,c.kt)("a",{parentName:"p",href:"https://www.chaijs.com/"},"chai")," documentation for details."),(0,c.kt)("h2",{id:"equal"},"equal"),(0,c.kt)("p",null,"The @redspot/chai plug-in will modify the default equal matching method. The default equal does not support matching objects\uff0cbut @redspot/chai plugin can."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"expect(new BN(1000)).to.equal(1000); // true\nexpect(AccountId).to.equal('5Gdjkw....'); // true\nexpect(Uint8Array([1, 2, 3])).to.equal('0x010203'); // true\n")),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"For the BN type, equal will call ",(0,c.kt)("inlineCode",{parentName:"li"},"new BN(expected).eq(actual)")," and judge whether it is equal."),(0,c.kt)("li",{parentName:"ul"},"For the types defined in Polkadot.js, equal will call ",(0,c.kt)("inlineCode",{parentName:"li"},"Type.eq(actual)")," and judge whether they are equal."),(0,c.kt)("li",{parentName:"ul"},"For uint8Array type, equal will convert them to hexadecimal, and then judge whether they are equal."),(0,c.kt)("li",{parentName:"ul"},"For other types, the default judgment method is used to judge whether they are equal.")),(0,c.kt)("h2",{id:"changetokenbalance"},"changeTokenBalance"),(0,c.kt)("p",null,"The matcher can detect changes in the balance of erc20, and internally calls the balanceOf interface to determine the balance. Since the interface for obtaining balance of erc20-trait is ",(0,c.kt)("inlineCode",{parentName:"p"},"baseErc20, balanceOf"),",",(0,c.kt)("inlineCode",{parentName:"p"},"changeTokenBalance")," is not applicable to erc20-trait."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"await expect(() =>\n  contract.tx.transfer(receiver.address, 7)\n).to.changeTokenBalance(contract, receiver, 7);\nawait expect(() =>\n  contract.tx.transfer(receiver.address, 7)\n).to.changeTokenBalances(contract, [contract.signer, receiver], [-7, 7]);\n")),(0,c.kt)("h2",{id:"emit"},"emit"),(0,c.kt)("p",null,"The matcher can detect whether the contract emits an event. An example of its use is as follows."),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("p",{parentName:"li"},"Detect whether a Transfer event is emitted"),(0,c.kt)("pre",{parentName:"li"},(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"await expect(contract.tx.transfer(receiver.address, 7)).to.emit(\n  contract,\n  'Transfer'\n);\n"))),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("p",{parentName:"li"},"Detect whether the event contains the specified parameters"),(0,c.kt)("pre",{parentName:"li"},(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"await expect(contract.tx.transfer(receiver.address, 7))\n  .to.emit(contract, 'Transfer')\n  .withArgs(sender.address, receiver.address, 7);\n"))),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("p",{parentName:"li"},"Don't expect to emit events"),(0,c.kt)("pre",{parentName:"li"},(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"await expect(\n  contract.tx.transfer(sender.address, 7, {\n    signer: emptyAccount\n  })\n).to.not.emit(contract, 'Transfer');\n")))))}d.isMDXComponent=!0}}]);