"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[7043],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return u}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),s=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(r),u=n,f=m["".concat(l,".").concat(u)]||m[u]||k[u]||o;return r?a.createElement(f,i(i({ref:t},c),{},{components:r})):a.createElement(f,i({ref:t},c))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5920:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),i=["components"],p={},l="zkMega v0.2 \u62a5\u544a\uff08Megaclite v0.2 \u62a5\u544a\uff09",s={unversionedId:"zkmega/reports/v0.2Report",id:"zkmega/reports/v0.2Report",isDocsHomePage:!1,title:"zkMega v0.2 \u62a5\u544a\uff08Megaclite v0.2 \u62a5\u544a\uff09",description:"1.\u56de\u987e0.2\u7684\u8bbe\u8ba1\u76ee\u6807",source:"@site/docs/zkmega/reports/v0.2Report.md",sourceDirName:"zkmega/reports",slug:"/zkmega/reports/v0.2Report",permalink:"/substrate-contracts-book/zkmega/reports/v0.2Report",editUrl:"https://github.com/patractlabs/substrate-contracts-book/edit/master/docs/zkmega/reports/v0.2Report.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"zkMega v0.1 \u62a5\u544a\uff08Megaclite v0.1 \u62a5\u544a\uff09",permalink:"/substrate-contracts-book/zkmega/reports/v0.1Report"},next:{title:"Himalia",permalink:"/substrate-contracts-book/himalia/introduction"}},c=[{value:"1.\u56de\u987e0.2\u7684\u8bbe\u8ba1\u76ee\u6807",id:"1\u56de\u987e02\u7684\u8bbe\u8ba1\u76ee\u6807",children:[{value:"M1: ZoPatract\u96c6\u6210arkworks-g16\u4ee5\u53ca\u56db\u6761\u66f2\u7ebf",id:"m1-zopatract\u96c6\u6210arkworks-g16\u4ee5\u53ca\u56db\u6761\u66f2\u7ebf",children:[]},{value:"M2: \u5b9e\u73b0zkSNARKs\u534f\u8bae\u5168\u9636\u6bb5\u7684CLI\u547d\u4ee4(ZoPatract_cli)",id:"m2-\u5b9e\u73b0zksnarks\u534f\u8bae\u5168\u9636\u6bb5\u7684cli\u547d\u4ee4zopatract_cli",children:[]},{value:"M3: \u5b9e\u73b0ZoPatract\u7684Javascript\u5de5\u5177\u5305(ZoPatract_js)",id:"m3-\u5b9e\u73b0zopatract\u7684javascript\u5de5\u5177\u5305zopatract_js",children:[]},{value:"M4: \u96c6\u6210\u6d4b\u8bd5",id:"m4-\u96c6\u6210\u6d4b\u8bd5",children:[]}]},{value:"2.\u5b9e\u73b0\u7684\u4ea4\u4ed8\u7269",id:"2\u5b9e\u73b0\u7684\u4ea4\u4ed8\u7269",children:[{value:"2.1 ZoPatract\u9879\u76ee",id:"21-zopatract\u9879\u76ee",children:[]},{value:"2.2 ZoPatract\u7684\u5728\u7ebf\u5b89\u88c5\u548c\u624b\u52a8\u5b89\u88c5",id:"22-zopatract\u7684\u5728\u7ebf\u5b89\u88c5\u548c\u624b\u52a8\u5b89\u88c5",children:[]},{value:"One-line installation",id:"one-line-installation",children:[]},{value:"From source",id:"from-source",children:[]},{value:"2.3 Javascript\u5de5\u5177\u5305",id:"23-javascript\u5de5\u5177\u5305",children:[]},{value:"2.4 ZoPatract\u7684\u8be6\u7ec6\u4f7f\u7528\u6587\u6863",id:"24-zopatract\u7684\u8be6\u7ec6\u4f7f\u7528\u6587\u6863",children:[]},{value:"2.5 ZoPatract\u5f00\u53d1\u7684\u7b80\u5355zk\u793a\u4f8b\u5e94\u7528",id:"25-zopatract\u5f00\u53d1\u7684\u7b80\u5355zk\u793a\u4f8b\u5e94\u7528",children:[]}]},{value:"3. \u8be6\u7ec6\u5b9e\u73b0(\u5c55\u793a\u6838\u5fc3\u4ee3\u7801)",id:"3-\u8be6\u7ec6\u5b9e\u73b0\u5c55\u793a\u6838\u5fc3\u4ee3\u7801",children:[{value:"3.1 ZoPatract\u7684\u8be6\u7ec6\u5b9e\u73b0",id:"31-zopatract\u7684\u8be6\u7ec6\u5b9e\u73b0",children:[]},{value:"ink contract template(ink_verifier.rs):",id:"ink-contract-templateink_verifierrs",children:[]}]},{value:"4. \u7528ZoPatract\u5728Jupiter\u4e0a\u5f00\u53d1zk\u5e94\u7528",id:"4-\u7528zopatract\u5728jupiter\u4e0a\u5f00\u53d1zk\u5e94\u7528",children:[{value:"off-chain:",id:"off-chain",children:[]},{value:"On chain",id:"on-chain",children:[]}]},{value:"\u56de\u987e\u9a8c\u8bc1\u4fe1\u606f",id:"\u56de\u987e\u9a8c\u8bc1\u4fe1\u606f",children:[]}],k={toc:c};function m(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},k,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"zkmega-v02-\u62a5\u544a\uff08megaclite-v02-\u62a5\u544a\uff09"},"zkMega v0.2 \u62a5\u544a\uff08Megaclite v0.2 \u62a5\u544a\uff09"),(0,o.kt)("h2",{id:"1\u56de\u987e02\u7684\u8bbe\u8ba1\u76ee\u6807"},"1.\u56de\u987e0.2\u7684\u8bbe\u8ba1\u76ee\u6807"),(0,o.kt)("h3",{id:"m1-zopatract\u96c6\u6210arkworks-g16\u4ee5\u53ca\u56db\u6761\u66f2\u7ebf"},"M1: ZoPatract\u96c6\u6210arkworks-g16\u4ee5\u53ca\u56db\u6761\u66f2\u7ebf"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u51c6\u5907ark\u7684g16\u7b97\u6cd5\u548c\uff0c\u7b97\u6cd5\u5305\u7531xxxx\u5c01\u88c5\u800c\u6765"),(0,o.kt)("li",{parentName:"ol"},"\u51c6\u5907ark\u7684bls12_381 Curve\u7b97\u6cd5\u5305\uff0c\u7b97\u6cd5\u5305\u7531xxxx\u5c01\u88c5\u800c\u6765"),(0,o.kt)("li",{parentName:"ol"},"\u51c6\u5907ark\u7684bn254 Curve\u7b97\u6cd5\u5305\uff0c\u7b97\u6cd5\u5305\u7531xxxx\u5c01\u88c5\u800c\u6765"),(0,o.kt)("li",{parentName:"ol"},"\u5c06\u4ee5\u4e0a\u4e09\u4e2a\u7b97\u6cd5\u5305\u96c6\u6210\u5230ZoPatract_core\u4e2d\uff0e"),(0,o.kt)("li",{parentName:"ol"},"\u5b8c\u6210CLI flag\u53c2\u6570\u5bf9\u65b0\u589e\u7b97\u6cd5\u5305\u7684\u8c03\u6574\u652f\u6301\uff0e")),(0,o.kt)("h3",{id:"m2-\u5b9e\u73b0zksnarks\u534f\u8bae\u5168\u9636\u6bb5\u7684cli\u547d\u4ee4zopatract_cli"},"M2: \u5b9e\u73b0zkSNARKs\u534f\u8bae\u5168\u9636\u6bb5\u7684CLI\u547d\u4ee4(ZoPatract_cli)"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5b9e\u73b0verifier\u529f\u80fd\u7684ink!\u667a\u80fd\u5408\u7ea6\u6a21\u677fink_verifier.rs\uff0c\u5e76\u5bf9\u63a5\u5230ZoPatract_cli"),(0,o.kt)("li",{parentName:"ol"},"\u5b9e\u73b0ZoPatract_cli\u6a21\u5757\u7684Compile\u3001Setup\u3001Compute-witness\u3001Generate-proof\u3001Export-verifier\u547d\u4ee4\u5728Ink!\u667a\u80fd\u5408\u7ea6\u73af\u5883\u7684\u79fb\u690d\u6539\u9020")),(0,o.kt)("h3",{id:"m3-\u5b9e\u73b0zopatract\u7684javascript\u5de5\u5177\u5305zopatract_js"},"M3: \u5b9e\u73b0ZoPatract\u7684Javascript\u5de5\u5177\u5305(ZoPatract_js)"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5b9e\u73b0wrapper\u6a21\u5757\u5bf9\u63a5ZoPatract_cli"),(0,o.kt)("li",{parentName:"ol"},"\u5b9e\u73b0Javascript\u5de5\u5177\u5305\uff0c\u652f\u6301API\u63a5\u53e3compile\u3001computeWitness\u3001setup\u3001generateProof\u3001exportInkVerifier")),(0,o.kt)("h3",{id:"m4-\u96c6\u6210\u6d4b\u8bd5"},"M4: \u96c6\u6210\u6d4b\u8bd5"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u6d4b\u8bd5CLI\u5bf9Arkworks\u7684G16\u548c\u66f2\u7ebfbls12_381\u3001bn254\u7b97\u6cd5\u5305\u7684\u4f7f\u7528"),(0,o.kt)("li",{parentName:"ol"},"\u6d4b\u8bd5CLI\u5bf9Compile\u3001Setup\u3001Compute-witness\u3001Generate-proof\u3001Export-verifier\u547d\u4ee4\u5728Ink!\u667a\u80fd\u5408\u7ea6\u73af\u5883\u7684\u4f7f\u7528"),(0,o.kt)("li",{parentName:"ol"},"\u6d4b\u8bd5Javascript\u5de5\u5177\u5305\u5728Ink!\u667a\u80fd\u5408\u7ea6\u73af\u5883\u4e0eCLI\u7684\u96c6\u6210"),(0,o.kt)("li",{parentName:"ol"},"\u4f7f\u7528ZoKrates\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u662f\u793a\u4f8b\u5e94\u7528\uff0c\u4f7f\u7528CLI\u5b8c\u6210\u8bc1\u660e\u6784\u5efa\uff0c\u5e76\u4f7f\u7528Javascript\u5de5\u5177\u5305\u548c\u94fe\u4e0a\u4ea4\u6613\u5b8c\u6210\u6d4b\u8bd5\u9a8c\u8bc1"),(0,o.kt)("li",{parentName:"ol"},"\u642d\u5efaZoPatract\u6587\u6863\u548c\u5728\u7ebf\u5b89\u88c5\u73af\u5883 ")),(0,o.kt)("h2",{id:"2\u5b9e\u73b0\u7684\u4ea4\u4ed8\u7269"},"2.\u5b9e\u73b0\u7684\u4ea4\u4ed8\u7269"),(0,o.kt)("h3",{id:"21-zopatract\u9879\u76ee"},"2.1 ZoPatract\u9879\u76ee"),(0,o.kt)("p",null,"ZoPatract \u662f\u4e00\u4e2a\u57fa\u4e8e",(0,o.kt)("a",{parentName:"p",href:"https://zokrates.github.io/"},"zokrates"),"\u6539\u9020\u7684\u9002\u914d\u4e8ejupiter ink\u73af\u5883\u7684zksnark toolbox. "),(0,o.kt)("h3",{id:"22-zopatract\u7684\u5728\u7ebf\u5b89\u88c5\u548c\u624b\u52a8\u5b89\u88c5"},"2.2 ZoPatract\u7684\u5728\u7ebf\u5b89\u88c5\u548c\u624b\u52a8\u5b89\u88c5"),(0,o.kt)("h3",{id:"one-line-installation"},"One-line installation"),(0,o.kt)("p",null,"We provide one-line installation for Linux, MacOS and FreeBSD:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -LSfs get.zoprat.es | sh\n")),(0,o.kt)("h3",{id:"from-source"},"From source"),(0,o.kt)("p",null,"You can build ZoPatract from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ZoPatract/ZoPatract/"},"source")," with the following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/ZoPatract/ZoPatract\ncd ZoPatract\ncargo +nightly build --release\ncd target/release\n")),(0,o.kt)("h3",{id:"23-javascript\u5de5\u5177\u5305"},"2.3 Javascript\u5de5\u5177\u5305"),(0,o.kt)("p",null,"JavaScript bindings for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ZoPatract"},"ZoPatract"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install zopatract-js\n")),(0,o.kt)("h4",{id:"importing"},"Importing"),(0,o.kt)("h5",{id:"bundlers"},"Bundlers"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," As this library uses a model where the wasm module itself is natively an ES module, you will need a bundler of some form.\nCurrently the only known bundler known to be fully compatible with ",(0,o.kt)("inlineCode",{parentName:"p"},"zopatract-js")," is ",(0,o.kt)("a",{parentName:"p",href:"https://webpack.js.org/"},"Webpack"),".\nThe choice of this default was done to reflect the trends of the JS ecosystem."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { initialize } from 'zopatract-js';\n")),(0,o.kt)("h5",{id:"node"},"Node"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { initialize } = require('zopatract-js/node');\n")),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'initialize().then((zopatractProvider) => {\n    const source = "def main(private field a) -> field: return a * a";\n\n    // compilation\n    const artifacts = zopatractProvider.compile(source);\n\n    // computation\n    const { witness, output } = zopatractProvider.computeWitness(artifacts, ["2"]);\n\n    // run setup\n    const keypair = zopatractProvider.setup(artifacts.program);\n\n    // generate proof\n    const proof = zopatractProvider.generateProof(artifacts.program, witness, keypair.pk);\n\n    // export solidity verifier\n    const verifier = zopatractProvider.exportSolidityVerifier(keypair.vk, "v1");\n});\n')),(0,o.kt)("h3",{id:"24-zopatract\u7684\u8be6\u7ec6\u4f7f\u7528\u6587\u6863"},"2.4 ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/patractlabs/ZoPatract/blob/master/zopatract_book/src/SUMMARY.md"},"ZoPatract\u7684\u8be6\u7ec6\u4f7f\u7528\u6587\u6863")),(0,o.kt)("p",null,"\u53ef\u4ee5\u83b7\u53d6\u76f8\u5173\u547d\u4ee4\u3001\u9ad8\u7ea7\u8bed\u8a00\u3001\u5de5\u5177\u5305\u548c\u793a\u4f8b\u4ee3\u7801\u7684\u4f7f\u7528\u4fe1\u606f\n(\u9879\u76ee\u4ee3\u7801/\u5de5\u5177\u5305/\u6587\u6863/\u793a\u4f8b\u7a0b\u5e8f)"),(0,o.kt)("h3",{id:"25-zopatract\u5f00\u53d1\u7684\u7b80\u5355zk\u793a\u4f8b\u5e94\u7528"},"2.5 ZoPatract\u5f00\u53d1\u7684\u7b80\u5355zk\u793a\u4f8b\u5e94\u7528"),(0,o.kt)("h4",{id:"zopatract-use-bls12_381-based-arkworks-groth16-algorithm-case"},"ZoPatract use bls12_381-based arkworks-groth16 algorithm case:"),(0,o.kt)("p",null,"First, create the text-file square_root.zop and implement your program. In this example, we will prove knowledge of the square root a of a number b:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def main(private field a, field b) -> bool:\n  return a * a == b\n")),(0,o.kt)("p",null,"Some observations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The keyword field is the basic type we use, which is an element of a given prime field."),(0,o.kt)("li",{parentName:"ul"},"The keyword private signals that we do not want to reveal this input, but still prove that we know its value.")),(0,o.kt)("p",null,"Then run the different phases of the protocol:\ncompile: \u5c06zok\u6e90\u7801\u538b\u5e73\u6210\u903b\u8f91\u6761\u4ef6\u8bed\u53e5\u5f62\u5f0f, \u751f\u6210\u4e24\u4e2a\u6587\u4ef6(\u9ed8\u8ba4 out, out.ztf), \u5176\u4e2d .ztf \u6587\u4ef6\u662f\u53ef\u8bfb\u7248."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# compile , \u9009\u62e9bls12_381\u66f2\u7ebf\n./zopatract compile -i square_root.zop -c bls12_381\n")),(0,o.kt)("p",null,"setup: \u6267\u884ctrusted setup\u64cd\u4f5c, \u751f\u6210arkworks-groth16\u7b97\u6cd5\u7684CRS(Common Reference String)."),(0,o.kt)("p",null,"\u8f93\u5165\u4e3a compile \u751f\u6210\u7684 out, \u5728\u751f\u6210 CRS \u524d\u4f1a\u4f1a\u5148\u751f\u6210 R1CS \u7b49\u64cd\u4f5c, \u6700\u7ec8\u8f93\u51fa\u4e24\u4e2a\u6587\u4ef6: proving.key \u548c verification.key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# perform the setup phase\n./zopatract setup -b ark -s g16\n")),(0,o.kt)("p",null,"compute-witness: \u547d\u4ee4\u7684\u8f93\u5165\u4e3acompile\u751f\u6210\u7684out, \u4ee5\u53ca\u8ba1\u7b97\u95ee\u9898\u7684\u8f93\u5165\u53c2\u6570; \u8f93\u51fa\u4e00\u4e2a\u6587\u4ef6, \u9ed8\u8ba4\u6587\u4ef6\u540d\u4e3a witness."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# execute the program\n./zopatract compute-witness -a 12 144\n")),(0,o.kt)("p",null,"generate-proof: \u57fa\u4e8econstrained system(computation problem)\u4ee5\u53ca witness \u751f\u6210\u5bf9\u5e94\u7684\u96f6\u77e5\u8bc6\u8bc1\u660e proof.json."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# use arkworks groth16 algorithm to generate a proof of computation\n./zopatract generate-proof -b ark -s g16\n")),(0,o.kt)("p",null,"verify: \u9a8c\u8bc1proof.json(\u9ed8\u8ba4\u9009\u62e9\u5f53\u524d\u8def\u5f84\u4e0b\u7684proof.json\u6587\u4ef6)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# \u901a\u8fc7-b, -s, -c\u5206\u522b\u9009\u62e9arkworks scheme, groth16 algorithm, bls12_381 curve\n./zopatract verify -b ark -s g16 -c bls12_381\n")),(0,o.kt)("h2",{id:"3-\u8be6\u7ec6\u5b9e\u73b0\u5c55\u793a\u6838\u5fc3\u4ee3\u7801"},"3. \u8be6\u7ec6\u5b9e\u73b0(\u5c55\u793a\u6838\u5fc3\u4ee3\u7801)"),(0,o.kt)("p",null,"ZoPatract helps you use verifiable computation in your DApp, from the specification of your program in a high level language to generating proofs of computation to verifying those proofs in ink!."),(0,o.kt)("h3",{id:"31-zopatract\u7684\u8be6\u7ec6\u5b9e\u73b0"},"3.1 ZoPatract\u7684\u8be6\u7ec6\u5b9e\u73b0"),(0,o.kt)("h4",{id:"311-\u96c6\u6210arkworks-groth16httpsgithubcomarkworks-rsgroth16-\u5230zopatract"},"3.1.1 \u96c6\u6210arkworks-groth16(",(0,o.kt)("a",{parentName:"h4",href:"https://github.com/arkworks-rs/groth16"},"https://github.com/arkworks-rs/groth16"),") \u5230ZoPatract"),(0,o.kt)("p",null,"\u6574\u4e2a\u8bbe\u8ba1\u6700\u4e0a\u5c42\u4e3b\u8981\u901a\u8fc7\u5404\u4e2a\u4e0d\u540c\u7684\u96f6\u77e5\u8bc6\u8bc1\u660e\u5e93\u53bb\u5b9e\u73b0Backend trait\u6765\u89e6\u53d1\u4e0d\u540c\u5e93\u7684\u4f7f\u7528:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait Backend<T: Field, S: Scheme<T>> {\n    fn setup(program: ir::Prog<T>) -> SetupKeypair<S::VerificationKey>;\n\n    fn generate_proof(\n        program: ir::Prog<T>,\n        witness: ir::Witness<T>,\n        proving_key: Vec<u8>,\n    ) -> Proof<S::ProofPoints>;\n\n    fn verify(vk: S::VerificationKey, proof: Proof<S::ProofPoints>) -> bool;\n}\n")),(0,o.kt)("p",null,"\u6211\u4eec\u7ed9Ark struct(\u5bf9\u6807arkworks\u5e93)\u5b9e\u73b0Backend trait\u7684\u4e09\u4e2a\u65b9\u6cd5:\n\u521d\u59cb\u5316\u751f\u6210CRS(provingkey, verifykey)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"fn setup(program: Prog<T>) -> SetupKeypair<<G16 as Scheme<T>>::VerificationKey> {\n    let parameters = Computation::without_witness(program).groth16_setup();\n\n    let mut pk: Vec<u8> = Vec::new();\n    parameters.serialize_uncompressed(&mut pk).unwrap();\n\n    let vk = VerificationKey {\n        alpha: parse_g1::<T>(&parameters.vk.alpha_g1),\n        beta: parse_g2::<T>(&parameters.vk.beta_g2),\n        gamma: parse_g2::<T>(&parameters.vk.gamma_g2),\n        delta: parse_g2::<T>(&parameters.vk.delta_g2),\n        gamma_abc: parameters\n            .vk\n            .gamma_abc_g1\n            .iter()\n            .map(|g1| parse_g1::<T>(g1))\n            .collect(),\n    };\n    SetupKeypair::new(vk, pk)\n}\n")),(0,o.kt)("p",null,"\u4e3b\u8981\u7528\u4e8e\u5c06dsl\u4ea7\u751f\u7684Prog\u8f6c\u6362\u6210computation,\u7136\u540e\u901a\u8fc7groth16_prove\u4ea7\u751fproof"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"fn generate_proof(\n        program: Prog<T>,\n        witness: Witness<T>,\n        proving_key: Vec<u8>,\n    ) -> Proof<<G16 as Scheme<T>>::ProofPoints> {\n    let computation = Computation::with_witness(program, witness);\n    let params = ProvingKey::<<T as ArkFieldExtensions>::ArkEngine>::deserialize_uncompressed(\n        &mut proving_key.as_slice(),\n    ).unwrap();\n\n    let proof = computation.clone().groth16_prove(&params);\n    let proof_points = ProofPoints {\n        a: parse_g1::<T>(&proof.a),\n        b: parse_g2::<T>(&proof.b),\n        c: parse_g1::<T>(&proof.c),\n    };\n\n    let inputs = computation\n        .public_inputs_values()\n        .iter()\n        .map(parse_fr::<T>)\n        .collect::<Vec<_>>();\n\n    Proof::new(proof_points, inputs)\n}\n")),(0,o.kt)("p",null,"\u4e3b\u8981\u505a\u4e86verifykey\u548cproof\u7684\u683c\u5f0f\u8f6c\u5316, \u5c01\u88c5\u4e86arkworks-groth16\u7684verify_proof function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'fn verify(\n        vk: <G16 as Scheme<T>>::VerificationKey,\n        proof: Proof<<G16 as Scheme<T>>::ProofPoints>,\n    ) -> bool {\n    let vk = VerifyingKey {\n        alpha_g1: serialization::to_g1::<T>(vk.alpha),\n        beta_g2: serialization::to_g2::<T>(vk.beta),\n        gamma_g2: serialization::to_g2::<T>(vk.gamma),\n        delta_g2: serialization::to_g2::<T>(vk.delta),\n        gamma_abc_g1: vk\n            .gamma_abc\n            .into_iter()\n            .map(|g1| serialization::to_g1::<T>(g1))\n            .collect(),\n    };\n\n    let ark_proof = ArkProof {\n        a: serialization::to_g1::<T>(proof.proof.a),\n        b: serialization::to_g2::<T>(proof.proof.b),\n        c: serialization::to_g1::<T>(proof.proof.c),\n    };\n\n    let pvk: PreparedVerifyingKey<<T as ArkFieldExtensions>::ArkEngine> =\n        prepare_verifying_key(&vk);\n\n    let public_inputs: Vec<_> = proof\n        .inputs\n        .iter()\n        .map(|s| {\n            T::try_from_str(s.trim_start_matches("0x"), 16)\n                .unwrap()\n                .into_ark()\n        })\n        .collect::<Vec<_>>();\n    verify_proof(&pvk, &ark_proof, &public_inputs).unwrap()\n}\n')),(0,o.kt)("p",null,"\u901a\u8fc7computation_basic macro\u7ed9Computation\u5b9e\u73b0\u4e86\u5c01\u88c5arkworks groth16\u548cgm17 algorithm\u7684setup prove."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"macro_rules! computation_basic {\n    ($algorithm:tt, $name:ident) => {\n        paste::item! {\n            impl<T: Field + ArkFieldExtensions> Computation<T> {\n                pub fn [<$name _prove>](self, params: &$algorithm::ProvingKey<T::ArkEngine>) -> $algorithm::Proof<T::ArkEngine> {\n                    let rng = &mut rand_0_7::rngs::StdRng::from_entropy();\n\n                    let proof = $algorithm::create_random_proof(self.clone(), params, rng).unwrap();\n\n                    let pvk = $algorithm::prepare_verifying_key(&params.vk);\n\n                    // extract public inputs\n                    let public_inputs = self.public_inputs_values();\n\n                    assert!($algorithm::verify_proof(&pvk, &proof, &public_inputs).unwrap());\n\n                    proof\n                }\n\n                pub fn [<$name _setup>](self) -> $algorithm::ProvingKey<T::ArkEngine> {\n                    let rng = &mut rand_0_7::rngs::StdRng::from_entropy();\n\n                    // run setup phase\n                    $algorithm::generate_random_parameters(self, rng).unwrap()\n                }\n            }\n        }\n    }\n}\n\ncomputation_basic!(ark_gm17, gm17);\ncomputation_basic!(ark_groth16, groth16);\n")),(0,o.kt)("h4",{id:"312-\u96c6\u6210arkworks\u56db\u6761\u66f2\u7ebfbls12_377-bls12_381-bn254-bw6_761\u5230zopatract\u7684arkworks-groth16\u7b97\u6cd5"},"3.1.2 \u96c6\u6210arkworks\u56db\u6761\u66f2\u7ebf",(0,o.kt)("a",{parentName:"h4",href:"https://github.com/arkworks-rs/curves"},"Bls12_377, Bls12_381, Bn254, BW6_761"),"\u5230ZoPatract\u7684arkworks groth16\u7b97\u6cd5:"),(0,o.kt)("p",null,"\u901a\u8fc7ArkFieldExtensions trait\u6dfb\u52a0arkworks curve:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait ArkFieldExtensions {\n    /// An associated type to be able to operate with ark ff traits\n    type ArkEngine: PairingEngine;\n\n    fn from_ark(e:<Self::ArkEngine as ark_ec::PairingEngine>::Fr) -> Self;\n    fn into_ark(self) -> <Self::ArkEngine as ark_ec::PairingEngine>::Fr;\n}\n")),(0,o.kt)("p",null,"\u901a\u8fc7ark_extensions macro\u7ed9\u5404\u4e2a\u66f2\u7ebf\u5b9e\u73b0ArkFieldExtensions trait:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"ark_extensions!(Bls12_377);\nark_extensions!(Bls12_381);\nark_extensions!(Bn254);\nark_extensions!(BW6_761);\n")),(0,o.kt)("p",null,"\u901a\u8fc7T: trait bound\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684arkworks curves:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl<T: Field + ArkFieldExtensions + NotBw6_761Field> Backend<T, G16> for Ark { /*Omited*/ }\n")),(0,o.kt)("h4",{id:"32-\u96c6\u6210ink\u5408\u7ea6-verfify\u6a21\u677f\u7684\u5b9e\u73b0\u6a21\u677f\u4ee3\u7801\u5728\u54ea\u91cc\uff0c\u6539\u52a8\u6838\u5fc3\u70b9\u7528\u4ee3\u7801\u5c55\u793a\u51fa\u6765\uff0c\u5305\u62ecexport_ink_verifier\uff0c\u5305\u62ec\u547d\u4ee4\u884c\u5904\u53c2\u6570\u90e8\u5206\u7684\u6539\u52a8"},"3.2 \u96c6\u6210ink\u5408\u7ea6 verfify\u6a21\u677f\u7684\u5b9e\u73b0(\u6a21\u677f\u4ee3\u7801\u5728\u54ea\u91cc\uff0c\u6539\u52a8\u6838\u5fc3\u70b9\u7528\u4ee3\u7801\u5c55\u793a\u51fa\u6765\uff0c\u5305\u62ecexport_ink_verifier\uff0c\u5305\u62ec\u547d\u4ee4\u884c\u5904\u53c2\u6570\u90e8\u5206\u7684\u6539\u52a8)"),(0,o.kt)("p",null,"\u53ef\u4ee5\u901a\u8fc7",(0,o.kt)("inlineCode",{parentName:"p"},"./zopatract export-verifier -t ink"),"\u547d\u4ee4\u5bfc\u51fa ink_verifier.rs \u5408\u7ea6\u6a21\u677f.\n\u5b9e\u73b0\u901a\u8fc7InkCompatibleScheme trait\u7684",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ZoPatract/blob/master/zopatract_core/src/proof_system/ink.rs"},"export_ink_verifier"),"\u65b9\u6cd5\u5904\u7406",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ZoPatract/blob/master/zopatract_core/src/proof_system/ink.rs"},"INK_CONTRACT_TEMPLATE"),"\u5e38\u91cf\u5b57\u7b26\u4e32\u548cCARGO_TOML\u5e38\u7528\u5b57\u7b26\u4e32."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'impl<T: InkCompatibleField> InkCompatibleScheme<T> for G16 {\n    fn export_ink_verifier(vk: <G16 as Scheme<T>>::VerificationKey,abi: InkAbi) -> (String,String) {\n        let (mut template_text,toml_text) =  match abi {\n            InkAbi::V1 => (String::from(INK_CONTRACT_TEMPLATE),String::from(CARGO_TOML)),\n            InkAbi::V2 => (String::from(INK_CONTRACT_TEMPLATE),String::from(CARGO_TOML))\n        };\n        let vk_regex = Regex::new(r#"(<%vk_[^i%]*%>)"#).unwrap();\n        let vk_gamma_abc_len_regex = Regex::new(r#"(<%vk_gamma_abc_len%>)"#).unwrap();\n        let vk_gamma_abc_regex = Regex::new(r#"(<%vk_gamma_abc%>)"#).unwrap();\n\n        let format_g2affine = |g2:G2Affine|{\n            format!(\n                "\\"{}\\", \\"{}\\", \\"{}\\", \\"{}\\"",\n                (g2.0).0, (g2.0).1,\n                (g2.1).0, (g2.1).1\n        )};\n\n        template_text = vk_regex\n            .replace(template_text.as_str(),format!("\\"{}\\",\\"{}\\"",vk.alpha.0,vk.alpha.1).as_str())\n            .into_owned();\n        template_text = vk_regex\n            .replace(template_text.as_str(), format_g2affine(vk.beta).as_str())\n            .into_owned();\n        template_text = vk_regex\n            .replace(template_text.as_str(),format_g2affine(vk.gamma).as_str())\n            .into_owned();\n        template_text = vk_regex\n            .replace(template_text.as_str(),format_g2affine(vk.delta).as_str())\n            .into_owned();\n        template_text = vk_gamma_abc_len_regex\n            .replace(template_text.as_str(),format!("{}", vk.gamma_abc.len()*2).as_str())\n            .into_owned();\n\n        let mut vk_gamma_abc = String::new();\n        vk.gamma_abc.iter().for_each(|g1| {\n                vk_gamma_abc.extend(format!("\\"{}\\",\\"{}\\",",g1.0,g1.1).chars());\n        });\n        template_text = vk_gamma_abc_regex\n            .replace(template_text.as_str(),vk_gamma_abc.strip_suffix(",").unwrap())\n            .into_owned();\n        (template_text, toml_text)\n    }\n}\n')),(0,o.kt)("h3",{id:"ink-contract-templateink_verifierrs"},"ink contract template(",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/patractlabs/ZoPatract/blob/master/zopatract_core/src/proof_system/ink.rs"},"ink_verifier.rs"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\nuse ink_lang as ink;\nuse megaclite_arkworks::{groth16, curve::<%curve%>, result::Error};\n\n// VK = [alpha beta gamma delta]\nstatic VK:[&str;14] = [<%vk_alpha%>,\n                        <%vk_beta%>,\n                        <%vk_gamma%>,\n                        <%vk_delta%>];\nstatic VK_GAMMA_ABC:[&str;<%vk_gamma_abc_len%>] =[<%vk_gamma_abc%>];\n\n#[ink::contract]\nmod zop {\n    #[ink(storage)]\n    pub struct Zop {\n        // Stores the ZK result\n        result: bool,\n    }\n\n    impl Zop {\n        /// Use false as initial value\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self { result: false }\n        }\n\n        #[ink(message)]\n        pub fn verify(&self, proof_and_input: &[u8]) -> Result<bool, Error> {\n            groth16::preprocessed_verify_proof::<<%curve%>>(VK, VK_GAMMA_ABC, proof_and_input)\n        }\n    }\n}\n')),(0,o.kt)("p",null,"Cargo.toml templa:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'[package]\nname = "zop"\nversion = "0.1.0"\nauthors = ["[your_name] <[your_email]>"]\nedition = "2018"\n\n[dependencies]\nink_primitives = { version = "3.0.0-rc2", default-features = false }\nink_metadata = { version = "3.0.0-rc2", default-features = false, features = ["derive"], optional = true }\nink_env = { version = "3.0.0-rc2", default-features = false }\nink_storage = { version = "3.0.0-rc2", default-features = false }\nink_lang = { version = "3.0.0-rc2", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "1.3", default-features = false, features = ["derive"] }\nscale-info = { version = "0.4.1", default-features = false, features = ["derive"], optional = true }\n\n# megalicte zk library\nmegaclite-arkworks = { git = "https://github.com/patractlabs/megaclite.git", default-features = false }\n\n[lib]\nname = "zop"\npath = "lib.rs"\ncrate-type = [\n    # Used for normal contract Wasm blobs.\n    "cdylib",\n]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink_metadata/std",\n    "ink_env/std",\n    "ink_storage/std",\n    "ink_primitives/std",\n    "scale/std",\n    "scale-info/std",\n]\nink-as-dependency = []\n')),(0,o.kt)("h2",{id:"4-\u7528zopatract\u5728jupiter\u4e0a\u5f00\u53d1zk\u5e94\u7528"},"4. \u7528ZoPatract\u5728Jupiter\u4e0a\u5f00\u53d1zk\u5e94\u7528"),(0,o.kt)("h3",{id:"off-chain"},"off-chain:"),(0,o.kt)("p",null,"First, create the text-file square_root.zop and implement your program. In this example, we will prove knowledge of the square root a of a number b:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def main(private field a, field b) -> bool:\n  return a * a == b\n")),(0,o.kt)("h4",{id:"then-run-the-different-phases-of-the-protocol"},"Then run the different phases of the protocol:"),(0,o.kt)("p",null,"compile: \u5c06zok\u6e90\u7801\u538b\u5e73\u6210\u903b\u8f91\u6761\u4ef6\u8bed\u53e5\u5f62\u5f0f, \u751f\u6210\u4e24\u4e2a\u6587\u4ef6(\u9ed8\u8ba4 out, out.ztf), \u5176\u4e2d .ztf \u6587\u4ef6\u662f\u53ef\u8bfb\u7248."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# compile , \u9009\u62e9bls12_381\u66f2\u7ebf\n./zopatract compile -i square_root.zop -c bls12_381\n")),(0,o.kt)("p",null,"setup: \u6267\u884ctrusted setup\u64cd\u4f5c, \u751f\u6210arkworks-groth16\u7b97\u6cd5\u7684CRS(Common Reference String).\n\u8f93\u5165\u4e3a compile \u751f\u6210\u7684 out, \u5728\u751f\u6210\u7684CRS \u524d\u4f1a\u4f1a\u5148\u751f\u6210 R1CS \u7b49\u64cd\u4f5c, \u6700\u7ec8\u8f93\u51fa\u4e24\u4e2a\u6587\u4ef6: proving.key \u548c verification.key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# perform the setup phase\n./zopatract setup -b ark -s g16\n")),(0,o.kt)("h4",{id:"\u5bfc\u51faink_verifierrs\u5408\u7ea6\u5e76\u90e8\u7f72\u5230\u94fe\u4e0a"},"\u5bfc\u51faink_verifier.rs\u5408\u7ea6,\u5e76\u90e8\u7f72\u5230\u94fe\u4e0a:"),(0,o.kt)("p",null,"export-verifier: select the curve at compile phase to export ink contract-type ink_verifier.rs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./zopatract export-verifier -t ink -c bls12_381\n")),(0,o.kt)("p",null,"\u90e8\u7f72:\n//\u914d\u56fe"),(0,o.kt)("h4",{id:"generate-proof"},"generate proof:"),(0,o.kt)("p",null,"compute-witness: \u547d\u4ee4\u7684\u8f93\u5165\u4e3acompile\u751f\u6210\u7684out, \u4ee5\u53ca\u8ba1\u7b97\u95ee\u9898\u7684\u8f93\u5165\u53c2\u6570; \u8f93\u51fa\u4e00\u4e2a\u6587\u4ef6, \u9ed8\u8ba4\u6587\u4ef6\u540d\u4e3a witness."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# execute the program\n./zopatract compute-witness -a 12 144\n")),(0,o.kt)("p",null,"\u57fa\u4e8econstrained system(computation problem)\u4ee5\u53ca witness \u751f\u6210\u5bf9\u5e94\u7684\u96f6\u77e5\u8bc6\u8bc1\u660e proof.json\u548c",(0,o.kt)("strong",{parentName:"p"},"proof.txt"),"(hex encode all data)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# use arkworks groth16 algorithm to generate a proof of computation\n./zopatract generate-proof -b ark -s g16\n")),(0,o.kt)("p",null,"cli printed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Generating proof...\nProof hex:\n822a26fa4c0a7fbcc725dd45f89d9a33fd69f0545702c55dfe6e5c36f987b9de3a48b53df6e9c2ce04e51dc479307f0281fbdbec9b1510435f8d3b1b6649d408e71f7e61a78d00156e42d7eef6a68f1e6b14b3a0c209e133e5d0fecbf17c2d1500647ec3b72e31d59ed2dc3d4ac84111db3d505c7d0d376e2f5b406c302d927c939e01f76a6298f3e751d7624a72c5d3196abea9d14509701344da6eb3b10d235068dd1f113d78a63b108f64da5c4a13117776a2a6cb8a765f020f569e56172c15cc94eb9d5aba92ec0ad775b14beeca44b9f6db7e6d74d9594a731c40e7cc31b13b140d12e04e0b087315f72624dd97188c9dd182e1607cf18ae48981be0a86a9fa62a696a88e57eee3dad0c5a24f6a5df938a48c77265f595a9765c0cad25c110052c05fa24dc8058811bbeeeced871472451c23370f924854e328198088e533f070f9b7e5636bcd9b4dfd1af96d6b7a0564d4660f7f0e1e75cc25f6c55cd1f1e8db29f105286fd48a5c90394b50b8b2641949f8d62b22778b0bc3b56ee12cbb050090000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000\n")),(0,o.kt)("h4",{id:"\u53d1\u9001proof\u5230\u94fe\u4e0a"},"\u53d1\u9001proof\u5230\u94fe\u4e0a:"),(0,o.kt)("p",null,"\u901a\u8fc7postman\u5c06hex proof\u6216proof.txt\u5185\u5bb9\u4ee5\u4ea4\u6613\u5f62\u5f0f\u53d1\u9001\u5230\u94fe\u4e0a:\n// Todo \u914d\u56fe"),(0,o.kt)("h3",{id:"on-chain"},"On chain"),(0,o.kt)("p",null,"\u94fe\u4e0a\u9a8c\u8bc1\u7ed3\u679c:\n// \u914d\u56fe"),(0,o.kt)("h2",{id:"\u56de\u987e\u9a8c\u8bc1\u4fe1\u606f"},"\u56de\u987e\u9a8c\u8bc1\u4fe1\u606f"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"ZoPatract_core integrates arkworks-g16\u3001arkworks-bls12_381\u3001arkworks-bn254")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Implement CLI command for the whole phase of Zksnarks agreement (Zopatract_cli)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"The Ink smart contract template ink_verifier.rs that implements the verifier function is connected to Zopatract_cli's export-verifier.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Modify the Zopatract JavaScript toolkit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Test CLI's use of Arkworks groth16 algorithm and curve Bls12_381 and Bn254 curve package")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Test CLI on compile, setup, compute-witness, generate-proof, export-verifier commands in ink! smart contract environments."))))}m.isMDXComponent=!0}}]);