"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[753],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),p=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(k,i(i({ref:n},s),{},{components:t})):a.createElement(k,i({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2173:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],l={},c="Europa debugging example",p={unversionedId:"europa/guides/debug-example",id:"europa/guides/debug-example",isDocsHomePage:!1,title:"Europa debugging example",description:"Duplicate topics",source:"@site/docs/europa/guides/debug-example.md",sourceDirName:"europa/guides",slug:"/europa/guides/debug-example",permalink:"/substrate-contracts-book/europa/guides/debug-example",editUrl:"https://github.com/patractlabs/substrate-contracts-book/docs/europa/guides/debug-example.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Europa's Wasm Backtrace",permalink:"/substrate-contracts-book/europa/guides/backtrace"},next:{title:"Europa Wasm executor",permalink:"/substrate-contracts-book/europa/guides/wasm-executor"}},s=[{value:"Duplicate topics",id:"duplicate-topics",children:[]},{value:"Inconsistent balance types",id:"inconsistent-balance-types",children:[]}],u={toc:s};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"europa-debugging-example"},"Europa debugging example"),(0,o.kt)("h2",{id:"duplicate-topics"},"Duplicate topics"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"checkout ",(0,o.kt)("inlineCode",{parentName:"p"},"ink!")," to commit ",(0,o.kt)("inlineCode",{parentName:"p"},"8e8fe09565ca6d2fad7701d68ff13f12deda7eed"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ink\n$ git checkout 8e8fe09565ca6d2fad7701d68ff13f12deda7eed -b tmp\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Change the value to 0_u128 in the Transfer event under ink/examples/erc20/lib.rs:L90."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(constructor)]\npub fn new(initial_supply: Balance) -> Self {\n     //...\n     Self::env().emit_event(Transfer {\n        from: None,\n        to: Some(caller),\n        // change this from `initial_supply` to `0_u128`\n        value: 0_u128.into() // initial_supply,\n     });\n     instance\n}\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Execute ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo +nightly contract build --debug")," to compile the contract.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use ",(0,o.kt)("a",{parentName:"p",href:"https://redspot.patract.io/en/tutorial/"},"Redspot")," or ",(0,o.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/#/explorer"},"Polkadot/Substrate Portal")," to deploy the contract."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note")," erc20.wasm must be used here instead of erc20-opt.wasm, otherwise the wasm backtrace cannot be printed normally."),(0,o.kt)("p",null,"During the deployment process, you will encounter ",(0,o.kt)("inlineCode",{parentName:"p"},"DuplicateTopics")," and the Europa log looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'1: NestedRuntime {\n    #...\n    env_trace: [\n        seal_input(Some(0xd183512b0)),\n        #...    \n        seal_deposit_event((Some([0x45726332303a3a5472616e736....]), None)),\n    ],\n    trap_reason: TrapReason::SupervisorError(DispatchError::Module { index: 5, error: 23, message: Some("DuplicateTopics") }),\n    wasm_error: Error::WasmiExecution(Trap(Trap { kind: Host(DummyHostError) }))\n        wasm backtrace: \n        |  ink_env::engine::on_chain::ext::deposit_event[1623]\n        |  ink_env::engine::on_chain::impls::<impl ink_env::backend::TypedEnvBackend for ink_env::engine::on_chain::EnvInstance>::emit_event[1564]\n        |  ink_env::api::emit_event::{{closure}}[1563]\n        |  <ink_env::engine::on_chain::EnvInstance as ink_env::engine::OnInstance>::on_instance[1562]\n        |  ink_env::api::emit_event[1561]\n        |  erc20::erc20::_::<impl ink_lang::events::EmitEvent<erc20::erc20::Erc20> for ink_lang::env_access::EnvAccess<<erc20::erc20::Erc20 as ink_lang::env_access::ContractEnv>::Env>>::emit_event[1685]\n        # ...\n        # ...\n        |  deploy[1691]\n        \u2570\u2500><unknown>[2385]\n    ,\n    nest: [],\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The last record in ",(0,o.kt)("inlineCode",{parentName:"li"},"env_trace")," is ",(0,o.kt)("inlineCode",{parentName:"li"},"seal_deposit_event"),", not ",(0,o.kt)("inlineCode",{parentName:"li"},"seal_return"),". If the contract is executed normally, the last record should be ",(0,o.kt)("inlineCode",{parentName:"li"},"seal_return"),"."),(0,o.kt)("li",{parentName:"ul"},"The second parameter of ",(0,o.kt)("inlineCode",{parentName:"li"},"seal_deposit_event")," is None, which means that the host_function is not executed normally. For more details, please refer to ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/patractlabs/substrate/blob/3624deb47cabe6f6cd44ec2c49c6ae5a29fd2198/frame/contracts/src/wasm/runtime.rs#L1399"},"the relevant implementation"),"."),(0,o.kt)("li",{parentName:"ul"},"Combined with wasm backtrace, you can see that the top of the stack is deposit_event.")),(0,o.kt)("p",null,"In summary, it can be concluded that the error occurred in the host_function of ",(0,o.kt)("inlineCode",{parentName:"p"},"seal_deposit_event"),"."),(0,o.kt)("h2",{id:"inconsistent-balance-types"},"Inconsistent balance types"),(0,o.kt)("p",null,"Assuming that the balance on the chain is defined as u64, and the balance in ink! is defined as u128, an ordinary erc20 contract is deployed."),(0,o.kt)("p",null,"When reading ",(0,o.kt)("inlineCode",{parentName:"p"},"total_supply"),", the log content in Europa looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'1: NestedRuntime {\n    ext_result: [failed] ExecError { error: DispatchError::Module { index: 5, error: 17, message: Some("ContractTrapped") }, origin: ErrorOrigin::Caller },\n    caller: 0000000000000000000000000000000000000000000000000000000000000000 (5C4hrfjw...),\n    self_account: 2fe715301c9609c0c5ab75b24f2d8ad7dbe9671d7aebfeed80ed8963bc017955 (5D9Wkfa3...),\n    selector: 0xdb6375a8,\n    args: None,\n    value: 0,\n    gas_limit: 4999999999999,\n    gas_left: 4999865113466,\n    env_trace: [\n        seal_value_transferred(Some(0x0000000000000000)),\n    ],\n    wasm_error: Error::WasmiExecution(Trap(Trap { kind: Unreachable }))\n            wasm backtrace:\n            |  core::panicking::panic_fmt.48[1956]\n            |  core::result::unwrap_failed[1057]\n            |  core::result::Result<T,E>::expect[1060]\n            |  ink_lang::dispatcher::deny_payment[1878]\n            |  call[1906]\n            \u2570\u2500><unknown>[2614]\n    ,\n    nest: [],\n}\n')),(0,o.kt)("p",null,"When calling ",(0,o.kt)("inlineCode",{parentName:"p"},"tranfer"),", the log in Europa looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'1: NestedRuntime {\n    ext_result: [failed] ExecError { error: DispatchError::Module { index: 5, error: 17, message: Some("ContractTrapped") }, origin: ErrorOrigin::Caller },\n    caller: 0000000000000000000000000000000000000000000000000000000000000000 (5C4hrfjw...),\n    self_account: 2fe715301c9609c0c5ab75b24f2d8ad7dbe9671d7aebfeed80ed8963bc017955 (5D9Wkfa3...),\n    selector: 0xdb6375a8,\n    args: None,\n    value: 0,\n    gas_limit: 4999999999999,\n    gas_left: 4999865113466,\n    env_trace: [\n        seal_value_transferred(Some(0x0000000000000000)),\n    ],\n    wasm_error: Error::WasmiExecution(Trap(Trap { kind: Unreachable }))\n            wasm backtrace:\n            |  core::panicking::panic_fmt.48[1956]\n            |  core::result::unwrap_failed[1057]\n            |  core::result::Result<T,E>::expect[1060]\n            |  ink_lang::dispatcher::deny_payment[1878]\n            |  call[1906]\n            \u2570\u2500><unknown>[2614]\n    ,\n    nest: [],\n}\n')),(0,o.kt)("p",null,"It can be found that whether it is a read operation or a write operation, there will be a ",(0,o.kt)("inlineCode",{parentName:"p"},"call -> deny_payment -> expect call")," process. The reason is that in ink!, there are the following codes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\nfn call() -> u32 {\n    if true {\n     ::ink_lang::deny_payment::<<Erc20 as ::ink_lang::ContractEnv>::Env>()\n                    .expect("caller transferred value even though all ink! message deny payments")\n    }\n    ::ink_lang::DispatchRetCode::from(\n        <Erc20 as ::ink_lang::DispatchUsingMode>::dispatch_using_mode(\n            ::ink_lang::DispatchMode::Call,\n        ),\n    )\n    .to_u32()\n}\npub fn deny_payment<E>() -> Result<()>\nwhere\n    E: Environment,\n{\n    let transferred = ink_env::transferred_balance::<E>()\n        .expect("encountered error while querying transferred balance");\n    if transferred != <E as Environment>::Balance::from(0u32) {\n        return Err(DispatchError::PaidUnpayableMessage)\n    }\n    Ok(())\n}\n')),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"ink!"),", the timing of ",(0,o.kt)("inlineCode",{parentName:"p"},"expect")," is different for ",(0,o.kt)("inlineCode",{parentName:"p"},"off_chain")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"on_chain"),". In ",(0,o.kt)("inlineCode",{parentName:"p"},"off_chain"),", it is because ",(0,o.kt)("inlineCode",{parentName:"p"},"ink_env::transferred_balance::<E>()")," cannot be decoded correctly. In ",(0,o.kt)("inlineCode",{parentName:"p"},"on_chain"),",",(0,o.kt)("inlineCode",{parentName:"p"},"deny_payment")," returns Error due to",(0,o.kt)("inlineCode",{parentName:"p"},"transferred!=0"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"expect")," appears in ",(0,o.kt)("inlineCode",{parentName:"p"},"call"),".It can be seen that the current ",(0,o.kt)("inlineCode",{parentName:"p"},"ink! "),"in ",(0,o.kt)("inlineCode",{parentName:"p"},"off_chain")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"on_chain")," is not exactly the same for some situations, causing debugging troubles."))}d.isMDXComponent=!0}}]);