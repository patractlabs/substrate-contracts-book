"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[8065],{3905:function(t,e,a){a.d(e,{Zo:function(){return l},kt:function(){return d}});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function c(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},o=Object.keys(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var s=r.createContext({}),p=function(t){var e=r.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):c(c({},e),t)),a},l=function(t){var e=p(t.components);return r.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,o=t.originalType,s=t.parentName,l=i(t,["components","mdxType","originalType","parentName"]),m=p(a),d=n,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return a?r.createElement(f,c(c({ref:e},l),{},{components:a})):r.createElement(f,c({ref:e},l))}));function d(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var o=a.length,c=new Array(o);c[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:n,c[1]=i;for(var p=2;p<o;p++)c[p]=a[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5296:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return l},default:function(){return m}});var r=a(7462),n=a(3366),o=(a(7294),a(3905)),c=["components"],i={},s="tutorial",p={unversionedId:"himalia/tutorial",id:"himalia/tutorial",isDocsHomePage:!1,title:"tutorial",description:"Himalia \u7528\u4e8e\u4e0e\u94fe\u7684\u5408\u7ea6\u90e8\u5206\u4ea4\u4e92\u7684sdk\uff0c\u9700\u8981\u9996\u5148\u542f\u52a8\u4e00\u4e2a\u8282\u70b9\u624d\u80fd\u8fdb\u884c\u540e\u7eed\u7684\u6267\u884c\u8fc7\u7a0b\u3002",source:"@site/docs/himalia/tutorial.md",sourceDirName:"himalia",slug:"/himalia/tutorial",permalink:"/substrate-contracts-book/himalia/tutorial",editUrl:"https://github.com/patractlabs/substrate-contracts-book/docs/himalia/tutorial.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Himalia",permalink:"/substrate-contracts-book/himalia/introduction"},next:{title:"go-patract",permalink:"/substrate-contracts-book/himalia/go-patract"}},l=[{value:"go",id:"go",children:[{value:"\u90e8\u7f72\u5408\u7ea6",id:"\u90e8\u7f72\u5408\u7ea6",children:[]},{value:"\u8c03\u7528\u5408\u7ea6",id:"\u8c03\u7528\u5408\u7ea6",children:[]}]},{value:"python",id:"python",children:[{value:"\u5b89\u88c5",id:"\u5b89\u88c5",children:[]},{value:"\u5feb\u901f\u4f7f\u7528",id:"\u5feb\u901f\u4f7f\u7528",children:[]}]}],u={toc:l};function m(t){var e=t.components,a=(0,n.Z)(t,c);return(0,o.kt)("wrapper",(0,r.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tutorial"},"tutorial"),(0,o.kt)("p",null,"Himalia \u7528\u4e8e\u4e0e\u94fe\u7684\u5408\u7ea6\u90e8\u5206\u4ea4\u4e92\u7684sdk\uff0c\u9700\u8981\u9996\u5148\u542f\u52a8\u4e00\u4e2a\u8282\u70b9\u624d\u80fd\u8fdb\u884c\u540e\u7eed\u7684\u6267\u884c\u8fc7\u7a0b\u3002"),(0,o.kt)("p",null,"\u5bf9\u4e8e\u6709",(0,o.kt)("inlineCode",{parentName:"p"},"pallet-contracts"),"\u529f\u80fd\u7684\u8282\u70b9\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528 Europa \u4f5c\u4e3a\u8282\u70b9\u7684\u66ff\u4ee3\u3002\u66f4\u591a\u7684\u4fe1\u606f\u8bf7\u53c2\u9605Europa\u7684",(0,o.kt)("a",{parentName:"p",href:"/substrate-contracts-book/europa/intro/overview"},"\u6587\u6863"),"\u3002"),(0,o.kt)("p",null,"Europa \u53ef\u4ee5\u4ee5\u4e00\u4e0b\u547d\u4ee4\u7b80\u5355\u5b89\u88c5\u4f7f\u7528\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git install --recurse-submodules https://github.com/patractlabs/europa.git --force --locked\neuropa --tmp\n")),(0,o.kt)("p",null,"\u53e6\u4e00\u65b9\u9762\u4e5f\u53ef\u4ee5\u4f7f\u7528 Patract \u7684\u6d4b\u8bd5\u7f51 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/jupiter"},"Jupiter"),"\uff0c\u6216\u8005 Parity \u63d0\u4f9b\u7684\u5408\u7ea6\u6d4b\u8bd5\u7f51 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/paritytech/canvas-node.git"},"Canvas-node")),(0,o.kt)("h2",{id:"go"},"go"),(0,o.kt)("p",null,"PatractGo \u4f9d\u8d56\u4e8e ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/centrifuge/go-substrate-rpc-client"},"GSRPC"),"\u3002Go \u7248\u672c\u7684 Himalia \u9879\u76ee\u53eb\u505a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/go-patract"},"go-patract")),(0,o.kt)("p",null,"\u5728\u5b89\u88c5\u4e86 PatractGo \u4e4b\u540e\uff0c\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u65b9\u5f0f\u5feb\u901f\u90e8\u7f72\uff0c\u8c03\u7528\u4e00\u4e2a\u5408\u7ea6\u3002\u5b8c\u6574\u6848\u4f8b\u8bf7\u53c2\u8003 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/go-patract/blob/master/contracts/erc20/transfer_test.go"},"transfer_test")),(0,o.kt)("h3",{id:"\u90e8\u7f72\u5408\u7ea6"},"\u90e8\u7f72\u5408\u7ea6"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// read the code wasm from file\ncodeBytes, err := ioutil.ReadFile("/path/to/contracts.wasm")\nif err != nil {\n    return err\n}\n// create the api\ncApi, err := rpc.NewContractAPI(env.URL())\n\n// read the abi(metadata) for contract\nmetaBz, err := ioutil.ReadFile("/path/to/contracts_metadata.json")\ncApi.WithMetaData(metaBz)\n\n// create context with from auth, like Alice\nctx := api.NewCtx(context.Background()).WithFrom(authKey)\n\n// put code\n_, err = cApi.Native().PutCode(ctx, codeBytes)\n\ncodeHash := readCodeHash() // get code hash\n\nvar codeBz []byte\n\nif err := cApi.Native().Cli.GetStorageLatest(&codeBz,\n    "Contracts", "PristineCode",\n    []byte(codeHash), nil); err != nil {\n        return err\n    }\n\n    var endowment uint64 = 1000000000000\n\n// Instantiate\n_, contractAccount, err := cApi.Instantiate(ctx,\n    types.NewCompactBalance(endowment),\n    types.NewCompactGas(test.DefaultGas),\n    contracts.CodeHashERC20,\n    types.NewU128(totalSupply),\n)    \n')),(0,o.kt)("h3",{id:"\u8c03\u7528\u5408\u7ea6"},"\u8c03\u7528\u5408\u7ea6"),(0,o.kt)("h4",{id:"rpc-call"},"rpc call"),(0,o.kt)("p",null,"\u8c03\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"total_supply")," \u83b7\u53d6\u5f53\u524d\u7684\u603b\u5171\u4f9b\u5e94\u91cf\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var res types.U128\n\nerr := a.CallToRead(ctx,\n    &res,\n    a.ContractAccountID,\n    []string{"total_supply"},\n)\n')),(0,o.kt)("h4",{id:"\u4ea4\u6613\u8c03\u7528"},"\u4ea4\u6613\u8c03\u7528"),(0,o.kt)("p",null,"\u8c03\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"transfer")," \u8f6c\u79fb\u4e00\u7b14\u8d44\u91d1\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'toParam := struct {\n    Address AccountID\n}{\n    Address: to,\n}\n\nvalueParam := struct {\n    Value U128\n}{\n    Value: amt,\n}\n\nreturn a.CallToExec(ctx,\n    a.ContractAccountID,\n    types.NewCompactBalance(0),\n    types.NewCompactGas(test.DefaultGas),\n    []string{"transfer"},\n    toParam, valueParam,\n)\n')),(0,o.kt)("h2",{id:"python"},"python"),(0,o.kt)("p",null,"PatractPy \u4f9d\u8d56\u4e8e ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/polkascan/py-substrate-interface"},"py-substrate-interface"),"Python \u7248\u672c\u7684 Himalia \u9879\u76ee\u53eb\u505a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/py-patract"},"py-patract")),(0,o.kt)("h3",{id:"\u5b89\u88c5"},"\u5b89\u88c5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install -U patract-interface \n")),(0,o.kt)("p",null,"\u5728 python \u811a\u672c\u4e2d\u5373\u53ef\u4f7f\u7528"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"from patractinterface import ContractFactory, ContractAPI\n\n// ... So something ...\n")),(0,o.kt)("h3",{id:"\u5feb\u901f\u4f7f\u7528"},"\u5feb\u901f\u4f7f\u7528"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os\nfrom substrateinterface import SubstrateInterface, Keypair\nfrom patractinterface.contract import ContractAPI, ContractFactory\nfrom patractinterface.observer import ContractObserver\n\ndef main():\n    # use [europa](https://github.com/patractlabs/europa) as test node endpoint, notice `type_registry` should set correctly.\n    substrate=SubstrateInterface(url='ws://127.0.0.1:9944', type_registry_preset=\"default\", type_registry={'types': {'LookupSource': 'MultiAddress'}})\n    # load deployer key\n    alice = Keypair.create_from_uri('//Alice')\n    bob = Keypair.create_from_uri('//Bob')\n    # 1. load a contract from Wasm file and metadata.json file (Those files is complied by [ink!](https://github.com/paritytech/ink))\n    # in this example, we use `ink/example/erc20` contract as example.\n    contract = ContractFactory.create_from_file(\n            substrate=substrate, # should provide a subtrate endpoint\n            code_file= os.path.join(os.path.dirname(__file__), 'res', 'erc20.wasm'),\n            metadata_file= os.path.join(os.path.dirname(__file__), 'res', 'erc20.json')\n        )\n    # upload code to chain directly\n    res = contract.put_code(alice)\n    print(\"update code hash{} res:{}\".format(contract.code_hash.hex(), res.is_succes))\n    # 2. instantiate the uploaded code as a contract instance\n    erc20_ins = contract.new(alice, 1000000 * (10 ** 15), endowment=2*10**10, gas_limit=20000000000, deployment_salt=\"0x12\")\n    # 2.1 create a observer to listen event\n    observer = ContractObserver(erc20_ins.contract_address, erc20_ins.metadata, substrate)\n    # 3. send a transfer call for this contract\n    res = erc20_ins.transfer(alice, bob.ss58_address, 100000, gas_limit=20000000000)\n    print('transfer res', res.is_succes)\n\n    def on_transfer(num, evt):\n        print(\"on_transfer in {} : {} {} {}\".format(num, evt['from'], evt['to'], evt['value']))\n\n    def on_approval(num, evt):\n        print(\"on_approval in {} : {} {} {}\".format(num, evt['owner'], evt['spender'], evt['value']))\n    # 4 set event callback \n    observer.scanEvents(handlers={\n        'Transfer': on_transfer,\n        'Approve': on_approval\n    })\n\nif __name__ == \"__main__\":\n    main()\n    pass\n")))}m.isMDXComponent=!0}}]);