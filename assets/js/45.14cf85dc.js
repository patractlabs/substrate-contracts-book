(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{560:function(t,a,s){"use strict";s.r(a);var n=s(6),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("p",[t._v("Ask! 提供了 "),s("code",[t._v("ask-lang")]),t._v(" 包，它包含了合约常用存储类型的实现，智能合约底层原语的封装等。")]),t._v(" "),s("h2",{attrs:{id:"存储-storage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储-storage"}},[t._v("#")]),t._v(" 存储 Storage")]),t._v(" "),s("h3",{attrs:{id:"内置存储类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置存储类型"}},[t._v("#")]),t._v(" 内置存储类型")]),t._v(" "),s("p",[t._v("Ask! 为 AS 的基本类型和标准库集合提供了支持 Scale 编码和存储的版本，\n包括 bool/i{8, 16, 32, 64, 128}/u{8, 16, 32, 64, 128}/string(String)/Array/Set/Map，\n对应于 Bool/Int{8, 16, 32, 64, 128}/u{8, 16, 32, 64, 128}/ScaleString/ScaleArray/ScaleSet/ScaleMap。")]),t._v(" "),s("p",[t._v("当在合约代码相关位置使用了上述提到的基本类型（但不包括 Array/Set/Map 等容器类型），Ask！会在编译期自动转换为对应的 Scale 类型（即自动装箱/拆箱）。")]),t._v(" "),s("p",[t._v("可以通过"),s("code",[t._v("ask-lang")]),t._v("导入：")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Bool "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ask-lang'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"定义存储类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义存储类型"}},[t._v("#")]),t._v(" 定义存储类型")]),t._v(" "),s("p",[t._v("Ask! 提供 "),s("code",[t._v("@storage")]),t._v(" 来装饰类为存储类型:")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[t._v("@storage\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Storage")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Store a bool")]),t._v("\n    b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Store a number")]),t._v("\n    n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" i32"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("存储类型里的字段需要支持"),s("a",{attrs:{href:"https://github.com/paritytech/parity-scale-codec",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Scale")]),t._v("编码"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"初始化存储类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化存储类型"}},[t._v("#")]),t._v(" 初始化存储类型")]),t._v(" "),s("p",[t._v("我们可以在合约初始化构造函数里初始化存储值，合约类必须至少提供一个"),s("code",[t._v("@constructor")]),t._v("修饰的初始化函数。下面是一个示例：")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[t._v("@contract\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyContract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" i32"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constructor")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" i32"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("注意： 默认构造函数/"),s("code",[t._v("@constructor")]),t._v("必须是 public 的，否则会出现编译错误。 合约函数的参数和返回值必须是基本类型或者实现Codec编码的类型。")]),t._v(" "),s("h3",{attrs:{id:"读取存储值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读取存储值"}},[t._v("#")]),t._v(" 读取存储值")]),t._v(" "),s("p",[t._v("从之前的代码里可以看出来，Ask! 的存储和合约是可以分开声明的，我们也建议用户分开声明。合约类里声明的函数是真正对外的合约 API，而存储只是实现细节。")]),t._v(" "),s("h3",{attrs:{id:"修改存储值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改存储值"}},[t._v("#")]),t._v(" 修改存储值")]),t._v(" "),s("p",[t._v("Ask! 为"),s("code",[t._v("@message")]),t._v("方法提供了"),s("code",[t._v("mutates")]),t._v("属性，默认为"),s("code",[t._v("true")]),t._v("。当设置为"),s("code",[t._v("false")]),t._v("时，该方法会在运行时拒绝修改存储值。")]),t._v(" "),s("h3",{attrs:{id:"events"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),s("p",[t._v("智能合约可以定义在合约执行期间可以发出的事件，第三方工具可以使用发出事件来查询有关合约执行和状态的信息。Event 的字段必须实现"),s("code",[t._v("Codec")]),t._v("接口，它们会作为 event data 被收集起来，而 "),s("code",[t._v("@topic")]),t._v(" 装饰的字段还会作为事件的索引。")]),t._v(" "),s("h3",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[t._v("@event\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Transfer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @topic\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" AccountId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  @topic\n  to"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" AccountId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" u128"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" AccountId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" to"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" AccountId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" u128"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("当实例化"),s("code",[t._v("@event")]),t._v("类时，内部会自动调用"),s("code",[t._v("deposit_event")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"跨合约调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨合约调用"}},[t._v("#")]),t._v(" 跨合约调用")]),t._v(" "),s("h3",{attrs:{id:"链环境函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链环境函数"}},[t._v("#")]),t._v(" 链环境函数")])])}),[],!1,null,null,null);a.default=e.exports}}]);