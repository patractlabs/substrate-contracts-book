"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[9473],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,k=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(k,o(o({ref:t},p),{},{components:n})):r.createElement(k,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2472:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={},c="tutorial",s={unversionedId:"zkmega/tutorial",id:"zkmega/tutorial",isDocsHomePage:!1,title:"tutorial",description:"The chain based on Substrate introduces \u3000zkMega's zero-knowledge primitives",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/zkmega/tutorial.md",sourceDirName:"zkmega",slug:"/zkmega/tutorial",permalink:"/substrate-contracts-book/en/zkmega/tutorial",editUrl:"https://github.com/patractlabs/substrate-contracts-book/edit/master/docs/zkmega/tutorial.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"zkMega",permalink:"/substrate-contracts-book/en/zkmega/introduction"},next:{title:"Contract",permalink:"/substrate-contracts-book/en/zkmega/contract"}},p=[{value:"The chain based on Substrate introduces \u3000zkMega&#39;s zero-knowledge primitives",id:"the-chain-based-on-substrate-introduces--zkmegas-zero-knowledge-primitives",children:[]},{value:"The interface for calling zkMega&#39;s zero-knowledge primitives in the contract",id:"the-interface-for-calling-zkmegas-zero-knowledge-primitives-in-the-contract",children:[]}],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tutorial"},"tutorial"),(0,i.kt)("h2",{id:"the-chain-based-on-substrate-introduces--zkmegas-zero-knowledge-primitives"},"The chain based on Substrate introduces \u3000zkMega's zero-knowledge primitives"),(0,i.kt)("p",null,"The chain integration zkMega with ",(0,i.kt)("inlineCode",{parentName:"p"},"pallet-contracts")," can refer to Jupiter's integration method: ","[https://github.com/patractlabs/jupiter/blob/master/primitives/chain-extension/src/lib.rs]","(https:/ /github.com/patractlabs/jupiter/blob/master/primitives/chain-extension/src/lib.rs)"),(0,i.kt)("p",null,"The main steps are mainly divided into the following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Design a structure implemented in ",(0,i.kt)("inlineCode",{parentName:"p"},"ChainExtension"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Determine the range of ",(0,i.kt)("inlineCode",{parentName:"p"},"func_id")," in the implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"call")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"ChainExtension"),", according to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/PIPs/blob/main/PIPs/pip-101.md"},"PIP-101"),", the current range required to use zkMega is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x01000000..=0x010000ff"),". Therefore, it can be introduced in the implementation:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"match func_id {\n        // 0x01000000-0x010000ff Patract ZKP Support\n        0x01000000..=0x010000ff => {\n\n        }\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Then introduce the gas billing method in the code block of ",(0,i.kt)("inlineCode",{parentName:"p"},"0x01000000..=0x010000ff"),". Different chains may design different billing methods for the methods called by zkMega. In Jupiter's case, only the simplest way to design a fixed consumption of gas:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let simple_weight = match func_id & 0x01 {\n        0 => 100_000,   // add, In ethereum: 500\n        1 => 8_000_000, // 80x then add, In ethereum: 40000\n        2 => {/* ...*/ }\n        _ => return Err(DispatchError::Other("Unimplemented Patract ZKP func_id"));\n    };\nenv.charge_weight(simple_weight)?;\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Implement different implementations according to whether the chain itself needs Native call or Wasm call:"),(0,i.kt)("p",{parentName:"li"},"For example, if the chain only wants to support Wasm calls, use the following method:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"zkmega_arkworks::call(&func_id, &input);\n")),(0,i.kt)("p",{parentName:"li"},"If the chain wants to execute the call on Native, it can be similar to Jupiter, design ",(0,i.kt)("inlineCode",{parentName:"p"},"runtime_inferface")," to wrap the call of ",(0,i.kt)("inlineCode",{parentName:"p"},"zkmega_arkworks::call"),", and put the call process under std to compile. Then call the method exported by ",(0,i.kt)("inlineCode",{parentName:"p"},"runtime_interface")," in the implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"ChainExtensions"),"."))),(0,i.kt)("h2",{id:"the-interface-for-calling-zkmegas-zero-knowledge-primitives-in-the-contract"},"The interface for calling zkMega's zero-knowledge primitives in the contract"),(0,i.kt)("p",null,"It is relatively simple to use zkMega in the contract. First introduce ",(0,i.kt)("inlineCode",{parentName:"p"},"megaclite-arkworks")," in contract dependencies"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nmegaclite-arkworks = { git = "https://github.com/patractlabs/zkmega", features = [ "ink" ], default-features = false }\n')),(0,i.kt)("p",null,"Please note that you need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ink")," feature when importing the zkMega library."),(0,i.kt)("p",null,"Then you can use the methods provided by zkMega in the contract:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"megaclite_arkworks::verify(...);\n")),(0,i.kt)("p",null,"If it is a relatively low-level call, you can call it directly through ",(0,i.kt)("inlineCode",{parentName:"p"},"call"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let func_id = /*id defined in PIP-101*/\nmegaclite_arkworks::verify(func_id, ...);\n")))}m.isMDXComponent=!0}}]);