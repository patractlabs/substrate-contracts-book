"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[1686],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var i=r.createContext({}),u=function(t){var e=r.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},l=function(t){var e=u(t.components);return r.createElement(i.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,i=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),p=u(n),f=a,m=p["".concat(i,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(m,c(c({ref:e},l),{},{components:n})):r.createElement(m,c({ref:e},l))}));function f(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,c=new Array(o);c[0]=p;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:a,c[1]=s;for(var u=2;u<o;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},94:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return l},default:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),c=["components"],s={},i="Cross Contract Calling",u={unversionedId:"ask/guides/cross-contract",id:"ask/guides/cross-contract",isDocsHomePage:!1,title:"Cross Contract Calling",description:"Assume that the following contract A already exists on the chain.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/ask/guides/cross-contract.md",sourceDirName:"ask/guides",slug:"/ask/guides/cross-contract",permalink:"/substrate-contracts-book/en/ask/guides/cross-contract",editUrl:"https://github.com/patractlabs/substrate-contracts-book/edit/master/docs/ask/guides/cross-contract.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Composite Types and Storage",permalink:"/substrate-contracts-book/en/ask/guides/types-storage/storage"},next:{title:"Mechanism",permalink:"/substrate-contracts-book/en/ask/guides/mechanism"}},l=[],d={toc:l};function p(t){var e=t.components,n=(0,a.Z)(t,c);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cross-contract-calling"},"Cross Contract Calling"),(0,o.kt)("p",null,"Assume that the following contract A already exists on the chain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@contract\nclass Libadd {\n  constructor() {}\n\n  @constructor\n  default(): void {}\n\n  @message(mutates = false)\n  add(a: i32, b: i32): i32 {\n    return a + b;\n  }\n}\n")),(0,o.kt)("p",null,"If you want to call the contract in contract B, you can declare a @dynamic class to describe its interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@dynamic\nexport class Libadd {\n  // Note that the method experience here will be covered by the actual code, this writing is mainly for compiling\n  add(a: i32, b: i32): i32 {\n    return 0;\n  }\n}\n\n@contract\nclass LibaddCaller {\n  constructor() {}\n\n  @constructor\n  default(): void {}\n\n  @message(mutates = false)\n  callAddFromExternal(outAddress: AccountId, a: i32, b: i32): i32 {\n    let outContract = new Libadd(outAddress);\n    let val = outContract.add(a, b);\n    return val;\n  }\n}\n")),(0,o.kt)("p",null,"outAddress here is the instance address of contract Libadd."),(0,o.kt)("p",null,"This function can also call contracts written in other smart contract languages, such as ink!, as long as it follows the compatible metadata.json specification."))}p.isMDXComponent=!0}}]);