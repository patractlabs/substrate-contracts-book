"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[8320],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=p(n),m=a,d=f["".concat(l,".").concat(m)]||f[m]||u[m]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9322:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return f}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},l="ERC165",p={unversionedId:"metis/guides/tools/erc165",id:"metis/guides/tools/erc165",isDocsHomePage:!1,title:"ERC165",description:"Component help Contract to creates a standard method to publish and detect what interfaces a smart contract implements.",source:"@site/docs/metis/guides/tools/erc165.md",sourceDirName:"metis/guides/tools",slug:"/metis/guides/tools/erc165",permalink:"/substrate-contracts-book/metis/guides/tools/erc165",editUrl:"https://github.com/patractlabs/substrate-contracts-book/docs/metis/guides/tools/erc165.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ERC1155",permalink:"/substrate-contracts-book/metis/guides/tokens/erc1155"},next:{title:"Escrow",permalink:"/substrate-contracts-book/metis/guides/utilities/escrow"}},c=[{value:"Dependency",id:"dependency",children:[]},{value:"Usage Example",id:"usage-example",children:[]}],u={toc:c};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"erc165"},"ERC165"),(0,o.kt)("p",null,"Component help Contract to creates a standard method to publish and detect what interfaces a smart contract implements."),(0,o.kt)("p",null,"The details of the ERC165 can see ",(0,o.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-165"},"ERC165"),"."),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"ink!"),", the message interface id is same to EVM, so we make a marco to help develop to impl the erc165."),(0,o.kt)("h2",{id:"dependency"},"Dependency"),(0,o.kt)("p",null,"no additional dependency other than ",(0,o.kt)("inlineCode",{parentName:"p"},"metis_lang")),(0,o.kt)("h2",{id:"usage-example"},"Usage Example"),(0,o.kt)("p",null,"For example, a contract looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    impl Flipper {\n        /// Creates a new flipper smart contract initialized with the given value.\n        #[ink(constructor)]\n        pub fn new(init_value: bool) -> Self {\n            Self { value: init_value }\n        }\n\n        /// Creates a new flipper smart contract initialized to `false`.\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self::new(Default::default())\n        }\n\n        /// Flips the current value of the Flipper's bool.\n        #[ink(message)]\n        pub fn flip(&mut self) {\n            // logics\n        }\n\n        /// Flips set the current value\n        #[ink(message)]\n        pub fn set(&mut self, value: bool) {\n            // logics\n        }\n\n        /// Returns the current value of the Flipper's bool.\n        #[ink(message)]\n        pub fn get(&self) -> bool {\n            // logics\n        }\n    }\n")),(0,o.kt)("p",null,"We can define a interface contains ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"set")," message, so the ",(0,o.kt)("inlineCode",{parentName:"p"},"supports_interface")," should be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"        impl Flipper {\n            fn supports_interface(&self, interface_id: u32) -> bool {\n                match interface_id {\n                    0x633aa551_u32 ^ 0x2f865bd9_u32 => true, // get and set\n                    0xe6113a8a_u32 => true, // supports_interface\n                    _ => false,\n                }\n            }\n        }\n")),(0,o.kt)("p",null,"Note if impl ",(0,o.kt)("inlineCode",{parentName:"p"},"supports_interface")," then also support the interface of erc165 self, so the ",(0,o.kt)("inlineCode",{parentName:"p"},"0xe6113a8a_u32")," should also true."),(0,o.kt)("p",null,"The erc165 marco help us to impl the ",(0,o.kt)("inlineCode",{parentName:"p"},"supports_interface")," message:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    #[metis::supports(interface(new, default), interface(flip, get))]\n    impl Flipper {\n        /// Return the contract is support the interface_id\n        #[ink(message)]\n        pub fn supports_interface(&self, interface_id: u32) -> bool {\n            // _supports_interface gen by marco\n            self._supports_interface(interface_id)\n        }\n    }\n")),(0,o.kt)("p",null,"The code above is equivalent to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    impl Flipper {\n        fn _supports_interface(&self, interface_id: u32) -> bool {\n            const INIT_INTERFACE_ID: u32 = 0x9bae9d5e_u32 ^ 0xed4b9d1b_u32;\n            const FLIP_INTERFACE_ID: u32 = 0x633aa551_u32 ^ 0x2f865bd9_u32;\n\n            match interface_id {\n                INIT_INTERFACE_ID => true, // new and default\n                FLIP_INTERFACE_ID => true, // flip get\n                0xe6113a8a_u32 => true, // supports_interface\n                _ => false,\n            }\n        }\n\n        /// Return the contract is support the interface_id\n        #[ink(message)]\n        pub fn supports_interface(&self, interface_id: u32) -> bool {\n            self._supports_interface(interface_id)\n        }\n    }\n")),(0,o.kt)("p",null,"The marco will not make ",(0,o.kt)("inlineCode",{parentName:"p"},"supports_interface")," but a generic ",(0,o.kt)("inlineCode",{parentName:"p"},"_supports_interface")," for developer to impl ",(0,o.kt)("inlineCode",{parentName:"p"},"supports_interface"),"."),(0,o.kt)("p",null,"The marco looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    #[metis::supports(interface(new, default), interface(flip, get))]\n    impl Flipper {}\n")),(0,o.kt)("p",null,"For a contract, it will support multi interfaces, so there is a array of interfaces, which contains the required message name."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: if use marco, the contract will support the ",(0,o.kt)("inlineCode",{parentName:"p"},"supports_interface")," interface(0xe6113a8a_u32) auto.")))}f.isMDXComponent=!0}}]);