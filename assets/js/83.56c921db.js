(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{605:function(t,a,s){"use strict";s.r(a);var e=s(6),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"redspot-patract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redspot-patract"}},[t._v("#")]),t._v(" @redspot/patract")]),t._v(" "),s("p",[t._v("This plugin extends the Redspot runtime environment and adds the patract attribute, which allows you to access patract instances like this.")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" patract "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redspot'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The type definition of patract is as follows.")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Patract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Contract"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Contract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  ContractFactory"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ContractFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * Generating Contract Instance from Contract Addresses\n   *\n   * @param contractName Contract name\n   * @param address contract address\n   * @param signer The account used to sign, or the first account in the user configured if it is undefined.\n   * @returns Contract Instance\n   */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getContractAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    contractName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    address"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" AccountId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    signer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Signer\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Contract"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * Return the contract factory\n   *\n   * @param contractName Contract name\n   * @param signer The account used to sign, or the first account in the user configured if it is undefined.\n   * @returns Contract Factory Instance\n   */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getContractFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    contractName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    signer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Signer\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ContractFactory"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * Generate a random account and transfer token to it\n   *\n   * @param from This account will be transferred to the new account\n   * @param amount The amount transferred to the new account\n   * @returns New Account\n   */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRandomSigner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Signer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    amount"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" BigInt\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Signer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"getrandomsigner-from-amount-promise-signer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getrandomsigner-from-amount-promise-signer"}},[t._v("#")]),t._v(" "),s("code",[t._v("getRandomSigner(from, amount): Promise<Signer>")])]),t._v(" "),s("p",[t._v("getRandomSigner is a utility function that creates a random signer to be generated and passes some initial amount to it from from.")]),t._v(" "),s("h3",{attrs:{id:"getcontractfactory-contractname-signer-promise-contractfactory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getcontractfactory-contractname-signer-promise-contractfactory"}},[t._v("#")]),t._v(" "),s("code",[t._v("getContractFactory(contractName, signer?): Promise<ContractFactory>")])]),t._v(" "),s("p",[t._v("This function will create an instance of contractFactory with the contract name and signer.")]),t._v(" "),s("p",[t._v("Note that the contract must have been compiled successfully. You can find the metadata file for this in artifacts.")]),t._v(" "),s("h3",{attrs:{id:"getcontractat-contractname-address-signer-promise-contract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getcontractat-contractname-address-signer-promise-contract"}},[t._v("#")]),t._v(" "),s("code",[t._v("getContractAt(contractName, address, signer): Promise<Contract>")])]),t._v(" "),s("p",[t._v("Creates a Contract instance with a contract name, contract address and signer.")]),t._v(" "),s("p",[t._v("Note that the contract must have been compiled successfully. You can find the metadata file for it in artifacts.")]),t._v(" "),s("h2",{attrs:{id:"contractfactory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contractfactory"}},[t._v("#")]),t._v(" ContractFactory")]),t._v(" "),s("p",[t._v("The ContractFactory is mainly used for contract deployment.")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" patract "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redspot'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" getContractFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" getRandomSigner "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" patract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" signers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSigners")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contractFactory "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getContractFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'erc20'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" signers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" contractFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deploy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'new'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1000'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"new-contractfactory-address-contractmetadata-api-signer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new-contractfactory-address-contractmetadata-api-signer"}},[t._v("#")]),t._v(" "),s("code",[t._v("new ContractFactory(address, contractMetadata, api, signer)")])]),t._v(" "),s("p",[t._v("Create a contractFactory instance with contract address, metadata, api and signer.")]),t._v(" "),s("h3",{attrs:{id:"contractfactory-deploy-constructororid-args-overrides-promise-contract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contractfactory-deploy-constructororid-args-overrides-promise-contract"}},[t._v("#")]),t._v(" "),s("code",[t._v("contractFactory.deploy(constructorOrId, . . args[ , overrides ]): Promise<Contract>")])]),t._v(" "),s("p",[t._v("constructorOrId is the name of the contructor of the contract to be called. Note that for some contracts that use "),s("code",[t._v("trait")]),t._v(", the name of the contructor should be something like this.")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" contractFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deploy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baseErc20,new'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1000'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("args is the list of arguments you need to pass to the contructor you are using.")]),t._v(" "),s("p",[t._v("overrides are optional and can be used to specify gasLimit, value, signer, salt, etc.")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" contractFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deploy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baseErc20,new'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1000'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  gaslimit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10000000000000000000000'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  salt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jkqwezlkwklqreqw'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  signer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" signers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'32133210000000000000000000000'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("gasLimit is the maximum gas value that can be used for this transaction.")]),t._v(" "),s("p",[t._v("salt is used to generate the address of the contract. The same contract address will be generated if the deployer, deployment parameters and salt are the same.")]),t._v(" "),s("p",[t._v("signer When creating a contractFactory, there is a signer parameter that is used for the default transaction signature. The signer item can override the default signature account.")]),t._v(" "),s("p",[t._v("value is the amount to be passed to the contract to be created.")]),t._v(" "),s("p",[t._v("Note that "),s("code",[t._v("@redspot/patract")]),t._v(" will not handle numeric amount precision and needs to be handled by the user.")]),t._v(" "),s("h3",{attrs:{id:"contractfactory-deployed-constructororid-args-overrides-promise-contract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contractfactory-deployed-constructororid-args-overrides-promise-contract"}},[t._v("#")]),t._v(" "),s("code",[t._v("contractFactory.deployed(constructorOrId, . .args[ , overrides ]): Promise<Contract>")])]),t._v(" "),s("p",[t._v("This method is similar to "),s("code",[t._v("contractFactory.deploy")]),t._v(", the only difference is that "),s("code",[t._v("deployed")]),t._v(" checks in advance if the contract address to be generated exists, and if it does, does not try to deploy it, but instead creates a "),s("code",[t._v("Contract")]),t._v(" instance directly using that contract address.")]),t._v(" "),s("h3",{attrs:{id:"contractfactory-instantiate-constructororid-args-overrides-promise-contractaddress"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contractfactory-instantiate-constructororid-args-overrides-promise-contractaddress"}},[t._v("#")]),t._v(" "),s("code",[t._v("contractFactory.instantiate(constructorOrId, . .args[ , overrides ]): Promise<ContractAddress>")])]),t._v(" "),s("p",[t._v("If wasm has been uploaded to the chain, you can call "),s("code",[t._v("contractFactory.instantiate")]),t._v(" directly to instantiate the contract. It takes the same arguments as "),s("code",[t._v("deploy")]),t._v(", but returns the contract address.")]),t._v(" "),s("h3",{attrs:{id:"contractfactory-instantiate-constructororid-args-overrides-promise-contractaddress-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contractfactory-instantiate-constructororid-args-overrides-promise-contractaddress-2"}},[t._v("#")]),t._v(" "),s("code",[t._v("contractFactory.instantiate(constructorOrId, . .args[ , overrides ]): Promise<ContractAddress>")])]),t._v(" "),s("p",[t._v("If wasm has been uploaded to the chain, you can call "),s("code",[t._v("contractFactory.instantiate")]),t._v(" directly to instantiate the contract. It takes the same arguments as "),s("code",[t._v("deploy")]),t._v(", but returns the contract address.")]),t._v(" "),s("h3",{attrs:{id:"contractfactory-attach-address-contract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contractfactory-attach-address-contract"}},[t._v("#")]),t._v(" "),s("code",[t._v("contractFactory.attach(address):Contract")])]),t._v(" "),s("p",[t._v("Generates a "),s("code",[t._v("Contract")]),t._v(" instance using the specified contract address")]),t._v(" "),s("h3",{attrs:{id:"contractfactory-connect-signer-contractfactory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contractfactory-connect-signer-contractfactory"}},[t._v("#")]),t._v(" "),s("code",[t._v("contractFactory.connect(signer): ContractFactory")])]),t._v(" "),s("p",[t._v("Create a new contractFactory instance with the specified signer")]),t._v(" "),s("h2",{attrs:{id:"contract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contract"}},[t._v("#")]),t._v(" Contract")]),t._v(" "),s("h3",{attrs:{id:"new-contract-address-contractmetadata-api-signer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new-contract-address-contractmetadata-api-signer"}},[t._v("#")]),t._v(" "),s("code",[t._v("new Contract(address, contractMetadata, api, signer)")])]),t._v(" "),s("p",[t._v("Creates a contractFactory instance with the contract address, contractMetadata, api and signer.")]),t._v(" "),s("h3",{attrs:{id:"contract-query-messagename-args-overrides"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contract-query-messagename-args-overrides"}},[t._v("#")]),t._v(" "),s("code",[t._v("contract.query.MessageName(. .args[, overrides])")])]),t._v(" "),s("p",[t._v("Similar to in polkadotjs, contract.query[MessageName] can call "),s("code",[t._v("contracts.call")]),t._v(" rpc. For example, in the erc20 contract, to get the account balance.")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" contract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("balanceOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someaddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The return value is of the following type.")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ContractCallOutcome")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  debugMessage"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  gasConsumed"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  output"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Codec "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ContractExecResultResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("It is the same as in polkadotjs api-contract.")]),t._v(" "),s("p",[t._v("overrides are optional and can be used to specify gasLimit, value, etc.")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" contract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("balanceOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baseErc20,new'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1000'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tgasLimit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1231231231231233123123'")]),t._v("\n  value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'32133210000000000000000000000'")]),t._v("\n  signer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" signers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("gasLimit value refers to the gasLimit and value in the "),s("code",[t._v("contracts.call")]),t._v(" rpc. signer can specify the origin address of "),s("code",[t._v("contracts.call")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"contract-estimategas-messagename-args-overrides"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contract-estimategas-messagename-args-overrides"}},[t._v("#")]),t._v(" "),s("code",[t._v("contract.estimateGas.MessageName(.. . args[, overrides])")])]),t._v(" "),s("p",[t._v("This function is similar to "),s("code",[t._v("contract.query.MessageName")]),t._v(", but the return value is the estimated gas to be consumed")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" contract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("estimateGas"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("balanceOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someaddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BN(232130000000)")]),t._v("\n")])])]),s("h3",{attrs:{id:"contract-tx-messagename-args-overrides"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contract-tx-messagename-args-overrides"}},[t._v("#")]),t._v(" "),s("code",[t._v("contract.tx.MessageName(. .args[,overrides])")])]),t._v(" "),s("p",[t._v("With "),s("code",[t._v("contract.tx.MessageName")]),t._v(" you can execute the contract's transactions. For example.")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" contract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("transfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Unlike polkadotjs, this function returns a promise that will wait until the transaction is up, or until an error occurs before it is resolved.")]),t._v(" "),s("p",[t._v("The return value type is as follows.")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionResponse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  txHash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  blockHash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  error"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    message"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" SubmittableResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  events"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DecodedEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DecodedEvent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  args"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Codec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  event"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" AbiEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("You can get the events of the parsed contract directly via "),s("code",[t._v("result.events")]),t._v(". If the execution goes wrong, you can get the error message via "),s("code",[t._v("result.error.message")]),t._v(".")]),t._v(" "),s("p",[t._v("overrides are optional and can be used to specify gasLimit, value, signer, etc.")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" contract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("transfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  gasLimit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1231231231231233123123'")]),t._v("\n  value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'32133210000000000000000000000'")]),t._v("\n  signer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" signers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("gasLimit refers to the maximum value of gas that can be used for this transaction.")]),t._v(" "),s("p",[t._v("value refers to the amount to be passed to the contract to be created.")]),t._v(" "),s("p",[t._v("signer is used to override the default signer.")]),t._v(" "),s("h3",{attrs:{id:"contract-attach-address-contract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contract-attach-address-contract"}},[t._v("#")]),t._v(" "),s("code",[t._v("contract.attach(address): Contract")])]),t._v(" "),s("p",[t._v("Generates a "),s("code",[t._v("Contract")]),t._v(" instance using the specified contract address")]),t._v(" "),s("h3",{attrs:{id:"contract-connect-signer-contractfactory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contract-connect-signer-contractfactory"}},[t._v("#")]),t._v(" "),s("code",[t._v("contract.connect(signer): contractFactory")])]),t._v(" "),s("p",[t._v("Create a new contract instance with the specified signer")])])}),[],!1,null,null,null);a.default=r.exports}}]);