"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[2692],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(g,c(c({ref:t},l),{},{components:n})):r.createElement(g,c({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var p=2;p<a;p++)c[p]=n[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6319:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return l},default:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),c=["components"],i={},s="Integrate into an existing contract project",p={unversionedId:"redspot/intro/integrate",id:"redspot/intro/integrate",isDocsHomePage:!1,title:"Integrate into an existing contract project",description:"Redspot can be easily integrated into existing contract projects. We can use cargo contract to initiate an ink! contract and wraps it with Redspot.",source:"@site/docs/redspot/intro/integrate.md",sourceDirName:"redspot/intro",slug:"/redspot/intro/integrate",permalink:"/substrate-contracts-book/redspot/intro/integrate",editUrl:"https://github.com/patractlabs/substrate-contracts-book/docs/redspot/intro/integrate.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Quick Start",permalink:"/substrate-contracts-book/redspot/intro/quick-start"},next:{title:"Tasks",permalink:"/substrate-contracts-book/redspot/guides/tasks"}},l=[{value:"Setup your project",id:"setup-your-project",children:[]},{value:"Write configs",id:"write-configs",children:[]},{value:"Install npm dependencies.",id:"install-npm-dependencies",children:[]},{value:"Compile your project",id:"compile-your-project",children:[]},{value:"Deploy contract",id:"deploy-contract",children:[{value:"Write deploy script",id:"write-deploy-script",children:[]},{value:"config test blockchain node",id:"config-test-blockchain-node",children:[]},{value:"run compile",id:"run-compile",children:[]}]},{value:"Test contract",id:"test-contract",children:[]}],d={toc:l};function u(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"integrate-into-an-existing-contract-project"},"Integrate into an existing contract project"),(0,a.kt)("p",null,"Redspot can be easily integrated into existing contract projects. We can use ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo contract")," to initiate an ink! contract and wraps it with Redspot. "),(0,a.kt)("h2",{id:"setup-your-project"},"Setup your project"),(0,a.kt)("p",null,"First, create a new directory"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir redspot-tutorial\ncd redspot-tutorial\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cargo contract new erc20\n")),(0,a.kt)("p",null,"This command will create a new project folder named ",(0,a.kt)("inlineCode",{parentName:"p"},"erc20")," with this content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"`erc20`\n  \u2514\u2500 lib.rs                <-- Contract Source Code\n  \u2514\u2500 Cargo.toml            <-- Rust Dependencies and ink! Configuration\n  \u2514\u2500 .gitignore\n")),(0,a.kt)("p",null,"Follow the ink official ",(0,a.kt)("a",{parentName:"p",href:"https://substrate.dev/substrate-contracts-workshop/#/2/create-erc20"},"instruction")," to complete writing contract. If you have already completed the tutorial, you can copy the contract source code ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/atenjin/redspot-ink-example2/tree/master/contracts/erc20"},"here")),(0,a.kt)("h2",{id:"write-configs"},"Write configs"),(0,a.kt)("p",null,"Create the following three files in the directory ",(0,a.kt)("inlineCode",{parentName:"p"},"redspot-tutorial")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"redspot.config.ts")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { RedspotUserConfig } from "redspot/types";\nimport "@redspot/patract";\nimport "@redspot/chai";\nimport "@redspot/gas-reporter";\nimport "@redspot/known-types";\nimport "@redspot/watcher";\nimport "@redspot/explorer";\nimport "@redspot/decimals";\n\nexport default {\ndefaultNetwork: "development",\ncontract: {\n  ink: {\n    docker: false,\n    toolchain: "nightly",\n    sources: ["contracts/**/*"],\n  },\n},\nnetworks: {\n  development: {\n    endpoint: "ws://127.0.0.1:9944",\n    gasLimit: "400000000000",\n    types: {},\n  },\n  jupiter: {\n    endpoint: "wss://jupiter-poa.elara.patract.io",\n    gasLimit: "400000000000",\n    accounts: ["//Alice"],\n    types: {},\n  },\n},\nmocha: {\n  timeout: 60000,\n},\ndocker: {\n  sudo: false,\n  runTestnet:\n    "docker run -p 9944:9944 --rm redspot/contract /bin/bash -c \'canvas --rpc-cors all --tmp --dev --ws-port=9944 --ws-external\'",\n},\n} as RedspotUserConfig;\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"package.json")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'  {\n    "name": "redspot-tutorial",\n    "version": "0.0.0",\n    "private": true,\n    "engines": {\n        "node": ">=14.x"\n    },\n    "resolutions": {\n        "@polkadot/api": "4.11.2",\n        "@polkadot/api-contract": "4.11.2",\n        "@polkadot/types": "4.11.2",\n        "@polkadot/util": "6.11.1",\n        "typescript": "4.2.4"\n    },\n    "dependencies": {\n        "@redspot/chai": "^0.11.4",\n        "@redspot/decimals": "^0.11.4",\n        "@redspot/explorer": "^0.11.8",\n        "@redspot/gas-reporter": "^0.11.4",\n        "@redspot/known-types": "^0.11.8",\n        "@redspot/patract": "^0.11.4",\n        "@redspot/watcher": "^0.11.4",\n        "@types/chai": "^4.2.14",\n        "@types/mocha": "^8.0.3",\n        "chai": "^4.2.0",\n        "redspot": "^0.11.4",\n        "ts-node": "^10.0.0",\n        "typescript": "^4.2.4"\n    },\n    "module": "true",\n    "scripts": {\n        "build": "npx redspot compile",\n        "test": "npx redspot test"\n    }\n  }\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"tsconfig.json"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'  {\n    "compilerOptions": {\n      "target": "es5",\n      "module": "commonjs",\n      "strict": true,\n      "esModuleInterop": true,\n      "outDir": "dist",\n      "noImplicitAny": false\n    },\n    "include": ["**/*.ts"],\n    "exclude": ["node_modules"],\n    "files": ["./redspot.config.ts"]\n  }\n')),(0,a.kt)("h2",{id:"install-npm-dependencies"},"Install npm dependencies."),(0,a.kt)("p",null,"It is recommended that you use ",(0,a.kt)("a",{parentName:"p",href:"https://classic.yarnpkg.com/en/docs/install"},"yarn")," as the package manager."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn or npm install\n")),(0,a.kt)("h2",{id:"compile-your-project"},"Compile your project"),(0,a.kt)("p",null,"Run the ",(0,a.kt)("inlineCode",{parentName:"p"},"npx redspot compile")," command in the root directory of the project to compile all contracts in the examples directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx redspot compile erc20\n")),(0,a.kt)("p",null,"This command will specify to compile the erc20 contract. After the compilation is complete, you can find the information generated by the compilation in the ",(0,a.kt)("inlineCode",{parentName:"p"},"artifacts")," directory."),(0,a.kt)("h2",{id:"deploy-contract"},"Deploy contract"),(0,a.kt)("p",null,"Now you can run a deployment script through Redspot."),(0,a.kt)("h3",{id:"write-deploy-script"},"Write deploy script"),(0,a.kt)("p",null,"Create a new directory called ",(0,a.kt)("inlineCode",{parentName:"p"},"scripts")),(0,a.kt)("p",null,"  Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"deploy.ts")," file in the root directory of ink."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'  import { patract, network } from "redspot";\n\n  const { getContractFactory } = patract;\n  const { createSigner, keyring, api } = network;\n\n  async function run() {\n    await api.isReady;\n\n    // The redspot signer supports passing in an address. If you want to use  substrate uri, you can do it like this:\n    // const signer = createSigner(keyring.createFromUri("bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice"));\n    // Or get the configured account from redspot config:\n    // const signer = (await getSigners())[0]\n    const signer = "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY"; // Alice Address\n\n    const contractFactory = await getContractFactory("erc20", signer);\n\n    const balance = await api.query.system.account(signer);\n\n    console.log("Balance: ", balance.toHuman());\n\n    // The `deploy` method will attempt to deploy a new contract.\n    // The `deployed` method will first find out if the same contract already exists based on the parameters.\n    // If the contract exists, it will be returned, otherwise a new contract will be created.\n    const contract = await contractFactory.deploy("new", "1000000", {\n      gasLimit: "400000000000",\n      value: "10000 UNIT",\n    });\n\n    console.log("");\n    console.log(\n      "Deploy successfully. The contract address: ",\n      contract.address.toString()\n    );\n\n    api.disconnect();\n  }\n\n  run().catch((err) => {\n    console.log(err);\n  });\n')),(0,a.kt)("h3",{id:"config-test-blockchain-node"},"config test blockchain node"),(0,a.kt)("p",null,"Make sure that the network desinated to deploy has been configured correctly in redspot.config.ts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```typescript\n{\n        ...\n        networks: {\n    development: {\n      endpoint: 'ws://127.0.0.1:9944', // \n      types: {},\n      ...\n    },\n  },\n}\n```\n")),(0,a.kt)("p",null,"Add",(0,a.kt)("inlineCode",{parentName:"p"},"--no-compile"),"to prevent repeated compilation and run the deploy.ts file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx redspot run scripts/deploy.ts --no-compile\n")),(0,a.kt)("h3",{id:"run-compile"},"run compile"),(0,a.kt)("p",null,"After the contract is successfully deployed, you can get information similar to this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Deploy successfully. The contract address:  5CqB5Mh9UdVbTE1Gt5PJfWSiCHydJaJsA31HjKGti1Z2fn78\n")),(0,a.kt)("h2",{id:"test-contract"},"Test contract"),(0,a.kt)("p",null,"Create a new directory called ",(0,a.kt)("inlineCode",{parentName:"p"},"tests")),(0,a.kt)("p",null,"Add the erc20.test.ts file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"tests")," directory to test the erc20 contract."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { expect } from "chai";\nimport { artifacts, network, patract } from "redspot";\n\nconst { getContractFactory, getRandomSigner } = patract;\n\nconst { api, getAddresses, getSigners } = network;\n\ndescribe("ERC20", () => {\n  after(() => {\n    return api.disconnect();\n  });\n\n  async function setup() {\n    await api.isReady\n    const signerAddresses = await getAddresses();\n    const Alice = signerAddresses[0];\n    const sender = await getRandomSigner(Alice, "10000 UNIT");\n    const contractFactory = await getContractFactory("erc20", sender.address);\n    const contract = await contractFactory.deploy("new", "1000");\n    const abi = artifacts.readArtifact("erc20");\n    const receiver = await getRandomSigner();\n\n    return { sender, contractFactory, contract, abi, receiver, Alice };\n  }\n\n  it("Assigns initial balance", async () => {\n    const { contract, sender } = await setup();\n    const result = await contract.query.balanceOf(sender.address);\n    expect(result.output).to.equal(1000);\n  });\n\n  it("Transfer adds amount to destination account", async () => {\n    const { contract, receiver } = await setup();\n\n    await expect(() =>\n      contract.tx.transfer(receiver.address, 7)\n    ).to.changeTokenBalance(contract, receiver, 7);\n\n    await expect(() =>\n      contract.tx.transfer(receiver.address, 7)\n    ).to.changeTokenBalances(contract, [contract.signer, receiver], [-7, 7]);\n  });\n\n  it("Transfer emits event", async () => {\n    const { contract, sender, receiver } = await setup();\n\n    await expect(contract.tx.transfer(receiver.address, 7))\n      .to.emit(contract, "Transfer")\n      .withArgs(sender.address, receiver.address, 7);\n  });\n\n  it("Can not transfer above the amount", async () => {\n    const { contract, receiver } = await setup();\n\n    await expect(contract.tx.transfer(receiver.address, 1007)).to.not.emit(\n      contract,\n      "Transfer"\n    );\n  });\n\n  it("Can not transfer from empty account", async () => {\n    const { contract, Alice, sender } = await setup();\n\n    const emptyAccount = await getRandomSigner(Alice, "10 UNIT");\n\n    await expect(\n      contract.connect(emptyAccount).tx.transfer(sender.address, 7)\n    ).to.not.emit(contract, "Transfer");\n  });\n});\n')),(0,a.kt)("p",null,"Run the test command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx redspot test --no-compile\n")))}u.isMDXComponent=!0}}]);