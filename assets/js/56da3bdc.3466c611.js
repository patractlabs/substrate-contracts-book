"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[1962],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),l=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(a),m=r,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return a?n.createElement(h,c(c({ref:t},p),{},{components:a})):n.createElement(h,c({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<o;l++)c[l]=a[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4596:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),c=["components"],s={},i="Patract Hub's treasury report for Himalia v0.1 & v0.2(Contract SDKs)",l={unversionedId:"himalia/reports/v0.1Report",id:"himalia/reports/v0.1Report",isDocsHomePage:!1,title:"Patract Hub's treasury report for Himalia v0.1 & v0.2(Contract SDKs)",description:"5 weeks ago\uff0cPatract Hub applied a treasury proposal #61 for Himalia v0.1&v0.2, Now, we have finished all the work and you can review our codebase at\uff1a",source:"@site/docs/himalia/reports/v0.1Report.md",sourceDirName:"himalia/reports",slug:"/himalia/reports/v0.1Report",permalink:"/substrate-contracts-book/himalia/reports/v0.1Report",editUrl:"https://github.com/patractlabs/substrate-contracts-book/edit/master/docs/himalia/reports/v0.1Report.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Himalia\u8bae\u4f1a\u63d0\u6848\u62a5\u544a",permalink:"/substrate-contracts-book/himalia/reports"},next:{title:"Overview",permalink:"/substrate-contracts-book/metis/intro/overview"}},p=[{value:"1. Himalia&#39;s future development plan",id:"1-himalias-future-development-plan",children:[]},{value:"2. PatractGo Report",id:"2-patractgo-report",children:[{value:"2.1 API for Contracts",id:"21-api-for-contracts",children:[]},{value:"2.2 REST API for Contract",id:"22-rest-api-for-contract",children:[]},{value:"2.3  observer",id:"23--observer",children:[]},{value:"2.4 Support for ERC20 Contract",id:"24-support-for-erc20-contract",children:[]},{value:"2.4 Tools",id:"24-tools",children:[]}]},{value:"3. PatractPy Report",id:"3-patractpy-report",children:[{value:"3.1 Basic Apis For Contracts",id:"31-basic-apis-for-contracts",children:[]},{value:"3.2 ContractObserver",id:"32-contractobserver",children:[]},{value:"3.3 ERC20 API",id:"33-erc20-api",children:[]},{value:"3.4 Unittest Node Environment",id:"34-unittest-node-environment",children:[]}]},{value:"4. Recap of verification of v0.1 and v0.2",id:"4-recap-of-verification-of-v01-and-v02",children:[]}],d={toc:p};function u(e){var t=e.components,a=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"patract-hubs-treasury-report-for-himalia-v01--v02contract-sdks"},"Patract Hub's treasury report for Himalia v0.1 & v0.2(Contract SDKs)"),(0,o.kt)("p",null,"5 weeks ago\uff0cPatract Hub applied a ",(0,o.kt)("a",{parentName:"p",href:"https://kusama.polkassembly.io/treasury/61"},"treasury proposal #61")," for Himalia v0.1&v0.2, Now, we have finished all the work and you can review our codebase at\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Himalia v0.1 PatractGo ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/patractlabs/go-patract"},"https://github.com/patractlabs/go-patract")),(0,o.kt)("li",{parentName:"ul"},"Himalia v0.2 PatractPy ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/patractlabs/py-patract"},"https://github.com/patractlabs/py-patract"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PatractGo")," mainly completes the contract-related interfaces and APIs, and supports scanning and monitoring (observer) of events generated by the contract. ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractGo")," is based on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/centrifuge/go-substrate-rpc-client"},"Centrifuge's GSRPC"),". In the development process, in order to make the API more convenient to use and embed other services, we encapsulated GSRPC, providing API call based on context style. In addition, some interfaces that are not provided by GSRPC but are more useful for development and debugging have been added, such as encode and decode of AccountID in ss58 format, and unit test environment support."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PatractGo")," further encapsulates common ERC20 contracts, including API and monitoring support. This is convenient for processing ERC20 contracts, and can be used as an example to guide the development of other contract APIs. ",(0,o.kt)("strong",{parentName:"p"},"In the future, ",(0,o.kt)("inlineCode",{parentName:"strong"},"PatractGo")," will develop a code generator that automatically generates the corresponding go code based on the metadata of the contract. Since the logic of this generation process is the same for go and java, this part of the function is postponed to complete with ",(0,o.kt)("inlineCode",{parentName:"strong"},"PatractJ"),". An example of ",(0,o.kt)("inlineCode",{parentName:"strong"},"ERC20")," is provided in the current version to show how to make packaging calls for a specific contract.")," For more information about ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractGo"),", please refer to the following function description and sample code in the project."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PatractGo")," also provieds the following founctions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/patractlabs/go-patract/tree/master/examples/dump"},"dump")," provides an example of the ERC20 contract status synchronization tool. Dump will scan all events of the specified ERC20 contract. The number of tokens corresponding to the account is synchronized to a local database, and a simple query function is provided. This example can be used as an example of Oberver, and at the same time, it can be used as a tool to analyze the Token distribution of a specified ERC20 contract."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/patractlabs/go-patract/tree/master/examples/rest"},"rest")," use ","[github.com/patractlabs/go-patract/rest]","(",(0,o.kt)("a",{parentName:"li",href:"https://github.com"},"https://github.com")," /patractlabs/go-patract/tree/master/rest) module. rest builds the url corresponding to the message based on metadata. Users can use this service to build the unsigned Extrinsic binary data of the specified contract, which can be sent to the trusted environment Third-party tool for signing. Based on this model, when contract developers use the Golang to develop contract back-end services, they can put the private key in an independent network environment and development environment to protect the security of the private key. In some scenarios, this processing is necessary , such as the account management of an exchange. As a developer-oriented SDK, programs containing ",(0,o.kt)("inlineCode",{parentName:"li"},"PatractGo")," and other SDK codes may not be able to run in some sensitive environments. Therefore, rest provides an HTTP-based service interface, which is also convenient for developers to access existing authorization system.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," mainly completes the support of the unit test environment and scans and monitors the events generated by the contract. ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," is based on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/polkascan/py-substrate-interface"},"Polkascan's Python Substrate Interface"),". In the v0.11.8 version of ",(0,o.kt)("inlineCode",{parentName:"p"},"py-substrate-interface"),", they have provided good support for contract API, so ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," mainly supplements some of the missing functions of ",(0,o.kt)("inlineCode",{parentName:"p"},"py-substrate-interface"),", such as subscription API and deserialization support for contract events. ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," can automatically construct a python contract object based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," part of the metadata, and has a method to call the contract, similar to the implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"api-contracts")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"polkadot.js"),". Therefore, after loading metadata, ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," can simply call the contract according to the definition of the contract's own method, without the need for static languages such as Java or Golang to provide a method of interacting with the contract through code generation. On the other hand, ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," completes the scanning and monitoring of events generated by the contract, and its implementation can also be used to process events from other modules."),(0,o.kt)("p",null,"As the most important function of ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy"),", we hope that it can support our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/europa"},"Europa")," and complete unit testing for contracts based on it. On the one hand, as the realization of the test case of the ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," project itself, on the other hand, we can use python to implement the test case code for the contract based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," to test and reproduce the test cases in complex scenarios, plus complete Python ecological test support can make smart contract development more convenient and efficient."),(0,o.kt)("p",null,"In the future, ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractGo")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," will be integrated into our ",(0,o.kt)("inlineCode",{parentName:"p"},"Redspot")," in the form of plug-ins. Therefore, for a contract development project, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Redspot")," to build a contract development framework, and then use Redspot's own ",(0,o.kt)("inlineCode",{parentName:"p"},"polkadot.js")," or use a plug-in",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," to quickly and easily perform contract debugging and integration testing in our ",(0,o.kt)("inlineCode",{parentName:"p"},"Europa"),", and then use ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractGo")," to call the contract. After the entire system has been debugged in the test environment, use the backend required by ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractGo")," to develop the contract and use it in the production environment. The next version of ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractJ")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractN")," will be integrated into the ",(0,o.kt)("inlineCode",{parentName:"p"},"Redspot")," system in the same way."),(0,o.kt)("h2",{id:"1-himalias-future-development-plan"},"1. Himalia's future development plan"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"M1: v0.1 PatractGo for Golang")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"M2: v0.2 PatractPy for Python")),(0,o.kt)("li",{parentName:"ul"},"M3: v0.3 PatractJ for JVM "),(0,o.kt)("li",{parentName:"ul"},"M4: v0.4 PatractN for .NET")),(0,o.kt)("h2",{id:"2-patractgo-report"},"2. PatractGo Report"),(0,o.kt)("p",null,"Based on PatractGo\uff0cwe can interact with the contracts very easily\u3002The design goal of PatractGo is closer to that the contract owner build its own business logic to interact with the contract on the chain through PatractGo, which is not suitable for the scenario of contract debugging. If you need to debug the contract, it is recommended to use ",(0,o.kt)("inlineCode",{parentName:"p"},"ParactPy")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"polkadot.js")," for quick testing."),(0,o.kt)("p",null,"For ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractGo"),", we split the functions into three components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Contracts\uff1aprovides the functions to interact with contracts"),(0,o.kt)("li",{parentName:"ul"},"Rest\uff1aprovides a way to generate an offline signature for contracts."),(0,o.kt)("li",{parentName:"ul"},"Observer: listens contract events and parses events by contract metadata.")),(0,o.kt)("h3",{id:"21-api-for-contracts"},"2.1 API for Contracts"),(0,o.kt)("p",null,"By Native Contract API\uff0cWe Can Call Contracts Runtime Earlier\u3002"),(0,o.kt)("p",null,"Put Contracts Code to chain\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'   // read the code wasm from file\n   codeBytes, err := ioutil.ReadFile("/path/to/contracts.wasm")\n   if err != nil {\n      return err\n   }\n\n   // create the api\n   cApi, err := rpc.NewContractAPI(env.URL())\n   \n   // read the abi(metadata) for contract\n   metaBz, err := ioutil.ReadFile("/path/to/contracts_metadata.json")\n   cApi.WithMetaData(metaBz)\n\n   // create context with from auth, like Alice\n   ctx := api.NewCtx(context.Background()).WithFrom(authKey)\n\n   // put code\n   _, err = cApi.Native().PutCode(ctx, codeBytes)\n   \n   // do next steps\n')),(0,o.kt)("p",null,"Get Code from chain\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'   codeHash := readCodeHash() // get code hash\n\n   var codeBz []byte\n   \n    if err := cApi.Native().Cli.GetStorageLatest(&codeBz,\n        "Contracts", "PristineCode",\n        []byte(codeHash), nil); err != nil {\n        return err\n   }\n   \n   // codeBz is now code\n')),(0,o.kt)("p",null,"Instantiate Contract in chain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},"    var endowment uint64 = 1000000000000\n\n    // Instantiate\n    _, contractAccount, err := cApi.Instantiate(ctx,\n        types.NewCompactBalance(endowment),\n        types.NewCompactGas(test.DefaultGas),\n        contracts.CodeHashERC20,\n        types.NewU128(totalSupply),\n   )\n")),(0,o.kt)("p",null,"api will return ",(0,o.kt)("inlineCode",{parentName:"p"},"contractAccount"),", which can use it to call the contract."),(0,o.kt)("p",null,"For a contract, we can read or exec messages. Currently ",(0,o.kt)("inlineCode",{parentName:"p"},"CallToRead")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"CallToExec")," implement a more basic level of encapsulation for contract calls, so contract developers need to write corresponding packaging functions according to the contract method, such as the ERC20 contract under the directory of ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractGo/contracts/erc20")," example."),(0,o.kt)("p",null,"Read the total_supply of ERC20 contract, no request params:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'    var res types.U128\n\n    err := a.CallToRead(ctx,\n        &res,\n        a.ContractAccountID,\n        []string{"total_supply"},\n    )\n')),(0,o.kt)("p",null,"Read the balance_of of AccountID for ERC20 contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'    req := struct {\n        Address types.AccountID\n    }{\n        Address: owner,\n    }\n\n    var res types.U128\n\n    err := a.CallToRead(ctx,\n        &res,\n        ContractAccountIDForERC20,\n        []string{"balance_of"},\n        req,\n    )\n')),(0,o.kt)("p",null,"Call Transfer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'    toParam := struct {\n        Address AccountID\n    }{\n        Address: to,\n    }\n\n    valueParam := struct {\n        Value U128\n    }{\n        Value: amt,\n    }\n\n    return a.CallToExec(ctx,\n        a.ContractAccountID,\n        types.NewCompactBalance(0),\n        types.NewCompactGas(test.DefaultGas),\n        []string{"transfer"},\n        toParam, valueParam,\n    )\n')),(0,o.kt)("p",null,"These behaviors will be automatically generated after the ",(0,o.kt)("inlineCode",{parentName:"p"},"auto contract code generator")," is completed, without the developers needing to care about this part."),(0,o.kt)("h3",{id:"22-rest-api-for-contract"},"2.2 REST API for Contract"),(0,o.kt)("p",null,"We can use rest to get unsigned raw byte data for contract call, it can help to build an offline signature for contract."),(0,o.kt)("p",null,"can use this for example: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/go-patract/blob/master/examples/rest/main.go"},"rest")),(0,o.kt)("p",null,"start the rest server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go run ./examples/rest \n")),(0,o.kt)("p",null,"to get data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  \'http://localhost:8899/erc20/exec/transfer?isOffline=true&contract=5HKinTRKW9THEJxbQb22Nfyq9FPWNVZ9DQ2GEQ4Vg1LqTPuk\' \\\n  -H \'content-type: application/json\' \\\n  -d \'{\n    "nonce":1,\n    "chain_status":{\n        "spec_version":1,\n        "tx_version":1,\n        "block_hash":"0xc20f241b61039e5685d118c7fbc8b27210153c21eee7686a9466f22e01281114",\n        "genesis_hash":"0xc20f241b61039e5685d118c7fbc8b27210153c21eee7686a9466f22e01281114"\n    },\n    "contract":"5HKinTRKW9THEJxbQb22Nfyq9FPWNVZ9DQ2GEQ4Vg1LqTPuk",\n    "origin":"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY",\n    "gas_limit":"500000000000",\n    "args":{\n        "to":"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty",\n        "value":"100000000"\n    }\n}\'\n')),(0,o.kt)("h3",{id:"23--observer"},"2.3  observer"),(0,o.kt)("p",null,"For a contract, we need observer events for the contract, can use ",(0,o.kt)("inlineCode",{parentName:"p"},"observer")," to build a contract events observer service:"),(0,o.kt)("p",null,"a complete example: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/go-patract/blob/master/examples/observer/main.go"},"observer")),(0,o.kt)("p",null,"Also can take the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/go-patract/blob/master/examples/dumper/main.go"},"dumper")," for example, it dump events by contacts to a db."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'...\n\n    // create observer\n    o := observer.New(logger, *flagURL)\n    ctx, cancelFunc := context.WithCancel(context.Background())\n\n...\n    // other init functions\n...\n\n    // create a handler for process events in chain\n    h := observer.NewEvtHandler()\n    h = h.WithContractExecution(func(l log.Logger, height uint64, evt types.EventContractsContractExecution) {\n        data := evt.Data\n\n        l.Debug("handler contract execution", "height", height)\n\n        // for golang we need process each diff types for event\n        typ := metadata.GetEvtTypeIdx(data)\n        switch typ {\n        case 0:\n            var transfer erc20.EventTransfer\n            err := metaData.Spec.Events.DecodeEvt(metaData.NewCtxForDecode(data).WithLogger(l), &transfer)\n            if err != nil {\n                logger.Error("evt decode transfer error", "err", err, "height", height)\n            }\n            logger.Info("transfer event", "evt", transfer)\n        case 1:\n            var approve erc20.EventApproval\n            err := metaData.Spec.Events.DecodeEvt(metaData.NewCtxForDecode(data).WithLogger(l), &approve)\n            if err != nil {\n                logger.Error("evt decode approve error", "err", err, "height", height)\n            }\n            logger.Info("approve event", "evt", approve)\n        }\n    })\n\n    // watcher events\n    if err := o.WatchEvent(ctx, h); err != nil {\n        logger.Error("watch event error", "err", err)\n        return\n    }\n\n...\n')),(0,o.kt)("h3",{id:"24-support-for-erc20-contract"},"2.4 Support for ERC20 Contract"),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"github.com/patractlabs/go-patract/contracts/erc20"),", Complete ERC20 contract support."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},"...\n\n        erc20API := erc20.New(rpcAPI, contractAccountID)\n        ctx := rpc.NewCtx(context.Background()).WithFrom(signature.TestKeyringPairAlice)\n        \n        // transfer alice to bob\n        aliceTotal, err := erc20API.BalanceOf(ctx, test.AliceAccountID)\n\n        // transfer\n        _, err = erc20API.Transfer(ctx, bob, types.NewBalanceByU64(100))\n\n        bobBalance, err := erc20API.BalanceOf(ctx, bob)\n        aliceNewTotal, err := erc20API.BalanceOf(ctx, test.AliceAccountID)\n\n...\n")),(0,o.kt)("h3",{id:"24-tools"},"2.4 Tools"),(0,o.kt)("p",null,"We make some tools for developing constracts, like:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/patractlabs/go-patract/tree/master/tools/parser"},"https://github.com/patractlabs/go-patract/tree/master/tools/parser")," a parser for address"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/patractlabs/go-patract/tree/master/tools/querier"},"https://github.com/patractlabs/go-patract/tree/master/tools/querier")," a querier for get some datas from chain")),(0,o.kt)("h2",{id:"3-patractpy-report"},"3. PatractPy Report"),(0,o.kt)("p",null,"For Unittest, should install ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/europa"},"Europa")," at first."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"europa --version\neuropa 0.1.0-3f71403-x86_64-linux-gnu\n")),(0,o.kt)("p",null,"All of test passed by ",(0,o.kt)("inlineCode",{parentName:"p"},"Europa")," environment."),(0,o.kt)("p",null,"The design goal of ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," is to simplify the repetitive work of the interaction between developers and the contracts, and to monitor contract events, so as to provide a simplified way to quickly call and debug the contract. Therefore, the function of ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy")," will be similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"api-contracts")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"polkadot.js"),". It can load contract instances according to the metadata of the contract, and automatically provide corresponding methods to the python contract instances according to the content of the metadata. Developers can call these generated methods to interact with the contract on the chain."),(0,o.kt)("h3",{id:"31-basic-apis-for-contracts"},"3.1 Basic Apis For Contracts"),(0,o.kt)("p",null,"As ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/polkascan/py-substrate-interface"},"polkascan's Python Substrate Interface")," has provide some support to contract api, so we not need to improve the apis for contract calls, but there is some api to add:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SubstrateSubscriber")," is a subscriber support to subscribe data changes in chain, for example, the events in chain."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"get_contract_event_type")," add event decode support for contracts.")),(0,o.kt)("p",null,"The basic api split into 2 parts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Contract, include:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"contractExecutor: This api could construct an extrinsic to call a contract, would be packed into a block and change state."),(0,o.kt)("li",{parentName:"ul"},"contractReader: This api could construct a rpc request to call a contract, do not pack into a block and do not change any state."),(0,o.kt)("li",{parentName:"ul"},"contractCreator: This api is used for ",(0,o.kt)("inlineCode",{parentName:"li"},"instantiate")," a contract and holding the Wasm code and metadata, receive following parameters:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"gas_limit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"endowment")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"deployment_salt")," (",(0,o.kt)("inlineCode",{parentName:"li"},"salt")," parameter in ",(0,o.kt)("inlineCode",{parentName:"li"},"instantiate"),")"))),(0,o.kt)("li",{parentName:"ul"},"ContractAPI: This api is used for ",(0,o.kt)("inlineCode",{parentName:"li"},"call")," a contract, is a wrapper for ",(0,o.kt)("inlineCode",{parentName:"li"},"contractExecutor")," and",(0,o.kt)("inlineCode",{parentName:"li"},"contractReader"),", developers could use this api to react with contracts. This api could create a instance depends on the metadata, auto generate the contract access functions based on the contract. And the auto-gen functions receive the parameters which defined in contracts, besides receive following common parameters:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"gas_limit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"value")," (notice, if current call's ",(0,o.kt)("inlineCode",{parentName:"li"},"payable")," is false, this ",(0,o.kt)("inlineCode",{parentName:"li"},"value")," must be ",(0,o.kt)("inlineCode",{parentName:"li"},"0"),")"))),(0,o.kt)("li",{parentName:"ul"},"ContractFactory: This api is used for constructing a contract instance in python, and developer could use this instance to access contract. This is a wrapper for ",(0,o.kt)("inlineCode",{parentName:"li"},"contractCreator")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"ContractAPI")))),(0,o.kt)("li",{parentName:"ul"},"Observer, include:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"ContractObserver: This api is used for listen the events in contracts.")))),(0,o.kt)("p",null,"Based on the api provided above, Python developers can refer to the following case to access the contract. The following example shows a contract instance loaded through the metadata of ERC20. Developers can directly call methods like ",(0,o.kt)("inlineCode",{parentName:"p"},"transfer")," that are automatically created by metadata to send transactions to the node or call the node's rpc to return the contract execution result. On the other hand, the following example also shows how to monitor the events of a contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os\nfrom substrateinterface import SubstrateInterface, Keypair\nfrom patractinterface.contract import ContractAPI, ContractFactory\nfrom patractinterface.observer import ContractObserver\n\ndef main():\n    # use [europa](https://github.com/patractlabs/europa) as test node endpoint, notice `type_registry` should set correctly.\n    substrate=SubstrateInterface(url='ws://127.0.0.1:9944', type_registry_preset=\"default\", type_registry={'types': {'LookupSource': 'MultiAddress'}})\n    # load deployer key\n    alice = Keypair.create_from_uri('//Alice')\n    bob = Keypair.create_from_uri('//Bob')\n    # 1. load a contract from Wasm file and metadata.json file (Those files is complied by [ink!](https://github.com/paritytech/ink))\n    # in this example, we use `ink/example/erc20` contract as example.\n    contract = ContractFactory.create_from_file(\n            substrate=substrate, # should provide a subtrate endpoint\n            code_file= os.path.join(os.path.dirname(__file__), 'res', 'erc20.wasm'),\n            metadata_file= os.path.join(os.path.dirname(__file__), 'res', 'erc20.json')\n        )\n    # upload code to chain directly\n    res = contract.put_code(alice)\n    print(\"update code hash{} res:{}\".format(contract.code_hash.hex(), res.is_succes))\n    # 2. instantiate the uploaded code as a contract instance\n    erc20_ins = contract.new(alice, 1000000 * (10 ** 15), endowment=2*10**10, gas_limit=20000000000, deployment_salt=\"0x12\")\n    # 2.1 create a observer to listen event\n    observer = ContractObserver(erc20_ins.contract_address, erc20_ins.metadata, substrate)\n    # 3. send a transfer call for this contract\n    res = erc20_ins.transfer(alice, bob.ss58_address, 100000, gas_limit=20000000000)\n    print('transfer res', res.is_succes)\n\n    def on_transfer(num, evt):\n        print(\"on_transfer in {} : {} {} {}\".format(num, evt['from'], evt['to'], evt['value']))\n\n    def on_approval(num, evt):\n        print(\"on_approval in {} : {} {} {}\".format(num, evt['owner'], evt['spender'], evt['value']))\n    # 4 set event callback \n    observer.scanEvents(handlers={\n        'Transfer': on_transfer,\n        'Approve': on_approval\n    })\n\nif __name__ == \"__main__\":\n    main()\n    pass\n")),(0,o.kt)("h3",{id:"32-contractobserver"},"3.2 ContractObserver"),(0,o.kt)("p",null,"ContractObserver can observer events for a contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"substrate=SubstrateInterface(url=\"ws://127.0.0.1:9944\", type_registry_preset='canvas')\ncontract_metadata = ContractMetadata.create_from_file(\n    metadata_file=os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.json'),\n    substrate=substrate\n)\nobserver = ContractObserver(\"0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48\", contract_metadata, substrate)\n\n# for some handlers\nobserver.scanEvents()\n")),(0,o.kt)("p",null,"The handler function can take the erc20 support as a example."),(0,o.kt)("h3",{id:"33-erc20-api"},"3.3 ERC20 API"),(0,o.kt)("p",null,"In addition to the normal use of metadata to construct contract objects to access the contract, developers can also package their own access methods to the contract according to the basic api provided by ",(0,o.kt)("inlineCode",{parentName:"p"},"PatractPy"),"."),(0,o.kt)("p",null,"ERC20 api provide a wrapper to erc20 contract exec, read and observer events, it can be a example for contracts api calling."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\n# init api\nsubstrate=SubstrateInterface(url=\"ws://127.0.0.1:9944\", type_registry_preset='canvas')\n\ncontract_metadata = ContractMetadata.create_from_file(\n    metadata_file=os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.json'),\n    substrate=substrate\n)\n\nalice = Keypair.create_from_uri('//Alice')\nbob = Keypair.create_from_uri('//Bob')\n\n# erc20 api\nerc20 = ERC20.create_from_contracts(\n    substrate= substrate, \n    contract_file= os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.wasm'),\n    metadata_file= os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.json')\n)\n\n# deplay a erc20 contract\nerc20.putAndDeploy(alice, 1000000 * (10 ** 15))\n\n# read total supply\ntotal_supply = erc20.totalSupply()\n\n# transfer\nerc20.transferFrom(alice,\n    fromAcc=alice.ss58_address, \n    toAcc=bob.ss58_address, \n    amt=10000)\n\nerc20.transfer(alice, bob.ss58_address, 10000)\n\n# get balance\nalice_balance = erc20.balanceOf(alice.ss58_address)\n\n# approve\nerc20.approve(alice, spender=bob.ss58_address, amt=10000)\n\n# get allowance\nalice_allowance = erc20.allowance(alice.ss58_address, bob.ss58_address)\n\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ERC20Observer")," is a event observer for erc20 contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"observer = ERC20Observer.create_from_address(\n    substrate = substrate, \n    contract_address = contract_address,\n    metadata_file= os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.json')\n)\n\ndef on_transfer(num, fromAcc, toAcc, amt):\n    logging.info(\"on_transfer in block[{}] : {} {} {}\".format(num, fromAcc, toAcc, amt))\n\ndef on_approval(num, owner, spender, amt):\n    logging.info(\"on_approval in block[{}] : {} {} {}\".format(num, owner, spender, amt))\n\nobserver.scanEvents(on_transfer = on_transfer, on_approval = on_approval)\n")),(0,o.kt)("h3",{id:"34-unittest-node-environment"},"3.4 Unittest Node Environment"),(0,o.kt)("p",null,"PatractPy can support write contract unittest by node environment."),(0,o.kt)("p",null,"At First We need install ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/europa"},"europa"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from patractinterface.contracts.erc20 import ERC20\nfrom patractinterface.unittest.env import SubstrateTestEnv\n\nclass UnittestEnvTest(unittest.TestCase):\n    @classmethod\n    def setUp(cls):\n        # start env or use canvas for a 6s block\n        cls.env = SubstrateTestEnv.create_europa(port=39944)\n        cls.env.startNode()\n\n        cls.api = SubstrateInterface(url=cls.env.url(), type_registry_preset=cls.env.typ())\n        cls.alice = Keypair.create_from_uri('//Alice')\n        cls.bob = Keypair.create_from_uri('//Bob')\n\n        cls.erc20 = ERC20.create_from_contracts(\n            substrate= cls.substrate, \n            contract_file= os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.wasm'),\n            metadata_file= os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.json')\n        )\n        cls.erc20.putAndDeploy(alice, 1000000 * (10 ** 15))\n\n        return\n\n    def tearDown(cls):\n        cls.env.stopNode()\n\n    def test_transfer(self):\n        self.erc20.transferFrom(alice,\n            fromAcc=alice.ss58_address, \n            toAcc=bob.ss58_address, \n            amt=10000)\n        # some more test case\n\nif __name__ == '__main__':\n    unittest.main()\n")),(0,o.kt)("p",null,"By example, we can use python to write testcase for some complex logics, by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/europa"},"Europa"),", we can test the contracts for python scripts."),(0,o.kt)("h2",{id:"4-recap-of-verification-of-v01-and-v02"},"4. Recap of verification of v0.1 and v0.2"),(0,o.kt)("p",null,"v0.1 PatractGo"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Initialize the project and complete the native contract interaction API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Complete the contract interaction API and HTTP contract interaction service based on metadata.json")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Complete contract status scan support")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Monitor service support and complete the example to write into the database")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Complete ERC20 contract support and complete the corresponding command line tools")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Improve sample code and unboxing documentation"))),(0,o.kt)("p",null,"v0.2 PatractPy"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Initialize the project and complete the native contract interaction API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Complete the contract interaction API based on metadata.json")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Complete ERC20 contract support")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",{parentName:"li"},"Improve sample code and unboxing documentation"))),(0,o.kt)("p",null,"We will propose v0.3 and v0.4 later after some time for research."))}u.isMDXComponent=!0}}]);