"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2771],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(t),f=r,d=m["".concat(l,".").concat(f)]||m[f]||p[f]||i;return t?a.createElement(d,o(o({ref:n},u),{},{components:t})):a.createElement(d,o({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6662:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],s={},l="ERC20",c={unversionedId:"metis/tokens",id:"metis/tokens",isDocsHomePage:!1,title:"ERC20",description:"metis \u63d0\u4f9b\u4e86\u5b8c\u5168\u7b26\u5408 ERC20 \u6807\u51c6\u7684 trait_definition \u3001\u5408\u7ea6\u95f4\u8c03\u7528 stub",source:"@site/docs/metis/tokens.md",sourceDirName:"metis",slug:"/metis/tokens",permalink:"/metis/tokens",editUrl:"https://github.com/patractlabs/substrate-contracts-book/docs/metis/tokens.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Metis",permalink:"/metis/introduction"},next:{title:"Access Control",permalink:"/metis/access-control"}},u=[{value:"Trait Definition",id:"trait-definition",children:[{value:"erc20 trait \u6e90\u7801\u89e3\u6790",id:"erc20-trait-\u6e90\u7801\u89e3\u6790",children:[]},{value:"\u4f7f\u7528 erc20-trait \u5b9e\u73b0\u5408\u7ea6",id:"\u4f7f\u7528-erc20-trait-\u5b9e\u73b0\u5408\u7ea6",children:[]}]},{value:"\u8de8\u5408\u7ea6\u8c03\u7528 stub",id:"\u8de8\u5408\u7ea6\u8c03\u7528-stub",children:[{value:"erc20 stub \u6e90\u7801\u89e3\u6790",id:"erc20-stub-\u6e90\u7801\u89e3\u6790",children:[]},{value:"\u901a\u8fc7 erc20 stub \u8de8\u5408\u7ea6\u8c03\u7528",id:"\u901a\u8fc7-erc20-stub-\u8de8\u5408\u7ea6\u8c03\u7528",children:[]}]}],p={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"erc20"},"ERC20"),(0,i.kt)("p",null,"metis \u63d0\u4f9b\u4e86\u5b8c\u5168\u7b26\u5408 ",(0,i.kt)("inlineCode",{parentName:"p"},"ERC20")," \u6807\u51c6\u7684 ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/metis/tree/master/traits/token/erc20"},"trait_definition")," \u3001",(0,i.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/metis/tree/master/stubs/token/erc20"},"\u5408\u7ea6\u95f4\u8c03\u7528 stub"),"\n\u4ee5\u53ca ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/metis/tree/master/impls/token/erc20"},"erc20\u5408\u7ea6")," \u7684\u6807\u51c6\u5b9e\u73b0\u3002"),(0,i.kt)("p",null,"\u4e0b\u9762\u8be6\u7ec6\u4ecb\u7ecd\u4e0b metis \u63d0\u4f9b\u7684 erc20 trait \u548c stub \u7684\u4f7f\u7528\u65b9\u6cd5\u3002"),(0,i.kt)("h2",{id:"trait-definition"},"Trait Definition"),(0,i.kt)("p",null,"\u901a\u8fc7 ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::trait_definition]")," \u5904\u7406\u5b8f\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5df1\u7684 trait definitions\uff0c\u7136\u540e\u53ef\u4ee5\u7531 ink! \u667a\u80fd\u5408\u7ea6\u5b9e\u73b0\u3002 \u8fd9\u5141\u8bb8\u4e3a\u4e0d\u540c\u7684\u5177\u4f53\u5b9e\u73b0\u5b9a\u4e49\u5171\u4eab\u7684\u667a\u80fd\u5408\u7ea6\u63a5\u53e3\u3002 \u6ce8\u610f\u8fd9\u79cd ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::trait_definition]")," \u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u5b9a\u4e49\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a crate \u4e2d\u5b9a\u4e49\uff01"),(0,i.kt)("h3",{id:"erc20-trait-\u6e90\u7801\u89e3\u6790"},"erc20 trait \u6e90\u7801\u89e3\u6790"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\n\n// \u6ce8\u610f\uff1a\u8fd9\u91cc\u9700\u8981\u5bfc\u51fa tarit \u5b9a\u4e49\u4f9b\u5176\u4ed6\u5305\u4f7f\u7528\npub use self::erc20::{Error, IErc20, Result};\npub mod events {\n    // pub use crate::erc20::{Transfer, Approval};\n}\n\nuse ink_lang as ink;\n#[ink::contract]\nmod erc20 {\n    use ink_lang as ink;\n    use ink_prelude::string::String;\n    /// The ERC-20 result type.\n    pub type Result<T> = core::result::Result<T, Error>;\n\n    /// Event emitted when a token transfer occurs.\n    #[ink(event)]\n    pub struct Transfer {\n        #[ink(topic)]\n        pub from: Option<AccountId>,\n        #[ink(topic)]\n        pub to: Option<AccountId>,\n        #[ink(topic)]\n        pub value: Balance,\n    }\n    /// Event emitted when an approval occurs that `spender` is allowed to withdraw\n    /// up to the amount of `value` tokens from `owner`.\n    #[ink(event)]\n    pub struct Approval {\n        #[ink(topic)]\n        pub owner: AccountId,\n        #[ink(topic)]\n        pub spender: AccountId,\n        #[ink(topic)]\n        pub value: Balance,\n    }\n\n    /// The ERC-20 error types.\n    #[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n    #[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\n    pub enum Error {\n        /// Returned if not enough balance to fulfill a request is available.\n        InsufficientBalance,\n        /// Returned if not enough allowance to fulfill a request is available.\n        InsufficientAllowance,\n    }\n\n    /// Trait implemented by all ERC-20 respecting smart contracts.\n    #[ink::trait_definition]\n    pub trait IErc20 {\n        /// Creates a new ERC-20 contract with the specified initial supply.\n        #[ink(constructor)]\n        fn new(\n            initial_supply: Balance,\n            name: Option<String>,\n            symbol: Option<String>,\n            decimals: Option<u8>,\n        ) -> Self;\n\n        /// Returns the token name.\n        #[ink(message)]\n        fn token_name(&self) -> Option<String>;\n\n        /// Returns the token symbol.\n        #[ink(message)]\n        fn token_symbol(&self) -> Option<String>;\n\n        /// Returns the token decimals.\n        #[ink(message)]\n        fn token_decimals(&self) -> Option<u8>;\n        /// Returns the total token supply.\n        #[ink(message)]\n        fn total_supply(&self) -> Balance;\n        /// Returns the account balance for the specified `owner`.\n        #[ink(message)]\n        fn balance_of(&self, owner: AccountId) -> Balance;\n\n        /// Transfers `value` amount of tokens from the caller\'s account to account `to`.\n        #[ink(message)]\n        fn transfer(&mut self, to: AccountId, value: Balance) -> Result<()>;\n\n        /// Returns the amount which `spender` is still allowed to withdraw from `owner`.\n        #[ink(message)]\n        fn allowance(&self, owner: AccountId, spender: AccountId) -> Balance;\n\n        /// Transfers `value` tokens on the behalf of `from` to the account `to`.\n        #[ink(message)]\n        fn transfer_from(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<()>;\n\n        /// Allows `spender` to withdraw from the caller\'s account multiple times, up to\n        /// the `value` amount.\n        #[ink(message)]\n        fn approve(&mut self, spender: AccountId, value: Balance) -> Result<()>;\n    }\n\n    // TODO tmp hack struct for passing compile\n    #[ink(storage)]\n    pub struct Phantom;\n    impl Phantom {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Phantom {}\n        }\n        #[ink(message)]\n        pub fn message(&self) {}\n    }\n}\n')),(0,i.kt)("p",null,"\u9996\u5148\u5fc5\u987b\u8981\u5b9a\u4e49 ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::trait_definition]"),", \u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"IErc20")," \u7684 trait \u63a5\u53e3\u3002\u5728 trait_definition \u4e2d\u5fc5\u987b\u5b9a\u4e49\u81f3\u5c11\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink(constructor)]")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink(message)]"),"\u3002\n\u6240\u6709\u63a5\u53e3\u53ea\u6709\u58f0\u660e\uff0c\u6ca1\u6709\u5b9e\u73b0\u3002"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::trait_definition]")," \u662f\u53ef\u4ee5\u8131\u79bb\u4e8e ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::contract]")," \u5355\u72ec\u5b9a\u4e49\u7684\uff0c\u4e00\u822c\u7b80\u5355\u7684trait\u7684\uff0c\u53ea\u9700\u8981\u5b9a\u4e49 trait_definition \u5373\u53ef\uff0c\u5982\u5728\u524d\u6587\u4ecb\u7ecd\u4e2d\u5b9a\u4e49\u7684\u90a3\u6837\u3002\u4f46\u5728\u8fd9\u4e2a erc20 trait \u7684\n\u5b9e\u73b0\u4e2d\uff0c\u4e4b\u6240\u4ee5\u5b9a\u4e49\u5728",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::contract]")," \u4e2d\uff0c\u662f\u56e0\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink(event)]")," \u7684\u5b58\u5728\uff0c\u6211\u4eec\u5e0c\u671b\u4e0d\u4ec5\u63d0\u4f9b\u63a5\u53e3\uff0c\u4e5f\u63d0\u4f9b\u4e00\u4e9b\u4e8b\u4ef6\u548c\u9519\u8bef\u7684\u5b9a\u4e49\uff0c\u8fd9\u6837\u5f00\u53d1\u8005\u5728\u4f7f\u7528\u6211\u4eec\u7684 erc20-trait \u5305\u65f6\u53ef\u4ee5\u6e05\u695a\u7684\u77e5\u9053\u4f1a\n\u89e6\u53d1\u90a3\u4e9b\u4e8b\u4ef6\u548c\u53d1\u751f\u54ea\u4e9b\u9519\u8bef\uff0c\u4f46\u7f8e\u4e2d\u4e0d\u8db3\u7684\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink(event)]"),"\u4e0d\u80fd\u8131\u79bb\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::contract]"),"\u5355\u72ec\u5b9a\u4e49\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u4e34\u65f6\u5b9e\u73b0\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"Phantom")," \u5408\u7ea6\u53ca\u5b58\u50a8\u6765\u4f7f\u7f16\u8bd1\u901a\u8fc7\u3002\u8fd9\u4e2a\u95ee\u9898\u6211\u4eec\u5df2\u7ecf\u50cf\u5b98\u65b9\u63d0\u4ea4issue\n\uff08",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/issues/683%EF%BC%89"},"https://github.com/paritytech/ink/issues/683\uff09")," \u3002"),(0,i.kt)("p",null,"\u5728\u5b9a\u4e49\u4e86",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::trait_definition]"),"\u540e\uff0c\u6ce8\u610f\u9700\u8981\u5c06 trait \u5bfc\u51fa\uff0c\u5982\uff1a ",(0,i.kt)("inlineCode",{parentName:"p"},"pub use self::erc20::{Error, IErc20, Result};"),", \u53ea\u6709\u5bfc\u51fa\u540e\u624d\u53ef\u4ee5\u88ab\u5176\u4ed6 crate \u4f7f\u7528\u3002"),(0,i.kt)("h3",{id:"\u4f7f\u7528-erc20-trait-\u5b9e\u73b0\u5408\u7ea6"},"\u4f7f\u7528 erc20-trait \u5b9e\u73b0\u5408\u7ea6"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u521b\u5efa\u4e00\u4e2a\u65b0\u5408\u7ea6")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cargo contract new myerc20\n")),(0,i.kt)("p",null,"\u6ce8\u610f\uff1a metis\u4e2d\u6240\u6709\u5408\u7ea6\u7684 ink! dependencies \u90fd\u662f\u6700\u65b0\u7684ink\u4ed3\u5e93\u4e2d\u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u65b0\u5efa\u7684\u5408\u7ea6\u9879\u76ee\u4e2d\u7684\u4f9d\u8d56\u6539\u4e3a\u6700\u65b0\uff0c\u4e0d\u7136\u4f1a\u5f15\u8d77\u7248\u672c\u51b2\u7a81\uff0c\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nink_primitives = { version = "3.0.0-rc3", git = "https://github.com/paritytech/ink", default-features = false }\nink_metadata = { version = "3.0.0-rc3", git = "https://github.com/paritytech/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { version = "3.0.0-rc3", git = "https://github.com/paritytech/ink", default-features = false }\nink_storage = { version = "3.0.0-rc3", git = "https://github.com/paritytech/ink", default-features = false }\nink_lang = { version = "3.0.0-rc3", git = "https://github.com/paritytech/ink", default-features = false }\nink_prelude = { version = "3.0.0-rc3", git = "https://github.com/paritytech/ink", default-features = false }\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"\u5c06 ",(0,i.kt)("inlineCode",{parentName:"li"},"erc20-trait")," \u5305\u6dfb\u52a0\u5230\u65b0\u5408\u7ea6\u9879\u76ee\u7684 ",(0,i.kt)("inlineCode",{parentName:"li"},"cargo.toml")," \u4f9d\u8d56\u4e2d")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nerc20-trait = { git = "https://github.com/patractlabs/metis", default-features = false, features = ["ink-as-dependency"] }\n\n[features]\ndefault = ["std"]\nstd = [\n    "erc20-trait/std",\n]\n')),(0,i.kt)("p",null,"\u8fd9\u91cc\u6dfb\u52a0\u4f9d\u8d56\u65f6\uff0c\u542f\u7528\u4e86 ",(0,i.kt)("inlineCode",{parentName:"p"},' features = ["ink-as-dependency"]')," \u7279\u6027\uff0c\u662f\u56e0\u4e3a\u5728 ink\uff01\u4e2d\u5408\u7ea6\u4f5c\u4e3a\u4f9d\u8d56\u662f\u9700\u8981\u5f00\u542f\u6539\u7279\u6027\u3002 "),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"\u5728\u65b0\u5408\u7ea6\u9879\u76ee\u4e2d\u5b9e\u73b0 erc20 trait")),(0,i.kt)("p",null,"\u5b8c\u6574\u4ee3\u7801\u5728: ",(0,i.kt)("inlineCode",{parentName:"p"},"https://github.com/patractlabs/metis/blob/master/impls/token/erc20")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\n\nuse ink_lang as ink;\n\n#[ink::contract]\nmod erc20 {\n    // \u8fd9\u91cc\u9700\u8981\u5bfc\u5165 erc20_trait \u4e2d\u5b9a\u4e49\u7684\u63a5\u53e3\u548c\u9519\u8bef\n    use erc20_trait::{Error, IErc20, Result};\n    use ink_prelude::string::String;\n\n    /// Basic version of StandardToken, with no allowances.\n    #[ink(storage)]\n    pub struct Erc20 {\n        /// Total token supply.\n        total_supply: Lazy<Balance>,\n        /// Mapping from owner to number of owned token.\n        balances: StorageHashMap<AccountId, Balance>,\n        /// Mapping of the token amount which an account is allowed to withdraw\n        /// from another account.\n        allowances: StorageHashMap<(AccountId, AccountId), Balance>,\n        /// Name of the token\n        name: Option<String>,\n        /// Symbol of the token\n        symbol: Option<String>,\n        /// Decimals of the token\n        decimals: Option<u8>,\n    }\n\n    impl IErc20 for Erc20 {\n        #[ink(constructor)]\n        fn new(\n            initial_supply: Balance,\n            name: Option<String>,\n            symbol: Option<String>,\n            decimals: Option<u8>,\n        ) -> Self {\n            // implementation ...\n        }\n\n        // Omitted part of interface\n        \n        #[ink(message)]\n        fn transfer_from(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<()> {\n            // implementation ...\n        }\n        \n        #[ink(message)]\n        fn approve(&mut self, spender: AccountId, value: Balance) -> Result<()> {\n            // implementation ...\n        }\n    }\n}\n')),(0,i.kt)("h2",{id:"\u8de8\u5408\u7ea6\u8c03\u7528-stub"},"\u8de8\u5408\u7ea6\u8c03\u7528 stub"),(0,i.kt)("p",null,"\u5728\u6b64\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7 erc20 trait \u5b9e\u73b0\u4e86\u6807\u51c6 erc20 \u5408\u7ea6, \u5728\u4e00\u4e9b\u590d\u6742\u7684 dapps \u4e2d\u4e0e erc20 \u5408\u7ea6\u4ea4\u4e92\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002metis \u63d0\u4f9b\u4e86 ",(0,i.kt)("inlineCode",{parentName:"p"},"erc20-stub")," \u652f\u6301\u8de8\u5408\u7ea6\u8c03\u7528\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0erc20\u5408\u7ea6\u3002"),(0,i.kt)("h3",{id:"erc20-stub-\u6e90\u7801\u89e3\u6790"},"erc20 stub \u6e90\u7801\u89e3\u6790"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\n\n// \u9700\u8981\u5c06 Erc20Stub \u5bfc\u51fa\u4f9b\u5b50\u5408\u7ea6\u8c03\u7528\npub use self::erc20::Erc20Stub;\nuse ink_lang as ink;\n\n#[ink::contract]\nmod erc20 {\n    use ink_prelude::string::String;\n\n    /// The ERC-20 error types.\n    #[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n    #[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\n    pub enum Error {\n        /// Returned if not enough balance to fulfill a request is available.\n        InsufficientBalance,\n        /// Returned if not enough allowance to fulfill a request is available.\n        InsufficientAllowance,\n    }\n\n    /// The ERC-20 result type.\n    pub type Result<T> = core::result::Result<T, Error>;\n\n    #[ink(storage)]\n    pub struct Erc20Stub {}\n\n    impl Erc20Stub {\n        /// Creates a new ERC-20 contract with the specified initial supply.\n        #[ink(constructor)]\n        pub fn new(\n            _initial_supply: Balance,\n            _name: Option<String>,\n            _symbol: Option<String>,\n            _decimals: Option<u8>,\n        ) -> Self {\n            unimplemented!()\n        }\n\n        /// Returns the token name.\n        #[ink(message, selector = "0x6b1bb951")]\n        pub fn token_name(&self) -> Option<String> {\n            unimplemented!()\n        }\n\n        /// Returns the token symbol.\n        #[ink(message, selector = "0xb42c3368")]\n        pub fn token_symbol(&self) -> Option<String> {\n            unimplemented!()\n        }\n\n        /// Returns the token decimals.\n        #[ink(message, selector = "0xc64b0eb2")]\n        pub fn token_decimals(&self) -> Option<u8> {\n            unimplemented!()\n        }\n\n        /// Returns the total token supply.\n        #[ink(message, selector = "0x143862ae")]\n        pub fn total_supply(&self) -> Balance {\n            unimplemented!()\n        }\n\n        /// Returns the account balance for the specified `owner`.\n        #[ink(message, selector = "0xb7d968c9")]\n        pub fn balance_of(&self, _owner: AccountId) -> Balance {\n            unimplemented!()\n        }\n\n        /// Transfers `value` amount of tokens from the caller\'s account to account `to`.\n        #[ink(message, selector = "0x10d455c2")]\n        pub fn transfer(&mut self, _to: AccountId, _value: Balance) -> Result<()> {\n            unimplemented!()\n        }\n\n        /// Returns the amount which `spender` is still allowed to withdraw from `owner`.\n        #[ink(message, selector = "0xc04aa300")]\n        pub fn allowance(&self, _owner: AccountId, _spender: AccountId) -> Balance {\n            unimplemented!()\n        }\n\n        /// Transfers `value` tokens on the behalf of `from` to the account `to`.\n        #[ink(message, selector = "0xbb399017")]\n        pub fn transfer_from(\n            &mut self,\n            _from: AccountId,\n            _to: AccountId,\n            _value: Balance,\n        ) -> Result<()> {\n            unimplemented!()\n        }\n\n        /// Allows `spender` to withdraw from the caller\'s account multiple times, up to\n        /// the `value` amount.\n        #[ink(message, selector = "0x4ce0e831")]\n        pub fn approve(&mut self, _spender: AccountId, _value: Balance) -> Result<()> {\n            unimplemented!()\n        }\n    }\n}\n')),(0,i.kt)("p",null,"\u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\u53ef\u4ee5\u77e5\u9053\uff0c\u5728 stub \u5408\u7ea6\u4e2d\u6ca1\u6709erc20 \u5177\u4f53\u903b\u8f91\u7684\u5b9e\u73b0\uff0c\u53ea\u63d0\u4f9b\u4e86\u63a5\u53e3\u7684\u7a7a\u5b9e\u73b0\uff0c\u8be5\u5408\u7ea6\u5c06\u4f5c\u4e3a\u7236\u5408\u7ea6\u88ab\u5b50\u5408\u7ea6\u5b9e\u4f8b\u5316\uff0c\n\u5e76\u4e14\u53ef\u4ee5\u5728\u5b50\u5408\u7ea6\u4e2d\uff0c\u8c03\u7528\u7236\u5408\u7ea6\u7684\u63a5\u53e3\u3002"),(0,i.kt)("p",null,"\u6ce8\u610f\uff1a\u5728\u8be5erc20-stub \u5408\u7ea6\u4e2d\u6bcf\u4e2a\u5408\u7ea6\u65b9\u6cd5\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"selector"),"\u90fd\u8bbe\u7f6e\u4e86\u56fa\u5b9a\u7684\u503c, \u8fd9\u91cc\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"selector")," \u7684\u503c\u662f\u7531 ",(0,i.kt)("inlineCode",{parentName:"p"},'BLAKE2("IErc20::{message_func_name}".to_string().as_bytes())[0..4]'),"\n\u516c\u5f0f\u8ba1\u7b97\u5f97\u51fa\u3002"),(0,i.kt)("p",null,"\u5728 ink! \u4f53\u7cfb\u4e2d ",(0,i.kt)("inlineCode",{parentName:"p"},"selector")," \u7684\u8ba1\u7b97\u65b9\u5f0f\u8ddf solidity \u7684\u6709\u6240\u533a\u522b\uff0c\u5728 solidity \u4e2d\u662f\u5bf9 \u65b9\u6cd5\u7b7e\u540d\u505ahash\u8fd0\u7b97\uff0c \u800c\u5728 ink! \u4e2d\u6709\u4e00\u5957\u81ea\u5df1\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u6700\u7b80\u7684\u662f\u5bf9 ",(0,i.kt)("inlineCode",{parentName:"p"},"{message_func_name}"),"\n\u8fdb\u884chash\u8fd0\u7b97\uff0c\u4f46 message \u662f\u901a\u8fc7 ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::trait_definition]")," \u5b9e\u73b0\u65f6\uff0c\u91c7\u7528 {trait_name} + {message_func_name} \u6df7\u5408hash \u7684\u65b9\u5f0f\uff0c\u8be6\u7ec6\u7684\u8ba1\u7b97\u89c4\u5219\uff0c\n\u53ef\u4ee5\u67e5\u770b ink\uff01\u6e90\u7801\uff08",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/crates/lang/ir/src/ir/item_impl/callable.rs#L190%EF%BC%89%E3%80%82"},"https://github.com/paritytech/ink/blob/master/crates/lang/ir/src/ir/item_impl/callable.rs#L190\uff09\u3002")),(0,i.kt)("p",null,"\u56e0\u6b64\uff0cerc20-stub \u53ea\u9002\u7528\u4e8e metis \u4e2d\u5b9e\u73b0\u7684 erc20 \u5408\u7ea6\uff08\u901a\u8fc7 IErc20 trait \u5b9e\u73b0\uff09\u7684\u8de8\u5408\u7ea6\u8c03\u7528, \u5982\u679c\u662f\u5176\u4ed6\u65b9\u5f0f\u5b9e\u73b0\u7684 erc20 \u5408\u7ea6\uff0c\u7531\u4e8e ",(0,i.kt)("inlineCode",{parentName:"p"},"selector")," \u4e0d\u5339\u914d\uff0c\u4e0d\u80fd\u4f7f\u7528\u6b64 stub\u3002"),(0,i.kt)("h3",{id:"\u901a\u8fc7-erc20-stub-\u8de8\u5408\u7ea6\u8c03\u7528"},"\u901a\u8fc7 erc20 stub \u8de8\u5408\u7ea6\u8c03\u7528"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u5c06 ",(0,i.kt)("inlineCode",{parentName:"li"},"erc20-stub")," \u5305\u6dfb\u52a0\u5230\u65b0\u5408\u7ea6\u9879\u76ee\u7684 ",(0,i.kt)("inlineCode",{parentName:"li"},"cargo.toml")," \u4f9d\u8d56\u4e2d")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nerc20-stub = { git = "https://github.com/patractlabs/metis", default-features = false, features = ["ink-as-dependency"] }\n\n[features]\ndefault = ["std"]\nstd = [\n    "erc20-stub/std",\n]\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"\u5728\u65b0\u5408\u7ea6\u4e2d\u5b9e\u4f8b\u5316 erc20 stub")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\n\nuse ink_lang as ink;\n\n#[ink::contract]\nmod delegate {\n    use erc20_stub::Erc20Stub;\n    use ink_env::call::FromAccountId;\n    use ink_storage::Lazy;\n\n    #[ink(storage)]\n    pub struct CrossCall {\n        callee: Lazy<Erc20Stub>,\n    }\n\n    impl CrossCall {\n        #[ink(constructor)]\n        pub fn new(callee: AccountId) -> Self {\n            let token: Erc20Stub = FromAccountId::from_account_id(callee);\n            Self { callee: Lazy::new(token) }\n        }\n\n        #[ink(message)]\n        pub fn transfer(&mut self, owner: AccountId, amount: Balance) {\n            self.callee.transfer(owner, amount).unwrap();\n        }\n    }\n}\n')),(0,i.kt)("p",null,"\u5728 ink! \u5408\u7ea6\u4e2d\u53ef\u4ee5\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"FromAccountId")," \u5b9e\u4f8b\u5316\u5408\u7ea6\u5bf9\u8c61\uff08\u4e0d\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u5408\u7ea6\uff09\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u4f7f\u7528\u5408\u7ea6\u5bf9\u8c61\u5bf9\u5408\u7ea6\u65b9\u6cd5\u8fdb\u884c\u8de8\u5408\u7ea6\u8c03\u7528\u3002"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"ink_storage::Lazy")," \u7ba1\u7406\u6570\u636e\u5b9e\u4f53\uff0c\u5e76\u5728\u5b58\u50a8\u4e0a\u5ef6\u8fdf\u6267\u884c\u8bfb\u53d6/\u5199\u5165\u64cd\u4f5c, \u53ea\u6709\u5728\u786e\u5b9a\u786e\u5b9e\u9700\u8981\u8bfb\u53d6/\u5199\u5165\u65f6\uff0c\u624d\u4f1a\u5728\u5b58\u50a8\u4e0a\u6267\u884c\u3002")))}m.isMDXComponent=!0}}]);