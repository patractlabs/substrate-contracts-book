"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[6612],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),i=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},d=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=i(a),m=r,k=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return a?n.createElement(k,c(c({ref:t},d),{},{components:a})):n.createElement(k,c({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var i=2;i<o;i++)c[i]=a[i];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9633:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return i},toc:function(){return d},default:function(){return u}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),c=["components"],l={},s="Contract Decorators",i={unversionedId:"ask/guides/decorators/contract-decorator",id:"ask/guides/decorators/contract-decorator",isDocsHomePage:!1,title:"Contract Decorators",description:"Class Decorator",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/ask/guides/decorators/contract-decorator.md",sourceDirName:"ask/guides/decorators",slug:"/ask/guides/decorators/contract-decorator",permalink:"/substrate-contracts-book/en/ask/guides/decorators/contract-decorator",editUrl:"https://github.com/patractlabs/substrate-contracts-book/edit/master/docs/ask/guides/decorators/contract-decorator.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Decorators overview",permalink:"/substrate-contracts-book/en/ask/guides/decorators/overview"},next:{title:"Event Decorators",permalink:"/substrate-contracts-book/en/ask/guides/decorators/event-decorator"}},d=[{value:"Class Decorator",id:"class-decorator",children:[{value:"@contract",id:"contract",children:[]},{value:"@dynamic",id:"dynamic",children:[]}]},{value:"Property Decorator",id:"property-decorator",children:[{value:"@state",id:"state",children:[]}]},{value:"Method Decorator",id:"method-decorator",children:[{value:"@constructor",id:"constructor",children:[]},{value:"@message",id:"message",children:[]}]}],p={toc:d};function u(e){var t=e.components,a=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"contract-decorators"},"Contract Decorators"),(0,o.kt)("h2",{id:"class-decorator"},"Class Decorator"),(0,o.kt)("h3",{id:"contract"},"@contract"),(0,o.kt)("h4",{id:"usage"},"Usage"),(0,o.kt)("p",null,"@contract is a class decorator. The decorated class will automatically become an instance of the smart contract. Its sub-fields support @constructor and @message decorator decoration. "),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"@contract decorator implements ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ask/blob/1482e8f3bd475c7a86cb655bac30ed02bd15778e/ts-packages/contract-metadata/src/specs.ts#L111"},"IContract")," interface. IContract interface fulfills ABI interfaces defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"pallet-contract"),". ask! will generate methods entry points of related ABI interfaces:  deploy(): i32 call(): i32 for ",(0,o.kt)("inlineCode",{parentName:"p"},"pallet-contract"),". Therefore, only ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," class can be define per one contract entry file.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"contructor")," method in ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," can have no parameters since every contract method call requires instantiation through ",(0,o.kt)("inlineCode",{parentName:"p"},"construtor"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," class supports inheritence")),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'@contract\nexport class ERC20 {\n  @state balances: SpreadStorableMap<AccountId, UInt128> = new SpreadStorableMap<AccountId, UInt128>();\n  @state allowances: SpreadStorableMap<AccountId, SpreadStorableMap<AccountId, UInt128>> = new SpreadStorableMap<AccountId, SpreadStorableMap<AccountId, UInt128>>();\n\n  @state totalSupply: u128 = u128.Zero;\n  @state name_: string = "";\n  @state symbol_: string = ""\n  @state decimal_: u8 = 0;\n\n  constructor() {\n  }\n}\n')),(0,o.kt)("p",null,"You can inherit it in another class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'@contract\n@doc({"desc": "MyToken conract that extended erc20 contract"})\nclass MyToken extends ERC20 {\n\n  constructor() {\n    super();\n  }\n}\n')),(0,o.kt)("h3",{id:"dynamic"},"@dynamic"),(0,o.kt)("h4",{id:"usage-1"},"Usage"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@dynamic")," decorator is used to decorate the APIs of a contract that already exists on the chain. By declaring the contract interface on the chain in the @dynamic class, ask will automatically generate the corresponding cross-contract call code."),(0,o.kt)("p",null,"For details, please refer ",(0,o.kt)("a",{parentName:"p",href:"/substrate-contracts-book/en/ask/guides/cross-contract"},"Cross-Contract calling")),(0,o.kt)("h2",{id:"property-decorator"},"Property Decorator"),(0,o.kt)("h3",{id:"state"},"@state"),(0,o.kt)("h4",{id:"usage-2"},"Usage"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@state")," decorator is used to mark the specific member variable as state variable while the ones not decorated are class variables. In v0.2, all variables are default as blockchain state variables. Since we moved @storage into @contract class for better inheritence, we now have to sperate blockchain state variables and normal class properties by having @state decorator."),(0,o.kt)("h4",{id:"config"},"Config"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"lazy"),": boolean. While lazy is true, that means while a state variable gets changed multiple times in a contract call, only the last change will be synced to blockchain. The default value of lazy is true. While lazy is false, then every change made to the state variable will be synced to blockchain. "),(0,o.kt)("p",{parentName:"li"},"  eg. ",(0,o.kt)("inlineCode",{parentName:"p"},'@state({"lazy": false})')))),(0,o.kt)("h4",{id:"example-1"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'  @state balances: SpreadStorableMap<AccountId, UInt128> = new SpreadStorableMap<AccountId, UInt128>();\n  @state allowances: SpreadStorableMap<AccountId, SpreadStorableMap<AccountId, UInt128>> = new SpreadStorableMap<AccountId, SpreadStorableMap<AccountId, UInt128>>();\n\n  @state totalSupply: u128 = u128.Zero;\n  @state name_: string = "";\n  @state symbol_: string = ""\n  @state decimal_: u8 = 0;\n  @state({"lazy": false}) is_paused: boolean = false;\n')),(0,o.kt)("h2",{id:"method-decorator"},"Method Decorator"),(0,o.kt)("h3",{id:"constructor"},"@constructor"),(0,o.kt)("p",null,"This decorator is used to decorate public methods underneath ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," class as the constructor API to instantiate contract"),(0,o.kt)("h4",{id:"usage-3"},"Usage"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"least one ",(0,o.kt)("inlineCode",{parentName:"li"},"@constructor")," method must be defined per ",(0,o.kt)("inlineCode",{parentName:"li"},"@contract")," class"),(0,o.kt)("li",{parentName:"ul"},"multiple ",(0,o.kt)("inlineCode",{parentName:"li"},"@contructor")," methods per ",(0,o.kt)("inlineCode",{parentName:"li"},"@contract")," class")),(0,o.kt)("h4",{id:"parameter-scale-codec"},"Parameter ",(0,o.kt)("inlineCode",{parentName:"h4"},"<*scale-codec>")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@contructor")," method takes any number of parameters as long as the parameter implement ",(0,o.kt)("a",{parentName:"p",href:"https://docs.substrate.io/v3/advanced/scale-codec/"},"SCALE codec"),"."),(0,o.kt)("h4",{id:"return-void"},"Return ",(0,o.kt)("inlineCode",{parentName:"h4"},"<void>")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@contructor")," method doesn't support return value that means ",(0,o.kt)("inlineCode",{parentName:"p"},"void")," as the return type."),(0,o.kt)("h4",{id:"config-seletor"},"Config ",(0,o.kt)("inlineCode",{parentName:"h4"},"seletor")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"selector"),": string. Use specific selector instead of default selector generated by blake2b. "),(0,o.kt)("p",{parentName:"li"},"  eg. ",(0,o.kt)("inlineCode",{parentName:"p"},'@constructor({ "selector": "0xAABBccdd" })')))),(0,o.kt)("h4",{id:"example-2"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"    @constructor\n    default(initFlag: bool): void {\n        this.stored.flag = initFlag;\n    }\n")),(0,o.kt)("h3",{id:"message"},"@message"),(0,o.kt)("p",null,"This decorator is used to decorate public methods underneath ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," class"),(0,o.kt)("h4",{id:"usage-4"},"Usage"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@message")," method can only be declared under ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract"),"class"),(0,o.kt)("h4",{id:"parameter-scale-codec-1"},"Parameter ",(0,o.kt)("inlineCode",{parentName:"h4"},"*<scale-codec>")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This decorator can only be used with public methods in ",(0,o.kt)("inlineCode",{parentName:"li"},"@contract")," class not including static methods.")),(0,o.kt)("h4",{id:"return-scale-codec"},"Return ",(0,o.kt)("inlineCode",{parentName:"h4"},"<scale-codec>")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Return: The ",(0,o.kt)("inlineCode",{parentName:"li"},"@message")," method must have return value and the return type must implement SCALE codec.")),(0,o.kt)("h4",{id:"config-seletor-mutate-payable"},"Config ",(0,o.kt)("inlineCode",{parentName:"h4"},"seletor"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"mutate"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"payable")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"selector"),": string. Use specific selector instead of default selector generated by blake2b.\neg. ",(0,o.kt)("inlineCode",{parentName:"li"},'@message({"selector": "0xCAFEBABE" })')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"payable"),": boolean, means this message can accept msg.value.\neg. ",(0,o.kt)("inlineCode",{parentName:"li"},'@message({"selector": false})')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"mutates"),": boolean, eg.`",(0,o.kt)("inlineCode",{parentName:"li"},"means if this message can modify states of this contract.\n    eg. "),'@message({"mutate": false})`',(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"@message")," method has ",(0,o.kt)("inlineCode",{parentName:"p"},"msg")," variable to read contract state. eg. ",(0,o.kt)("inlineCode",{parentName:"p"},"msg.sender")," to get the sender of contract call")))),(0,o.kt)("h4",{id:"example-3"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  @message\n  transfer(recipient: AccountId, amount: u128): bool {\n    let from = msg.sender;\n    this._transfer(from, recipient, amount);\n    return true;\n  }\n")))}u.isMDXComponent=!0}}]);