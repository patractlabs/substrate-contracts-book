"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[7591],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4614:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],s={},l=void 0,p={unversionedId:"ask/reports/v0.2Report",id:"ask/reports/v0.2Report",isDocsHomePage:!1,title:"v0.2Report",description:"Report for Ask! v0.2",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/ask/reports/v0.2Report.md",sourceDirName:"ask/reports",slug:"/ask/reports/v0.2Report",permalink:"/substrate-contracts-book/en/ask/reports/v0.2Report",editUrl:"https://github.com/patractlabs/substrate-contracts-book/docs/ask/reports/v0.2Report.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Report for Ask! v0.1",permalink:"/substrate-contracts-book/en/ask/reports/v0.1Report"},next:{title:"Solang",permalink:"/substrate-contracts-book/en/solang/introduction"}},c=[{value:"Report for Ask! v0.2",id:"report-for-ask-v02",children:[]},{value:"Design and Implementation",id:"design-and-implementation",children:[{value:"Improve Annotation function",id:"improve-annotation-function",children:[]},{value:"Composite data type store and read",id:"composite-data-type-store-and-read",children:[]},{value:"Contract inheritance function",id:"contract-inheritance-function",children:[]},{value:"The role and implementation of @dynamic annotation",id:"the-role-and-implementation-of-dynamic-annotation",children:[]}]},{value:"How to use Ask! v0.2",id:"how-to-use-ask-v02",children:[{value:"Write a contract",id:"write-a-contract",children:[]},{value:"Compile the contract",id:"compile-the-contract",children:[]},{value:"Deployment and invocation",id:"deployment-and-invocation",children:[]}]},{value:"What has been implemented in Ask! v0.2",id:"what-has-been-implemented-in-ask-v02",children:[]}],d={toc:c};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"report-for-ask-v02"},"Report for Ask! v0.2"),(0,r.kt)("p",null,"12 weeks ago, ",(0,r.kt)("a",{parentName:"p",href:"https://patract.io"},"Patract")," submitted Kusama Treasury\u2019s ",(0,r.kt)("a",{parentName:"p",href:"https://kusama.polkassembly.io/treasury/81"},"#81")," proposal regarding Ask! v0.2, including the implementation of the goal, principle and process. In that proposal, we will complete the following functions in the v0.2:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"V0.2 Goal: Improve and enhance the function of Ask!. You can write practical contracts")),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Improve the sub-options of ",(0,r.kt)("inlineCode",{parentName:"li"},"@storage"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"@message")," annotations, and add ",(0,r.kt)("inlineCode",{parentName:"li"},"@event")," annotations."),(0,r.kt)("li",{parentName:"ul"},"Add composite data types ",(0,r.kt)("inlineCode",{parentName:"li"},"StorableMap"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"StorableArray"),"."),(0,r.kt)("li",{parentName:"ul"},"Implement contract inheritance."),(0,r.kt)("li",{parentName:"ul"},"Implement the cross-contract call function through the ",(0,r.kt)("inlineCode",{parentName:"li"},"@dynamic")," annotation."),(0,r.kt)("li",{parentName:"ul"},"Provide example contracts such as ",(0,r.kt)("inlineCode",{parentName:"li"},"ERC20"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ERC721"),", etc."))),(0,r.kt)("p",null,"Now the source code we have implemented is in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ask"},"Ask!")," project repo, and the example contract is in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ask/tree/master/examples"},"examples")," directory, Please review at ",(0,r.kt)("strong",{parentName:"p"},"v0.2-review")," branch, then we will merge into master."),(0,r.kt)("h2",{id:"design-and-implementation"},"Design and Implementation"),(0,r.kt)("p",null,"Ask! v0.2 follows the annotation parsing and compilation method used in v0.1, adding new functions."),(0,r.kt)("h3",{id:"improve-annotation-function"},"Improve Annotation function"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@storage")," annotation works on the class, and provides the ",(0,r.kt)("inlineCode",{parentName:"p"},"@packed")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@ignore")," sub-options."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"@packed")," annotation is used for data type about Map and Array . The data marked as ",(0,r.kt)("inlineCode",{parentName:"li"},"@packed")," will be stored and accessed as a whole. Its implementation theory will be described in detail in the following chapters."),(0,r.kt)("li",{parentName:"ul"},"Members of classe marked with ",(0,r.kt)("inlineCode",{parentName:"li"},"@ignore")," annotations are only saved in memory and will not be saved on the chain. After the execution environment exits, they are destroyed."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@message")," annotation works on the methods of the class, and provides the ",(0,r.kt)("inlineCode",{parentName:"p"},"mutates"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"payable")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"selector")," options. A complete ",(0,r.kt)("inlineCode",{parentName:"p"},"@message")," annotation is like: ",(0,r.kt)("inlineCode",{parentName:"p"},'@message(payable, mutates = false, selector = "0xabcdef12")')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"payable")," option indicates that the method can accept value, but it is not accepted by default. It is implemented by inserting a piece of logic before executing the method to determine whether the value is sent when the method is called. If the value is not 0, and there is no annotation as payable, When the method is executed, it will exit through the assert method."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"mutates")," option indicates whether the method can change the value of the state variable. The default value of mutates is true, and can be omitted. Its implementation is that if ",(0,r.kt)("inlineCode",{parentName:"li"},"mutates = false")," is specified, it will be executed an assert method in the ",(0,r.kt)("inlineCode",{parentName:"li"},"seal_set_storage"),", which is not allowed to write data to the chain in such a method."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"selector")," option is used to indicate that this method uses a fixed value as the selector, and does not need to be calculated and generated based on the real method name. It is used to generate the ",(0,r.kt)("inlineCode",{parentName:"li"},"selector")," of this method in metadata.json, and to call the contract entry method ",(0,r.kt)("inlineCode",{parentName:"li"},"call "),", it is also used as a judgment condition for method dispatch.\nIn their implementation, ",(0,r.kt)("strong",{parentName:"li"},"conditional checks can only be checked at runtime"),", and ",(0,r.kt)("strong",{parentName:"li"},"cannot be checked at compile time")," for the time being."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Added ",(0,r.kt)("inlineCode",{parentName:"p"},"@event")," annotation to support the event function.\nThe @event annotation is applied on the class, and the preprocessor needs to generate logic that meets the requirements for this class."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"@topic")," sub-annotation acts on a member variable of the class, which means that this variable can be filtered out on the chain. Its implementation is to store the hash of the topic variable in the topic buffer, and store all the variables in the data buffer, The value is then sent to the chain through the ",(0,r.kt)("inlineCode",{parentName:"li"},"seal_deposit_event")," method.")))),(0,r.kt)("h3",{id:"composite-data-type-store-and-read"},"Composite data type store and read"),(0,r.kt)("p",null,"We support ",(0,r.kt)("inlineCode",{parentName:"p"},"StorableMap"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"StorableArray")," about composite data types and custom class objects in v0.2 version (need to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"Codec")," interface). The composite data type supports two storage modes, ",(0,r.kt)("inlineCode",{parentName:"p"},"@spread")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@packed"),". For the ",(0,r.kt)("inlineCode",{parentName:"p"},"@spread")," storage mode, each storage unit has its own storage address, and will only be loaded when needed. For the ",(0,r.kt)("inlineCode",{parentName:"p"},"@packed")," storage mode, all storage units need to be serialized into a set of data streams and stored in a shared address. All storage units are accessed together. This mode is not suitable for large data access."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StorableMap"),":  ",(0,r.kt)("inlineCode",{parentName:"li"},"SpreadStorableMap")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"PackedStorableMap")," are encapsulated classes of Map, and add data persistence function. Two storage modes of ",(0,r.kt)("inlineCode",{parentName:"li"},"@spread")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"@packed")," are implemented respectively. The storage structure of ",(0,r.kt)("inlineCode",{parentName:"li"},"SpreadStorableMap")," is as follows:\n",(0,r.kt)("img",{parentName:"li",src:"https://user-images.githubusercontent.com/2844215/120952420-9172ee80-c77d-11eb-90b8-501fe679fdee.png",alt:"SpreadStorableMap"}))),(0,r.kt)("p",null,"The number of data stored in this Map and the Hash of the first storage location are saved in ",(0,r.kt)("inlineCode",{parentName:"p"},"MapEntry"),". Its storage location is in ",(0,r.kt)("inlineCode",{parentName:"p"},"Hash(prefix)"),", and this storage location will be exported to metadata.json for access of external apps."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"KVStore")," is a specific stored K/V value. In addition to storing Key/Value, each KVStore also stores the hash of the next/prev node. If it is a tail node, then the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"NullHash "),", that is (",(0,r.kt)("inlineCode",{parentName:"p"},"0x0000000000000000000000000000000000"),"); if it is a head node, then the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"prev")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"NullHash"),". Through a doubly linked list, external Apps can iteratively access all data. The storage location of each ",(0,r.kt)("inlineCode",{parentName:"p"},"KVStore")," is determined by the following rules: ",(0,r.kt)("inlineCode",{parentName:"p"},"Hash(prefix + key)"),". The storage structure of ",(0,r.kt)("inlineCode",{parentName:"p"},"PackedStorableMap")," is as follows:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/2844215/120952350-6be5e500-c77d-11eb-8d97-975961538303.png",alt:"PackedStorableMap"})),(0,r.kt)("p",null,"The storage model of Packed is different from Spread, all its data is loaded/stored all at once. The usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"MapEntry")," is the same as the Spread model. All its data is stored in a fixed location under ",(0,r.kt)("inlineCode",{parentName:"p"},'Hash(prefix + ".value")')," through the method of ",(0,r.kt)("inlineCode",{parentName:"p"},"u8[]"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StorableArray"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"SpreadStorableArray")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"PackedStorableArray")," are the encapsulation of the Array class, and added data persistence function, respectively implementing the two storage modes of ",(0,r.kt)("inlineCode",{parentName:"li"},"@spread")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"@packed"),".")),(0,r.kt)("p",null,"The storage structure of ",(0,r.kt)("inlineCode",{parentName:"p"},"SpreadStorableArray")," is as follows:\n",(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/2844215/120952366-730cf300-c77d-11eb-82ce-2c2b23e5ce50.png",alt:"SpreadStorableArray"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ArrayEntry")," saves the number of elements of this Array ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," and the number of bytes after serialization ",(0,r.kt)("inlineCode",{parentName:"p"},"rawBytesCount")," (this value is ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," in Spread model). Its storage location is in ",(0,r.kt)("inlineCode",{parentName:"p"},"Hash(prefix)"),", And this storage location will be exported to metadata.json for external apps to access. The storage location of each element is determined by the method of ",(0,r.kt)("inlineCode",{parentName:"p"},"Hash(prefix + index)"),", and the serialized data of the element is stored in this location."),(0,r.kt)("p",null,"The storage structure of ",(0,r.kt)("inlineCode",{parentName:"p"},"PackedStorableArray")," is as follows:\n",(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/2844215/120952315-5cff3280-c77d-11eb-9b64-6bab108a7249.png",alt:"PackedStorableArray"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ArrayEntry")," stores the number of elements in this Array ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," and the number of bytes after serialization ",(0,r.kt)("inlineCode",{parentName:"p"},"rawBytesCount"),". In this storage mode, all elements are stored under the same address ",(0,r.kt)("inlineCode",{parentName:"p"},'Hash(prefix + ".values ")'),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Composite object"),(0,r.kt)("inlineCode",{parentName:"li"},"Composite object")," is a serializable class, that is, a class that implements the ",(0,r.kt)("inlineCode",{parentName:"li"},"Codec")," interface, which can be stored on the chain. For example, the following class:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'class EmbedObj implements Codec {\n\n   a: i8;\n   b: string;\n   c: u128;\n\n   constructor(a: i8 = 0, b: string = "", c: u128 = u128.Zero) {\n     this.a = a;\n     this.b = b;\n     this.c = c;\n   }\n\n   toU8a(): u8[] {\n     let bytes = new Array<u8>();\n     let aWrap = new Int8(this.a);\n     let bWrap = new ScaleString(this.b);\n     let cWrap = new UInt128(this.c);\n\n     bytes = bytes.concat(aWrap.toU8a())\n                 .concat(bWrap.toU8a())\n                 .concat(cWrap.toU8a());\n     return bytes;\n   }\n\n   encodedLength(): i32 {\n     let aWrap = new Int8(this.a);\n     let bWrap = new ScaleString(this.b);\n     let cWrap = new UInt128(this.c);\n\n     return aWrap.encodedLength() + bWrap.encodedLength() + cWrap.encodedLength();\n   }\n\n   populateFromBytes(bytes: u8[], index: i32 = 0): void {\n     let aWrap = new Int8();\n     aWrap.populateFromBytes(bytes, index);\n     index += aWrap.encodedLength();\n\n     let bWrap = new ScaleString();\n     bWrap.populateFromBytes(bytes, index);\n     index += bWrap.encodedLength();\n\n     let cWrap = new UInt128();\n     cWrap.populateFromBytes(bytes, index);\n\n     this.a = aWrap.unwrap();\n     this.b = bWrap.toString();\n     this.c = cWrap.unwrap();\n   }\n\n   eq(other: EmbedObj): bool {\n     return this.a == other.a && this.b == other.b && this.c == other.c;\n   }\n\n   notEq(other: EmbedObj): bool {\n     return !this.eq(other);\n   }\n }\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EmbedObj")," can be used in the storage class annotated by ",(0,r.kt)("inlineCode",{parentName:"p"},"@storage")," to save a set of related information."),(0,r.kt)("h3",{id:"contract-inheritance-function"},"Contract inheritance function"),(0,r.kt)("p",null,"The inheritance function makes contract reuse possible. The contract inheritance of v0.2 follows the following basic principles:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For the ",(0,r.kt)("inlineCode",{parentName:"li"},"@constructor")," method, use the ",(0,r.kt)("inlineCode",{parentName:"li"},"@constructor")," method defined in the subclass contract. If it is not provided in the subclass, then the final generated contract will not provide ",(0,r.kt)("inlineCode",{parentName:"li"},"@constructor"),", even if it is already defined in the parent class. The parent class cannot know the member variables in the subclass, and cannot completely initialize the contract correctly."),(0,r.kt)("li",{parentName:"ul"},"For the ",(0,r.kt)("inlineCode",{parentName:"li"},"@message")," method, use the union of all messages in the parent class and the child class."),(0,r.kt)("li",{parentName:"ul"},"For the ",(0,r.kt)("inlineCode",{parentName:"li"},"@storage")," class, no additional processing is done, and the developer decides how to use it.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The realization theory of inheritance function")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The sub-contract must be located in the compiled entry file. The main contract entry is determined by analyzing the description information of the class marked with @contract annotations. It should mention that the every entry function can only have one contract with @contract.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"clzPrototype.declaration.range.source.sourceKind == SourceKind.USER_ENTRY\n && AstUtil.hasSpecifyDecorator(clzPrototype.declaration, ContractDecoratorKind.CONTRACT);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"After locating the main contract class, analyze the inheritance relationship of the contract class, parse the parent class to obtain @message, and then perform this operation recursively through the contract method message everywhere.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"public resolveContractClass(): void {\n  this.classPrototype.instanceMembers &&\n  this.classPrototype.instanceMembers.forEach((instance, _) => {\n      if (ElementUtil.isCntrFuncPrototype(instance)) {\n        this.cntrFuncDefs.push(new ConstructorDef(<FunctionPrototype>instance));\n      }\n      if (ElementUtil.isMessageFuncPrototype(instance)) {\n        let msgFunc = new MessageFunctionDef(<FunctionPrototype>instance);\n        this.msgFuncDefs.push(msgFunc);\n      }\n  });\n  this.resolveBaseClass(this.classPrototype);\n}\n\nprivate resolveBaseClass(sonClassPrototype: ClassPrototype): void {\n  if (sonClassPrototype.basePrototype) {\n      let basePrototype = sonClassPrototype.basePrototype;\n      basePrototype.instanceMembers &&\n      basePrototype.instanceMembers.forEach((instance, _) => {\n          if (ElementUtil.isMessageFuncPrototype(instance)) {\n            let msgFunc = new MessageFunctionDef(<FunctionPrototype>instance);\n            this.msgFuncDefs.push(msgFunc);\n          }\n      });\n      this.resolveBaseClass(basePrototype);\n  }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The generation methods of @message and @storage refer to the single contract.")),(0,r.kt)("h3",{id:"the-role-and-implementation-of-dynamic-annotation"},"The role and implementation of @dynamic annotation"),(0,r.kt)("p",null,"The @dynamic annotation is used to describe the message information of a contract, which has been deployed and instantiated. Other contracts can interact with this contract through @dynamic declarations. The @dynamic annotation acts on the class, The pre-compiler will generate cross-contract call logic for the @dynamic class."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"the implementation theory of @dynamic")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Find the corresponding interface class through the @dynamic annotation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"if (ElementUtil.isDynamicClassPrototype(element)) {\n  let dynamicInterpreter = new DynamicIntercepter(<ClassPrototype>element);\n  this.dynamics.push(dynamicInterpreter);\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Then analyze the interface class, and then generate the implementation call method for each method. The template generated by the implementation call class is as follows. Where addr is the address of the contract being called.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const dynamicTpl = `class {{className}} {\n    addr: AccountId;\n    constructor(addr: AccountId) {\n        this.addr = addr;\n    }\n    {{#each functions}}\n    {{#generateFunction .}}{{/generateFunction}}\n    {{/each}}\n}`;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The most important one is to implement calling classes for methods. Generated by the generateFunction method. generateFunction analyzes the parameters of the method, and then converts the parameters to the codec type. Then do cross-contract call through Abi.encode.")),(0,r.kt)("p",null,"If the original interface method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"transfer(recipient: AccountId, amount: u128): bool {\n  return true;\n}\n")),(0,r.kt)("p",null,"The generated call method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'transfer(p0: AccountId,p1: u128): bool {\n  let data = Abi.encode("transfer", [p0,new UInt128(p1)]);\n  let rs = this.addr.call(data);\n  return BytesReader.decodeInto<Bool>(rs).unwrap();\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set the contract address for the contract, and then implement the call through Abi.encode.")),(0,r.kt)("h2",{id:"how-to-use-ask-v02"},"How to use Ask! v0.2"),(0,r.kt)("p",null,"The Ask! project is not yet released, so we need to clone the source code locally.\n",(0,r.kt)("inlineCode",{parentName:"p"},"git clone https://github.com/patractlabs/ask"),"  "),(0,r.kt)("p",null,"After the clone is completed, please perform the following steps:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ask\n$ yarn\n")),(0,r.kt)("p",null,"In the v0.2 project, we have provided two projects ",(0,r.kt)("inlineCode",{parentName:"p"},"erc20")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"erc721")," in the examples directory. Below we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"erc20")," project to illustrate how to use the new features of v0.2."),(0,r.kt)("h3",{id:"write-a-contract"},"Write a contract"),(0,r.kt)("p",null,"In the example erc20 contract, we used the following features in the v0.2 version:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Contract inheritance")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Event sent in contract")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use composite storage type: Map")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"mutates = false")," and other annotations"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ERC20.ts contract provided here is only used to demonstrate the use and capabilities of Ask! and cannot be used as a formal Token contract.")),(0,r.kt)("h4",{id:"erc20-contract"},"ERC20 contract"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ERC20.ts")," is a base class that fit to the ERC20 standard. It encapsulates reusable ERC20 interfaces, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"approve"),", etc. It defines the storage structure used by the contract, as well as the events ",(0,r.kt)("inlineCode",{parentName:"p"},"Transfer")," and ",(0,r.kt)("inlineCode",{parentName:"p"}," Approval"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'@contract\nexport class ERC20 {\n  private storage: ERC20Storage;\n\n  constructor() {\n    this.storage = new ERC20Storage();\n  }\n\n  @constructor\n  default(name: string = "", symbol: string = ""): void {\n    this.storage.name = name;\n    this.storage.symbol = symbol;\n    this.storage.decimal = 18;\n    this.storage.totalSupply = u128.Zero;\n  }\n\n  @message(mutates = false)\n  name(): string {\n    return this.storage.name;\n  }\n\n  @message(mutates = false)\n  symbol(): string {\n    return this.storage.symbol;\n  }\n\n  @message(mutates = false)\n  decimal(): u8 {\n    return this.storage.decimal;\n  }\n\n  @message(mutates = false)\n  totalSupply(): u128 {\n    return this.storage.totalSupply;\n  }\n\n  @message(mutates = false)\n  balanceOf(account: AccountId): u128 {\n    return this.storage.balances.get(account).unwrap();\n  }\n\n  @message\n  transfer(recipient: AccountId, amount: u128): bool {\n    let from = msg.sender;\n    this._transfer(from, recipient, amount);\n    return true;\n  }\n// .........\n}\n')),(0,r.kt)("p",null,"If we already have an ERC20 contract, it will be very simple for us to issue new Tokens, such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"MyToken")," issued in the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts")," contract (just to demonstrate how to use Ask! to issue ERC20 Tokens, without permission control logic):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { AccountId, u128 } from "ask-lang";\nimport {ERC20} from "./ERC20";\n\n@contract\nclass MyToken extends ERC20 {\n\n  constructor() {\n    super();\n  }\n\n  @constructor\n  default(name: string = "", symbol: string = ""): void {\n    super.default(name, symbol);\n  }\n\n  @message\n  mint(to: AccountId, amount: u128): void {\n    this._mint(to, amount);\n  }\n\n  @message\n  burn(from: AccountId, amount: u128): void {\n    this._burn(from, amount);\n  }\n}\n')),(0,r.kt)("h3",{id:"compile-the-contract"},"Compile the contract"),(0,r.kt)("p",null," Use the following command to compile our contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx ask examples/erc20/index.ts\n")),(0,r.kt)("p",null,"After the compilation is successful, the ",(0,r.kt)("inlineCode",{parentName:"p"},"target.wasm")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata.json")," files will be generated in the ",(0,r.kt)("inlineCode",{parentName:"p"},"examples/erc20/target/")," directory."),(0,r.kt)("h3",{id:"deployment-and-invocation"},"Deployment and invocation"),(0,r.kt)("p",null,"We deploy and test contract functions in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/europa"},"Europa")," sandbox environment, using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/polkadot-js/apps"},"polkadot-js")," on the front end as an interactive interface. The test steps are as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"First, we follow the instructions of ",(0,r.kt)("inlineCode",{parentName:"p"},"Europa")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"plokadot-js")," to start nodes and services.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In the contract interface of ",(0,r.kt)("inlineCode",{parentName:"p"},"polkadot-js"),", upload the ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata.json")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"target.wasm")," files under ",(0,r.kt)("inlineCode",{parentName:"p"},"erc20/target"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Deploy the uploaded contract and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," method to issue tokens.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Call ",(0,r.kt)("inlineCode",{parentName:"p"},"mint"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"approve"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"burn")," and other methods to operate ERC20 Token."))),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/2844215/120952438-9cc61a00-c77d-11eb-9745-454f977184be.gif",alt:null})),(0,r.kt)("p",null,"So far, we have successfully issued ERC20 tokens through inheritance."),(0,r.kt)("h2",{id:"what-has-been-implemented-in-ask-v02"},"What has been implemented in Ask! v0.2"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Improve the sub-options of ",(0,r.kt)("inlineCode",{parentName:"li"},"@storage"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"@message")," annotations, and add ",(0,r.kt)("inlineCode",{parentName:"li"},"@event")," annotations."),(0,r.kt)("li",{parentName:"ul"},"Add composite data types ",(0,r.kt)("inlineCode",{parentName:"li"},"StorableMap"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"StorableArray"),"."),(0,r.kt)("li",{parentName:"ul"},"Implement contract inheritance."),(0,r.kt)("li",{parentName:"ul"},"Implement the cross-contract call function through the ",(0,r.kt)("inlineCode",{parentName:"li"},"@dynamic")," annotation."),(0,r.kt)("li",{parentName:"ul"},"Provide example contracts such as ",(0,r.kt)("inlineCode",{parentName:"li"},"erc20"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"erc721"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"crosscall"),", etc.")))}m.isMDXComponent=!0}}]);