"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[222],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,k=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9349:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={},s=void 0,p={unversionedId:"ask/reports/v0.3Report",id:"ask/reports/v0.3Report",isDocsHomePage:!1,title:"v0.3Report",description:"Ask! v0.3 Report",source:"@site/docs/ask/reports/v0.3Report.md",sourceDirName:"ask/reports",slug:"/ask/reports/v0.3Report",permalink:"/substrate-contracts-book/ask/reports/v0.3Report",editUrl:"https://github.com/patractlabs/substrate-contracts-book/edit/master/docs/ask/reports/v0.3Report.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"v0.2Report",permalink:"/substrate-contracts-book/ask/reports/v0.2Report"},next:{title:"Solang",permalink:"/substrate-contracts-book/solang/introduction"}},c=[{value:"Ask! v0.3 Report",id:"ask-v03-report",children:[]},{value:"Design and implementations",id:"design-and-implementations",children:[{value:"New Project Management Command-line Tool <code>ask-cli</code>",id:"new-project-management-command-line-tool-ask-cli",children:[]},{value:"Performance optimization",id:"performance-optimization",children:[]},{value:"2.6 Enhance <code>Event</code> syntax",id:"26-enhance-event-syntax",children:[]},{value:"Provide system parameter types in custom env .",id:"provide-system-parameter-types-in-custom-env-",children:[]},{value:"Unit Testing and Documentation.",id:"unit-testing-and-documentation",children:[]}]},{value:"Start using Ask! v0.3",id:"start-using-ask-v03",children:[{value:"Quick start",id:"quick-start",children:[]},{value:"Compile",id:"compile",children:[]},{value:"Deployment and contract calls",id:"deployment-and-contract-calls",children:[]}]},{value:"Implemented features of Ask! v0.3:",id:"implemented-features-of-ask-v03",children:[]}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"ask-v03-report"},"Ask! v0.3 Report"),(0,o.kt)("p",null,"12 weeks ago, ",(0,o.kt)("a",{parentName:"p",href:"https://patract.io"},"Patract")," submitted ",(0,o.kt)("a",{parentName:"p",href:"https://kusama.polkassembly.io/treasury/101"},"#101 treasury proposal")," of Ask! for proposed features including implementation designs, principles and process. In v0.3 we are implementing the following features:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Goals for ask! v0.3: providing cli management tools and better ask! coding experience and execution performance"),"\nnew project management tool: ",(0,o.kt)("inlineCode",{parentName:"p"},"ask-cli"),"\nbetter execution performance\nsystem parameter types in custom env\nunit test and documentation")),(0,o.kt)("p",null,"The code of implementation is in our git repo ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ask"},"Ask!"),". For contract examples written in Ask!, please refer ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ask/tree/master/examples"},"examples"),". You can check documentation on ",(0,o.kt)("a",{parentName:"p",href:"https://docs.patract.io/en/ask/introduction"},"docs.patract.io"),". Please review it on branch ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ask/tree/v0.3-review"},"v0.3-review")," as it will be merged into master later."),(0,o.kt)("h2",{id:"design-and-implementations"},"Design and implementations"),(0,o.kt)("p",null,"Based upon Ask! v0.2, we introduced ",(0,o.kt)("inlineCode",{parentName:"p"},"ask-cli")," as the the command line tool to manage contract development. We optimized the Ask! execution performance. Additionally, we also provided related documentations."),(0,o.kt)("h3",{id:"new-project-management-command-line-tool-ask-cli"},"New Project Management Command-line Tool ",(0,o.kt)("inlineCode",{parentName:"h3"},"ask-cli")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ask-cli")," is the Ask! command-line tool for managing the contract compilation lifecycling.\nIt provides ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"compile")," functions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ask-cli init"),":",(0,o.kt)("br",{parentName:"li"}),(0,o.kt)("inlineCode",{parentName:"li"},"init")," is used for initializing Ask! contract projects. ",(0,o.kt)("inlineCode",{parentName:"li"},"init")," read from ",(0,o.kt)("a",{parentName:"li",href:"https://raw.githubusercontent.com/patractlabs/ask-cli/main/depens.json"},"Dependencies")," for latest project and updates corresponding NPM packages and the creates local directory structured like:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 contracts\n\u251c\u2500\u2500 node_modules\n\u2514\u2500\u2500 package.json\n")),(0,o.kt)("p",null,"Inside the dir, ",(0,o.kt)("inlineCode",{parentName:"p"},"contracts")," contains the source code of contract. ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," is generated once compilation is done and contains ",(0,o.kt)("inlineCode",{parentName:"p"},".wasm")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.json"),". If the compilation is done in ",(0,o.kt)("inlineCode",{parentName:"p"},"debug")," mode, ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," may contain other files as well.  "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ask-cli compile [--release|--debug] contracts/Hello.ts"),":\n",(0,o.kt)("inlineCode",{parentName:"li"},"compile")," is used to compile targeting file of contract source code and generate ",(0,o.kt)("inlineCode",{parentName:"li"},".wasm")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"metadata.json")," in ",(0,o.kt)("inlineCode",{parentName:"li"},"build")," directory.\n",(0,o.kt)("inlineCode",{parentName:"li"},"compile")," contains two compiling modes: ",(0,o.kt)("inlineCode",{parentName:"li"},"release")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"debug"),". While ",(0,o.kt)("inlineCode",{parentName:"li"},"--release")," is the defaul option to compile under highest level of optimization and compression. ",(0,o.kt)("inlineCode",{parentName:"li"},"--debug")," is the debug mode which will generate other files created in compilation.")),(0,o.kt)("p",null,"For detailed usages, please refer related chapters in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ask/blob/v0.3-dev/docs/Quickstart.md"},"QuickStart"),"."),(0,o.kt)("h3",{id:"performance-optimization"},"Performance optimization"),(0,o.kt)("h4",{id:"21-merging-the-functions-of-storage-into-contract-simplifying-the-process-of-state-variable-definition"},"2.1 Merging the functions of @storage into @contract, simplifying the process of state variable definition."),(0,o.kt)("p",null,"Before v0.3, state variables are defined seperately in @storage, which does't support contract inheritence well. Therefore in v0.3, we put stated varaible definitions directly in @contract and removed @storage."),(0,o.kt)("p",null,"In v0.2, before we define ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," class, we need to define ",(0,o.kt)("inlineCode",{parentName:"p"},"@storage")," class, then define ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," property in ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract"),". However, ",(0,o.kt)("inlineCode",{parentName:"p"},"storage")," is a property in ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," class. If we want to add storage property in child class during inheritence, we would redefine the ",(0,o.kt)("inlineCode",{parentName:"p"},"@storage")," class. in v0.3, for inheritence, if we want to add a variable we can simply add it in subclass."),(0,o.kt)("p",null,"eg. in v0.2:"),(0,o.kt)("p",null,"For inheritence with extra properties in ",(0,o.kt)("inlineCode",{parentName:"p"},"@stroage")," in v0.2:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@storage\nclass ERC20StoragePausable extends ERC20Storage{\n    is_pausable: bool;\n}\n\n@contract\nexport class ERC20Pausable {\n  private storage: ERC20StoragePausable;}\n")),(0,o.kt)("p",null,"In v0.3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@contract\nexport class ERC20Pausable extends ERC20 {\n  @state is_pausable: bool = false;}\n")),(0,o.kt)("p",null,"At the same time, we introduced @state decorator to mark the specific member variable as state variable while the ones not decorated are class variables. In v0.2, all variables are default as blockchain state variables. Since we moved ",(0,o.kt)("inlineCode",{parentName:"p"},"@storage")," into ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," class for better inheritence, we now have to sperate blockchain state variables and normal class properties by having ",(0,o.kt)("inlineCode",{parentName:"p"},"@state")," decorator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@storage\nclass ERC20Storage {\n  balances: SpreadStorableMap<AccountId, UInt128>;\n  allowances: SpreadStorableMap<AccountId, SpreadStorableMap<AccountId, UInt128>>;\n\n    totalSupply: u128;\n    name: string;\n    symbol: string;\n    decimal: u8;\n}\n\n@contract\nexport class ERC20 {\n  private storage: ERC20Storage;}\n")),(0,o.kt)("p",null,"In v0.3, we now define storage directly inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," class with ",(0,o.kt)("inlineCode",{parentName:"p"},"@state"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'@contract\nexport class ERC20 {\n  @state balances: SpreadStorableMap<AccountId, UInt128> = new SpreadStorableMap<AccountId, UInt128>();\n  @state allowances: SpreadStorableMap<AccountId, SpreadStorableMap<AccountId, UInt128>> = new SpreadStorableMap<AccountId, SpreadStorableMap<AccountId, UInt128>>();\n\n  @state totalSupply: u128 = u128.Zero;\n  @state name_: string = "";\n  @state symbol_: string = ""\n  @state decimal_: u8 = 0;}\n')),(0,o.kt)("h4",{id:"22-optimize-key-generation-logic-for-storing-state-variables-use-sequential-hash-data-instead-of-hash-data-generated-by-dynamic-hashstring"},"2.2 Optimize key generation logic for storing state variables. Use sequential hash data instead of hash data generated by dynamic ",(0,o.kt)("inlineCode",{parentName:"h4"},"hash(string)")),(0,o.kt)("p",null,"While a contract is inherited, all @state decorated variables are sorted by their definition order and baseclass/subclass relationship. And the order sequence number will serve as the id of state changes in storages."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"First, the compiler will first locate the entry of the contract")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"      this.program.elementsByName.forEach((element, _) => {\n            let contractNum = 0;\n            if (ElementUtil.isTopContractClass(element)) {\n                contractNum++;\n                this.contract = new ContractInterpreter(<ClassPrototype>element);\n            }\n        });\n")),(0,o.kt)("p",null,"Then iterate through the base classes to push the objects to be stored into stack:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"}," private resolveBaseClass(classPrototype: ClassPrototype): void {\n  if (classPrototype.basePrototype) {\n      let basePrototype = classPrototype.basePrototype;\n      basePrototype.instanceMembers &&\n          basePrototype.instanceMembers.forEach((instance, _) => {\n              if (ElementUtil.isField(instance)) {\n                  let fieldDef = new FieldDef(<FieldPrototype>instance);\n                  if (!fieldDef.decorators.ignore) {\n                      this.storeFields.push(fieldDef);\n                  }\n              }\n          });\n      this.resolveBaseClass(basePrototype);\n  }\n}\n")),(0,o.kt)("p",null,"When a new ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," class inherits from parent ",(0,o.kt)("inlineCode",{parentName:"p"},"@contract")," as a child class, the new ",(0,o.kt)("inlineCode",{parentName:"p"},"@state")," properties defined in child class will also be sequence."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'@contract\nexport class ERC20 {\n  @state balances: SpreadStorableMap<AccountId, UInt128> = new SpreadStorableMap<AccountId, UInt128>();\n  @state allowances: SpreadStorableMap<AccountId, SpreadStorableMap<AccountId, UInt128>> = new SpreadStorableMap<AccountId, SpreadStorableMap<AccountId, UInt128>>();\n\n  @state totalSupply: u128 = u128.Zero;\n  @state name_: string = "";\n  @state symbol_: string = ""\n  @state decimal_: u8 = 0;\n}\n')),(0,o.kt)("p",null,"Adding a new class property with ",(0,o.kt)("inlineCode",{parentName:"p"},"@state")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"class MyToken extends ERC20 {\n  @state is_paused:bool = false;}\n")),(0,o.kt)("p",null,"In the compiled ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.json"),", we can the new ",(0,o.kt)("inlineCode",{parentName:"p"},"@state is_paused")," is sequenced correctly under inheritence:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'        {\n          "name": "symbol_",\n          "layout": {\n            "key": "0x0000000000000000000000000000000000000000000000000000000000000005",\n            "ty": 1\n          }\n        },\n        {\n          "name": "decimal_",\n          "layout": {\n            "key": "0x0000000000000000000000000000000000000000000000000000000000000006",\n            "ty": 2\n          }\n        },\n        {\n          "name": "is_pause",\n          "layout": {\n            "key": "0x0000000000000000000000000000000000000000000000000000000000000007",\n            "ty": 5}}\n')),(0,o.kt)("h4",{id:"23-during-a-contract-message-call-when-a-state-variable-is-mutated-multiple-times-reduce-the-number-of-seal_set_stroage-calls"},"2.3 During a contract message call, when a state variable is mutated multiple times, reduce the number of ",(0,o.kt)("inlineCode",{parentName:"h4"},"seal_set_stroage")," calls"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@state")," introduces ",(0,o.kt)("inlineCode",{parentName:"p"},"lazy")," option as:  ",(0,o.kt)("inlineCode",{parentName:"p"},'@state({"lazy": false})'),"\nWhile ",(0,o.kt)("inlineCode",{parentName:"p"},"lazy")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", that means while a state variable gets changed multiple times in a contract call, only the last change will be synced to blockchain. The default value of ",(0,o.kt)("inlineCode",{parentName:"p"},"lazy")," is true. While ",(0,o.kt)("inlineCode",{parentName:"p"},"lazy")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", then every change made to the state variable will be synced to blockchain. "),(0,o.kt)("p",null,"Basic principle of implmentation:\nFor every state varible with ",(0,o.kt)("inlineCode",{parentName:"p"},"lazy")," set as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"setter")," function generated by compiler will only updates the value changed in memory; Meanwhile, compiler also creates a ",(0,o.kt)("inlineCode",{parentName:"p"},"__commit__")," function. If the state variables within this function ever gets changed before the contract call is done, the updated values will be synced to blockchain. "),(0,o.kt)("p",null,"Using object type bool as the example, when ",(0,o.kt)("inlineCode",{parentName:"p"},"lazy")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"setter")," method generated follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'  set vbool(newvalue: bool) {\n      this._vbool = new Bool(newvalue);\n      const st = new Storage(new Hash("0x0000000000000000000000000000000000000000000000000000000000000001"));\n      st.store<Bool>(this._vbool!);\n  }\n  \n')),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"lazy")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"setter")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"__commit__")," functions generated are:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"}," set vbool(v: bool) {\n     this._vbool = new _lang.Bool(v);\n }\n __commit_storage__(): void { \n if (this._vbool !== null) {\n     const st = new _lang.Storage(new _lang.Hash([0x0000000000000000000000000000000000000000000000000000000000000001]));\n     st.store<_lang.Bool>(this._vbool!);\n      }\n }\n")),(0,o.kt)("p",null,"To verify, write a simple contract as follows. Because we do not state ",(0,o.kt)("inlineCode",{parentName:"p"},'@state({"lazy": false})')," on",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"@state flag: bool"),". Even we are modifying it multiple times in ",(0,o.kt)("inlineCode",{parentName:"p"},"flip()"),". It will call ",(0,o.kt)("inlineCode",{parentName:"p"},"seal_set_storaqe")," once. You can monitor it in Europa logs that ",(0,o.kt)("inlineCode",{parentName:"p"},"seal_set_storaqe")," only gets called once."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'@contract\nclass Flipper {\n    @state flag: bool;\n\n    constructor() {\n    }\n\n    @constructor\n    default(initFlag: bool): void {\n        this.flag = initFlag;\n    }\n\n    @message\n    flip(): void {\n        const v = this.flag;\n        this.flag = !v;\n        this.flag = !v;\n        this.flag = !v;\n    }\n\n    @message({"mutates": false})\n    get(): bool {\n        return this.flag;\n    }\n}\n')),(0,o.kt)("p",null,"It the log printed by Europa,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"1: NestedRuntime {\n    ext_result: [success] ExecReturnValue { flags: 0, data:  },\n    caller: d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d (5GrwvaEF...),\n    self_account: 9b1b5687f0e868a1ab3b5536efbe3dfe14aea17570d605c01ef868d5d53e51c0 (5Fa5QB7h...),\n    selector: 0x633aa551,\n    args: None,\n    value: 0,\n    gas_limit: 99827000000,\n    gas_left: 253627,\n    env_trace: [\n        seal_input(Some(0x633aa551)),\n        seal_get_storage((Some(0x0000000000000000000000000000000000000000000000000000000000000001), Some(0x00))),\n        seal_set_storage((Some(0x0000000000000000000000000000000000000000000000000000000000000001), Some(0x01))),\n    ],\n    sandbox_result_ok: Value(\n        I32(\n            0,\n        ),\n    ),\n    nests: [],\n}\n")),(0,o.kt)("p",null,"The selector is defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.json")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'      {\n        "mutates": true,\n        "payable": false,\n        "args": [],\n        "returnType": null,\n        "docs": [\n          ""\n        ],\n        "name": [\n          "flip"\n        ],\n        "selector": "0x633aa551"\n      },\n')),(0,o.kt)("h4",{id:"24-define-the-export-format-of-map-and-array-in-metadatajson"},"2.4 Define the export format of Map and Array in metadata.json"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The export format of Array have two parts: type definition and store definition. In ask!, by default, the array is mutable length array. The default strucutre definition is ",(0,o.kt)("inlineCode",{parentName:"li"},"SequenceDef")," that defines array as sequence and sepcify the object type in array. It also defines storage modes as pack/spread. In addition, for type array, it can pre-allocate some space by default. The type is ",(0,o.kt)("inlineCode",{parentName:"li"},"Arraydef")," whith specification of capacity for pre-allocated space. ",(0,o.kt)("inlineCode",{parentName:"li"},"len")," is set to 0 by default meaning no fixed length is specified. ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"\nexport interface Type extends ToMetadata {\n    typeKind(): TypeKind;\n\n    toMetadata(): ITypeDef;\n}\n\nexport class SequenceDef implements Type {\n    constructor(public readonly type: number) {}\n\n    typeKind(): TypeKind {\n        return TypeKind.Sequence;\n    }\n\n    toMetadata(): ISequenceDef {\n        return {\n            def: {\n                sequence: {\n                    type: this.type,\n                },\n            },\n        };\n    }\n}\n\nexport class ArrayDef implements Type {\n    constructor(public readonly len: number, public readonly type: number) {}\n\n    typeKind(): TypeKind {\n        return TypeKind.Array;\n    }\n\n    toMetadata(): IArrayDef {\n        return {\n            def: {\n                array: {\n                    len: this.len,\n                    type: this.type,\n                },\n            },\n        };\n    }\n}\n\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SequenceDef")," generates the following format\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n      "def": {\n        "sequence": {\n          "type": 4\n        }\n      }\n }\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ArrayDef")," generates the following format\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' {\n      "def": {\n        "array": {\n          "len": 32,\n          "type": 2\n        }\n      }\n    }\n')),(0,o.kt)("p",null,"Their storage structures looks like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "ages",\n  "layout": {\n    "struct": {\n      "fields": [\n        {\n          "name": "len",\n          "layout": {\n            "key": "0x0000000000000000000000000000000000000000000000000000000000000002",\n            "ty": 3\n          }\n        },\n        {\n          "name": "elems",\n          "layout": {\n            "offset": "0x0000000000000000000000000000000000000000000000000000000000000002",\n            "len": 0,\n            "cellsPerElem": 1,\n            "layout": {\n              "key": "0x0000000000000000000000000000000000000000000000000000000000000002",\n              "ty": 3\n            },\n            "storemode": "spread"\n          }\n        }\n      ]\n    }\n  }\n}\n')),(0,o.kt)("p",null,"The differences between  SequenceDef without capacity limit and ArrayDef with capacity limit: ",(0,o.kt)("inlineCode",{parentName:"p"},"len")," of SequenceDef is 0 while ",(0,o.kt)("inlineCode",{parentName:"p"},"len")," of ArrayDef is not 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "name": "elems",\n  "layout": {\n    "offset": "0x0000000000000000000000000000000000000000000000000000000000000002",\n    "len": 0,\n    "cellsPerElem": 1,\n    "layout": {\n      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",\n      "ty": 3\n    },\n    "storemode": "spread"\n}\n')),(0,o.kt)("p",null,"To verify, write a simple contract by importing ",(0,o.kt)("inlineCode",{parentName:"p"},"PackedStorableArray"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { PackedStorableArray, UInt128} from "ask-lang";\n\n@contract\nclass Flipper {\n    @state flag: bool;\n\n    @state\n    @packed({ "capacity": 128 })\n    packeArr: PackedStorableArray<UInt128> = new PackedStorableArray<UInt128>();\n\n    @state\n    aArr: PackedStorableArray<UInt128> = new PackedStorableArray<UInt128>();\n\n    constructor() {\n    }\n\n    @constructor\n    default(initFlag: bool): void {\n        this.flag = initFlag;\n    }\n\n    @message\n    flip(): void {\n        const v = this.flag;\n        this.flag = !v;\n    }\n\n    @message({"mutates": false})\n    get(): bool {\n        return this.flag;\n    }\n}\n')),(0,o.kt)("p",null,"In the  compiled ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.json"),", we can see ",(0,o.kt)("inlineCode",{parentName:"p"},"SequenceDef")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ArrayDef")," have different ",(0,o.kt)("inlineCode",{parentName:"p"},"len"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "def": {\n        "array": {\n          "len": 128,\n          "type": 2\n        }\n      }\n    },\n    {\n      "def": {\n        "sequence": {\n          "type": 2\n        }\n      }\n    }\n')),(0,o.kt)("p",null,"If we compile in ",(0,o.kt)("inlineCode",{parentName:"p"},"--debug")," mode, in the pre-compiled code generated:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," get packeArr(): PackedStorableArray<UInt128> {\n     if (this._packeArr === null) {\n       this._packeArr = new _lang.PackedStorableArray<UInt128>(new _lang.Hash([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02]), true, 128);\n     }\n     return this._packeArr!;\n  }\n  \n  get aArr(): PackedStorableArray<UInt128> {\n     if (this._aArr === null) {\n       this._aArr = new _lang.PackedStorableArray<UInt128>(new _lang.Hash([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03]), true, 0);\n     }\n     return this._aArr!;\n  }\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For map storage type, it requires the key data type and value data type of object to be stored. It also needs to specify the storage modes as pack or spread and entry key value of the object to be stored.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"export class CompositeDef implements Type {\n    constructor(public readonly fields: Array<Field>) {}\n\n    typeKind(): TypeKind {\n        return TypeKind.Composite;\n    }\n    toMetadata(): ICompositeDef {\n        return {\n            def: {\n                composite: {\n                    fields: this.fields.map((f) => f.toMetadata()),\n                },\n            },\n        };\n    }\n}\n")),(0,o.kt)("p",null,"The generated format for storage instance looks like\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n    "def": {\n      "composite": {\n        "fields": [\n          {\n            "name": "key_index",\n            "type": 2\n          },\n          {\n            "name": "value",\n            "type": 3\n          }\n        ]\n      }\n    }\n  }\uff0c\n  {\n    "def": {\n      "primitive": "u8"\n    }\n  }\uff0c\n      {\n    "def": {\n      "primitive": "str"\n    }\n  }\n')),(0,o.kt)("p",null,"The storage structure looks like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "allowances",\n  "layout": {\n    "struct": {\n      "fields": [\n        {\n          "name": "key",\n          "layout": {\n            "offset": "0x0000000000000000000000000000000000000000000000000000000000000002",\n            "strategy": {\n              "hasher": "Blake2x256",\n              "prefix": "0x0000000000000000000000000000000000000000000000000000000000000002",\n              "postfix": ""\n            },\n            "layout": {\n              "key": "0x0000000000000000000000000000000000000000000000000000000000000002",\n              "ty": 3\n            },\n            "storemode": "spread"\n          }\n        },\n        {\n          "name": "values",\n          "layout": {\n            "offset": "0x0000000000000000000000000000000000000000000000000000000000000002",\n            "strategy": {\n              "hasher": "Blake2x256",\n              "prefix": "0x0000000000000000000000000000000000000000000000000000000000000002",\n              "postfix": ""\n            },\n            "layout": {\n              "key": "0x0000000000000000000000000000000000000000000000000000000000000002",\n              "ty": 6\n            },\n            "storemode": "spread"\n          }\n        }\n      ]\n    }\n  }\n}\n')),(0,o.kt)("h4",{id:"25"},"2.5"),(0,o.kt)("h4",{id:"25-use-json-format-instead-of-bare-annotations"},"2.5 Use JSON format instead of bare() annotations."),(0,o.kt)("p",null,'This change improves code readibility and makes easier to for compiler to interprete.\neg. @message(selector = \'0x00001111\') is now @message({"selector": "0x00001111"}) '),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'First parse the anotated parts as json object. eg. \u201c{"selector": "0x00001111"}\u201d')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class DecoratorNodeDef {\n    jsonObj: any;\n    constructor(public decorator: DecoratorNode) {\n        this.jsonObj = this.parseToJson(decorator);\n    }\n}\n")),(0,o.kt)("p",null,"For specific decorator, compiler will parse with specific decorator class and run class specific checks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'export class MessageDecoratorNodeDef extends DecoratorNodeDef {\n    constructor(decorator: DecoratorNode, public payable = false,\n        public mutates = true, public selector = "") {\n        super(decorator);\n        this.payable = this.getIfAbsent("payable", false, "boolean");\n        this.mutates = this.getIfAbsent(\'mutates\', true, "boolean");\n        if (this.hasProperty(\'selector\')) {\n            this.selector = this.getProperty(\'selector\');\n            DecoratorUtil.checkSelector(decorator, this.selector);\n        }\n        if (this.payable && !this.mutates) {\n            throw new Error(`Decorator: ${decorator.name.range.toString()} arguments mutates and payable can only exist one. Trace: ${RangeUtil.location(decorator.range)} `);\n        }\n    }\n}\n')),(0,o.kt)("h3",{id:"26-enhance-event-syntax"},"2.6 Enhance ",(0,o.kt)("inlineCode",{parentName:"h3"},"Event")," syntax"),(0,o.kt)("p",null,"In v0.2, we introduced ",(0,o.kt)("inlineCode",{parentName:"p"},"@event")," decorator to emit Event. However, in v0.2, Event can't be inheriteted and Event will emit once it gets instantiated, which isn't very intuitive for programmers. Therefore, we made the following optimization in v0.3:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To implement ",(0,o.kt)("inlineCode",{parentName:"li"},"@event"),", developer has to either inherit from ",(0,o.kt)("inlineCode",{parentName:"li"},"__lang.Event")," or from another Event"),(0,o.kt)("li",{parentName:"ul"},"To emit an Event, developers has to call ",(0,o.kt)("inlineCode",{parentName:"li"},".emit()"))),(0,o.kt)("p",null,"The new Event usages looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'@event\nclass EventA extends __lang.Event {\n\n  @topic topicA: u8;\n  name: string;\n\n  constructor(t: u8, n: string) {\n      super();\n      this.topicA = t;\n      this.name = n;\n  }\n }\n\n@event\nclass EventB extends EventA {\n  @topic topicB: u8;\n  gender: string;\n  constructor(t: u8, g: string) {\n      super(t, g);\n      this.topicB = t;\n      this.gender = g;\n  }\n}\n\n@contract\nexport class EventEmitter {\n\n    count: i8;\n\n    constructor() {\n    }\n\n    @message\n    triggeEventA(): void {\n        let eventA = new EventA(100, "Elon");\n        eventA.emit();\n    }\n\n    @message\n    triggeEventB(): void {\n         let eventB = new EventB(<u8>300, "M");\n         eventB.emit();\n     }\n}\n')),(0,o.kt)("p",null,"Currently, due to the lack of contract standards in ",(0,o.kt)("inlineCode",{parentName:"p"},"pallet-contract"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"polkadot.js/app")," is not able to parse ",(0,o.kt)("inlineCode",{parentName:"p"},"event")," correctly. Therefore, the event emission can not be verified from the ",(0,o.kt)("inlineCode",{parentName:"p"},"polkadot.js/app")," frontend or europa logs."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"note: currently, Event class does not support inheritence. ")),(0,o.kt)("h4",{id:"27-enhance-decoroter-syntax-and-parameter-checks"},"2.7 Enhance decoroter syntax and parameter checks"),(0,o.kt)("p",null,"In v0.2, compiler will only report wrong decorator. Eg.",(0,o.kt)("inlineCode",{parentName:"p"},"@massage"),", compiler will only report contract doesn't support ",(0,o.kt)("inlineCode",{parentName:"p"},"@massage")," decorator. (Spelling error)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'    @massage({"mutates": false})\n    get(): bool {\n        return this.flag;\n    }\n')),(0,o.kt)("p",null,"With the enhanced checks, compiler will utilize string match algorithm to predict that the user intends to input ",(0,o.kt)("inlineCode",{parentName:"p"},"@message")," as the decorator and provides hints:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Unsupported contract decorator @massage, do you mean '@message'? Check source text: @massage({\"mutates\": false}) in path:examples/flipper/flipper.ts lineAt: 24 columnAt: 5 range: (346 374).\n")),(0,o.kt)("p",null,"It will also check if ",(0,o.kt)("inlineCode",{parentName:"p"},"@message")," is marked as ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," function with the following error message:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Decorator[@message] should mark on public method(Method: get isn\'t public method). Check source text: @message({"mutates": false})\n    @message({"mutates": false})\n    private get(): bool {\n        return this.flag;\n    } in path:examples/flipper/flipper.ts lineAt: 24 columnAt: 5 range: (346 432)..\n')),(0,o.kt)("p",null,"The checker will also check unsupported keywords in the decorator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'    @message({"mutates": false, "superInherit": true})\n    get(): bool {\n        return this.flag;\n    }\n')),(0,o.kt)("p",null,"It will report the error:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'FAILURE The parameter: superInherit isn\'t pre-defined in decorator @message, do you mean selector? Check source text: @message({"mutates": false, "superInherit": true}) in path:examples/flipper/flipper.ts lineAt: 25 columnAt: 5 range: (347 397)..\n')),(0,o.kt)("h4",{id:"28-optimize-the-size-of-the-generated-wasm-file"},"2.8 Optimize the size of the generated wasm file."),(0,o.kt)("p",null,"In v0.3, by default,ask-cli will compile in --release mode so the compiler will use option ",(0,o.kt)("inlineCode",{parentName:"p"},"-o3z")," to optimize and compress the wasm file generated. In addtion, in the Framework, we reduces the resources comsumed by string to shrink the codes of Framework "),(0,o.kt)("h4",{id:"29-upgrade-the-seal_xxx-method-in-pallet-contrac"},"2.9 Upgrade the seal_xxx method in pallet-contrac"),(0,o.kt)("p",null,"The method ",(0,o.kt)("inlineCode",{parentName:"p"},"seal_xxx")," used in contract is now updated to latest seal0 of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/europa"},"Europa")),(0,o.kt)("h3",{id:"provide-system-parameter-types-in-custom-env-"},"Provide system parameter types in custom env ."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"By default, ",(0,o.kt)("inlineCode",{parentName:"li"},"AccountId"),",",(0,o.kt)("inlineCode",{parentName:"li"},"Hash"),",",(0,o.kt)("inlineCode",{parentName:"li"},"Balance"),",",(0,o.kt)("inlineCode",{parentName:"li"},"BlockNumber")," are implemented as ",(0,o.kt)("inlineCode",{parentName:"li"},"Array<u8>(32)"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"Array<u8>(32)"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"UInt128"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"UInt32"),"."),(0,o.kt)("li",{parentName:"ul"},"You can now customize it in assembly/env/CustomTypes.ts as long as the correct Codec is implementd")),(0,o.kt)("h3",{id:"unit-testing-and-documentation"},"Unit Testing and Documentation."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Provide exmples to test the features in our Ask! Framework in examples/"),(0,o.kt)("li",{parentName:"ul"},"Provide ",(0,o.kt)("strong",{parentName:"li"},"tests"),"/ to test the compiler. In ",(0,o.kt)("inlineCode",{parentName:"li"},"ts-package"),", we provide ",(0,o.kt)("inlineCode",{parentName:"li"},"ts-packages/contract-metadata/src/")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"ts-packages/transform/src/__tests__/")," for tests we used.\nTo run the unit-test:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd ts-packages\nyarn jest\n")),(0,o.kt)("p",null,"You should see the following log, showing all unit tests are passing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn run v1.22.11\n$ /home/bonan/repos/ask/ask-compiler/node_modules/.bin/jest\n PASS  ts-packages/contract-metadata/dist/index.spec.js\n PASS  ts-packages/transform/src/__tests__/generator.test.ts\n PASS  ts-packages/contract-metadata/src/index.spec.ts\n PASS  ts-packages/transform/src/__tests__/types.test.ts\n PASS  ts-packages/transform/src/__tests__/decorator.test.ts\n")),(0,o.kt)("p",null,"For documentations, please refer ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ask/blob/v0.3-dev/docs/Quickstart.md"},"QuickStart"),"."),(0,o.kt)("h2",{id:"start-using-ask-v03"},"Start using Ask! v0.3"),(0,o.kt)("p",null,"Ask! v0.3 is now released, please refer ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ask/blob/v0.3-dev/docs/Quickstart.md"},"QuickStart")," to quick start it."),(0,o.kt)("p",null,"For detailed usages of components in Ask!, please refer ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ask/blob/v0.3-dev/docs/api/index.html"},"API Usages"),"."),(0,o.kt)("h3",{id:"quick-start"},"Quick start"),(0,o.kt)("p",null,"Now, let's use ",(0,o.kt)("inlineCode",{parentName:"p"},"pl-ask-cli")," to compose ask! smart contracts."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"init a new directory: ",(0,o.kt)("inlineCode",{parentName:"li"},"mkdir erc20")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"cd erc20")),(0,o.kt)("li",{parentName:"ol"},"init an npm project: ",(0,o.kt)("inlineCode",{parentName:"li"},"npm init -y")),(0,o.kt)("li",{parentName:"ol"},"install pl-ask-cli: ",(0,o.kt)("inlineCode",{parentName:"li"},"npm i pl-ask-cli")),(0,o.kt)("li",{parentName:"ol"},"init project:     ",(0,o.kt)("inlineCode",{parentName:"li"},"npx pl-ask-cli init")),(0,o.kt)("li",{parentName:"ol"},"copy ",(0,o.kt)("inlineCode",{parentName:"li"},"index.ts")," in ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/patractlabs/ask/tree/master/examples/erc20"},"example/erc20")," , ",(0,o.kt)("inlineCode",{parentName:"li"},"ERC20.ts")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"erc20/contracts/"),"."),(0,o.kt)("li",{parentName:"ol"},"compile:  ",(0,o.kt)("inlineCode",{parentName:"li"},"npx pl-ask-cli compile contracts/index.ts"))),(0,o.kt)("p",null,"Once compiled successfully, we can ",(0,o.kt)("strong",{parentName:"p"},"deploy and call")," the contract."),(0,o.kt)("h4",{id:"use-erc20-base-contract"},"Use ERC20 base Contract"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ERC20.ts")," is the base class that implments ERC20 standard with reusable ERC20 interfaces such as ",(0,o.kt)("inlineCode",{parentName:"p"},"transfer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"approve")," etc. It defines the storages for contract as well as Event of ",(0,o.kt)("inlineCode",{parentName:"p"},"Transfer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Approval"),"."),(0,o.kt)("p",null,"In Ask! v0.3, we have reimplemented ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/ask/blob/master/examples/erc20"},"ERC20")," with new coding conventions. So the new contract can still be written like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Account, u128 } from "ask-lang";\nimport {ERC20} from "./ERC20";\n\n@contract\n@doc({"desc": "MyToken conract that extended erc20 contract"})\nclass MyToken extends ERC20 {\n\n  constructor() {\n    super();\n  }\n\n  @constructor\n  default(name: string = "", symbol: string = ""): void {\n    super.default(name, symbol);\n  }\n\n\n  @message\n  @doc({"desc": "Mint a token"})\n  mint(to: Account, amount: u128): void {\n    this._mint(to, amount);\n  }\n\n  @message\n  @doc({"desc": "burn the token"})\n  burn(from: Account, amount: u128): void {\n    this._burn(from, amount);\n  }\n}\n')),(0,o.kt)("h3",{id:"compile"},"Compile"),(0,o.kt)("p",null,"To compile the contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx ask-cli compile contracts/index.ts\n")),(0,o.kt)("p",null,"After successfuly compilation, ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.json")," will be generated under ",(0,o.kt)("inlineCode",{parentName:"p"},"examples/erc20/build/"),"."),(0,o.kt)("h3",{id:"deployment-and-contract-calls"},"Deployment and contract calls"),(0,o.kt)("p",null,"We use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/patractlabs/europa"},"Europa"),"(",(0,o.kt)("inlineCode",{parentName:"p"},"v3.0.0 branch"),") sandbox to deploy and test contracts with ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/polkadot-js/apps"},"polkadot-js"),"(",(0,o.kt)("inlineCode",{parentName:"p"},"master")," branch, commit-id ",(0,o.kt)("inlineCode",{parentName:"p"},"11276477a0523348c7b143db566622aa32833296"),") as the frontend",(0,o.kt)("br",{parentName:"p"}),"\n","Test:  "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Follow the instructions of ",(0,o.kt)("inlineCode",{parentName:"p"},"Europa")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"plokadot-js")," to start node and services.  ")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In ",(0,o.kt)("inlineCode",{parentName:"p"},"polkadot-js")," contract tab, upload ",(0,o.kt)("inlineCode",{parentName:"p"},"build/metadata.json")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"build/target.wasm"),".  ")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Instantiate the uploaded contract and call ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," to issue tokens.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"call ",(0,o.kt)("inlineCode",{parentName:"p"},"mint"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"transfer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"approve"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"burn")," to operate this ERC20 contract.  "))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/2844215/120952438-9cc61a00-c77d-11eb-9745-454f977184be.gif",alt:null})),(0,o.kt)("p",null,"Now, with ",(0,o.kt)("inlineCode",{parentName:"p"},"ask-cli")," and new ask! contract features, we succesfully issued ERC20 tokens.  "),(0,o.kt)("h2",{id:"implemented-features-of-ask-v03"},"Implemented features of Ask! v0.3:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"release of new Ask v0.3 and npm of ask-cli ."),(0,o.kt)("li",{parentName:"ul"},"Implementing contracts in ",(0,o.kt)("inlineCode",{parentName:"li"},"/examples")," with new base contracts ."),(0,o.kt)("li",{parentName:"ul"},"Complete contract development tutorial"),(0,o.kt)("li",{parentName:"ul"},"Complete API documentations.")))}m.isMDXComponent=!0}}]);