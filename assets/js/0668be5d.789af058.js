"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[8044],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=c(t),f=i,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||o;return t?r.createElement(d,s(s({ref:n},p),{},{components:t})):r.createElement(d,s({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=m;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5433:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),s=["components"],a={},l="Metis vs OpenZeppelin",c={unversionedId:"metis/intro/differences",id:"metis/intro/differences",isDocsHomePage:!1,title:"Metis vs OpenZeppelin",description:"Metis refers the implementations from OpenZepplin and absorbs the successful experience. However, since Solidity is based inheritence but Rust, as a non OOP language, doesn't support inheritence.",source:"@site/docs/metis/intro/differences.md",sourceDirName:"metis/intro",slug:"/metis/intro/differences",permalink:"/substrate-contracts-book/metis/intro/differences",editUrl:"https://github.com/patractlabs/substrate-contracts-book/edit/master/docs/metis/intro/differences.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Architectures",permalink:"/substrate-contracts-book/metis/intro/architecture"},next:{title:"Use Metis components",permalink:"/substrate-contracts-book/metis/guides/imports"}},p=[{value:"OpenZeppelin",id:"openzeppelin",children:[]},{value:"Metis",id:"metis",children:[{value:"Metis&#39;s version of <code>Ownable</code>",id:"metiss-version-of-ownable",children:[]},{value:"Stub",id:"stub",children:[]}]}],u={toc:p};function m(e){var n=e.components,t=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"metis-vs-openzeppelin"},"Metis vs OpenZeppelin"),(0,o.kt)("p",null,"Metis refers the implementations from OpenZepplin and absorbs the successful experience. However, since Solidity is based inheritence but Rust, as a non OOP language, doesn't support inheritence. "),(0,o.kt)("p",null,"Let's take ",(0,o.kt)("inlineCode",{parentName:"p"},"Ownable")," as an example to help us understand the differences between OpenZepplin and Metis."),(0,o.kt)("h2",{id:"openzeppelin"},"OpenZeppelin"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"abstract contract Ownable is Context {\n    // Component Storage\n    address private _owner;\n\n    // Component Event\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n    \n    // Component internal interface\n    modifier onlyOwner() {\n        ...\n    }\n\n    // Component Event\n    function renounceOwnership() public virtual onlyOwner {\n        ...\n    }\n\n    ...\n}\n")),(0,o.kt)("p",null,"If a contract needs to be Ownable, just inherit the contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"contract Escrow is Ownable {\n...\n}\n")),(0,o.kt)("p",null,"Similarly, other components can also have Ownable through inheritance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"contract Pausable is Ownable {\n  ...\n  function unpause() public onlyOwner whenPaused {\n      ...\n  }\n}\n")),(0,o.kt)("p",null,"The intention of inheritance in OpenZepplin is actually composition rather than an ",(0,o.kt)("inlineCode",{parentName:"p"},"is-a")," relationship. Although excessive use of inheritance in Solidity will cause many problems, inheritance for specific intentions is still an important way to achieve it."),(0,o.kt)("h2",{id:"metis"},"Metis"),(0,o.kt)("p",null,"In contract development based on ink!, through metis, we can also achieve the same motivation based on generics and traits:"),(0,o.kt)("h3",{id:"metiss-version-of-ownable"},"Metis's version of ",(0,o.kt)("inlineCode",{parentName:"h3"},"Ownable")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"...\n\n#[metis::contract] // metis contract macro, will use ink_lang::contract auto\nmod flipper {\n    ...\n\n    #[ink(storage)]\n    #[import(ownable)] // flipper import the ownable\n    pub struct Flipper {\n        ownable: ownable::Data<Flipper>, // data by ownable\n\n        value: bool,\n    }\n\n    #[ink(event)]\n    #[metis(ownable)] // event in ink! will refactor\n    pub struct OwnershipTransferred {\n        //...\n    }\n\n    impl Flipper {\n        //...\n\n        #[ink(message)]\n        pub fn flip(&mut self) {\n            // check owner\n            ownable::Impl::ensure_caller_is_owner(self);\n\n            self.value = !self.value;\n        }\n\n        //...\n\n        #[ink(message)]\n        pub fn renounce_ownership(&mut self) {\n            ownable::Impl::renounce_ownership(self) // owner message\n        }\n\n        //...\n    }\n}\n")),(0,o.kt)("p",null,"Metis assists developers to achieve the same function through a series of helper macros. In order to improve the auditability of the contract, here we hope that users clearly implement storage, event and message declarations."),(0,o.kt)("h3",{id:"stub"},"Stub"),(0,o.kt)("p",null,"At the same time, metis has simplified the implementation of components using stub:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"//...\n\n// Storage\n#[metis::component::storage]\npub struct Data<E>\nwhere\n    E: Env,\n{\n    owner: Lazy<Option<E::AccountId>>,\n}\n\n// Event trait\npub trait EventEmit<E: Env>: EnvAccess<E> {\n    //...\n}\n\n// Impl trait\npub trait Impl<E: Env>: Storage<E> + EventEmit<E> {\n    // logics\n    fn init(&mut self) {\n        self.get_mut().set_ownership(&Some(Self::caller()));\n    }\n\n    fn renounce_ownership(&mut self) {\n        self.ensure_caller_is_owner();\n\n        self.emit_event_ownership_transferred(\n            self.get().get_ownership().clone(),\n            None);\n\n        self.get_mut().set_ownership(&None);\n    }\n\n    //...\n\n    /// Panic if `owner` is not an owner\n    fn ensure_owner(&self, owner: &E::AccountId) {\n        assert!(&self.get().get_ownership().clone().unwrap() == owner);\n    }\n\n    //...\n}\n\n")))}m.isMDXComponent=!0}}]);