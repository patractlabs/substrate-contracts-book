(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{573:function(a,t,s){"use strict";s.r(t);var e=s(6),v=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计"}},[a._v("#")]),a._v(" 设计")]),a._v(" "),s("h2",{attrs:{id:"ask-设计总览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ask-设计总览"}},[a._v("#")]),a._v(" Ask! 设计总览")]),a._v(" "),s("p",[a._v("AssemblyScript使用asc编译器将AssemblyScript文件编译为WebAssembly字节码，但是无法直接生成符合 "),s("code",[a._v("pallet-contract")]),a._v(" ABI的 Wasm字节码和"),s("code",[a._v("metadata.json")]),a._v("元信息文件,因此您需要编写AS transform介入编译器编译流程，在合适的位置生成ABI相关的代码并导出，在类型信息确定之后生成 "),s("code",[a._v("metadata.json")]),a._v("。")]),a._v(" "),s("h2",{attrs:{id:"设计思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计思路"}},[a._v("#")]),a._v(" 设计思路")]),a._v(" "),s("p",[a._v("Ask! 提供了 "),s("code",[a._v("ask-transform")]),a._v("（简称 "),s("code",[a._v("transform")]),a._v("）和 "),s("code",[a._v("ask-lang")]),a._v(" 两个库。\n此外，我们在后续将提供一个名为 "),s("code",[a._v("ask-cli")]),a._v(" 的构建工具，这个工具类似于ink!的"),s("code",[a._v("cargo-contract")]),a._v("，用于帮助建立和管理用Ask编写的Wasm智能合约。")]),a._v(" "),s("p",[a._v("Ask! 的功能按照如下实现：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("ask-lang")]),a._v("的主要功能是为编写智能合约提供高层API，包括"),s("code",[a._v("pallet-contract")]),a._v("原语高层封装、Scale 编码、K/V存储抽象、常用的基本类型和通用的 interfaces。您可以通过装饰器来自动派生这些基本类的组合。")]),a._v(" "),s("li",[s("code",[a._v("ask-transform")]),a._v("的主要功能根据Ask! 代码里使用的装饰器，生成符合"),s("code",[a._v("pallet-contract")]),a._v(" 规范的代码和"),s("code",[a._v("metadata.json")]),a._v("元信息文件，这个部分实现以下功能：\n"),s("ul",[s("li",[a._v("解析合约接口和参数，并生成元数据文件。")]),a._v(" "),s("li",[a._v("解析自定义合约装饰器，生成相应的逻辑代码。")]),a._v(" "),s("li",[a._v("根据存储的定义按照一定流程读/写合约存储。")])])])])])}),[],!1,null,null,null);t.default=v.exports}}]);