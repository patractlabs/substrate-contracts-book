"use strict";(self.webpackChunksubstrate_contracts_book=self.webpackChunksubstrate_contracts_book||[]).push([[8179],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),u=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,m=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=u(n),k=a,d=s["".concat(m,".").concat(k)]||s[k]||p[k]||l;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=s;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},112:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return m},metadata:function(){return u},toc:function(){return c},default:function(){return s}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],i={},m="Example",u={unversionedId:"zkmega/example",id:"zkmega/example",isDocsHomePage:!1,title:"Example",description:"Call curves in ink!",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/zkmega/example.md",sourceDirName:"zkmega",slug:"/zkmega/example",permalink:"/substrate-contracts-book/en/zkmega/example",editUrl:"https://github.com/patractlabs/substrate-contracts-book/docs/zkmega/example.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Contract",permalink:"/substrate-contracts-book/en/zkmega/contract"},next:{title:"Benchmark",permalink:"/substrate-contracts-book/en/zkmega/benchmark"}},c=[{value:"Call curves in ink!",id:"call-curves-in-ink",children:[]},{value:"MIMC",id:"mimc",children:[]},{value:"Merkle Tree",id:"merkle-tree",children:[]},{value:"EDDSA",id:"eddsa",children:[]}],p={toc:c};function s(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"example"},"Example"),(0,l.kt)("h2",{id:"call-curves-in-ink"},"Call curves in ink!"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"curve"),(0,l.kt)("th",{parentName:"tr",align:null},"add"),(0,l.kt)("th",{parentName:"tr",align:null},"mul"),(0,l.kt)("th",{parentName:"tr",align:null},"pairing"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bls12","_","377"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000001"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000002")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bls12","_","381"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000010"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000011"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000012")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bn254"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000020"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000021"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000022")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bw6","_","761"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000030"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000031"),(0,l.kt)("td",{parentName:"tr",align:null},"0x01000032")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"let result = ink_env::call_chain_extension(func_id, &Vec::from(input))?\n")),(0,l.kt)("h2",{id:"mimc"},"MIMC"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use zkp_u256::{U256, Zero};\nuse merkle_tree::mimc::{mimc,mimc_with_key}\nlet message = U256::from_decimal_str("49").unwrap();\nlet in_key = U256::zero();\nassert_eq!(\n    mimc(b"1"),\n    mimc_with_key(vec![&message], &in_key)\n);\n')),(0,l.kt)("h2",{id:"merkle-tree"},"Merkle Tree"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use merkle_tree::MerkleTree;\nlet mut mt = MerkleTree::default();\nlet message = b"49";\nlet (leaf, index) = mt.insert(message).unwrap();\nassert_eq!(mt.update(), mt.get_root());\nlet merkle_proof = mt.get_proof(index);\nassert!(mt.verify_merkle_proof(leaf, merkle_proof, index));\n\nlet message = b"50";\nlet (leaf, index) = mt.insert(message).unwrap();\nassert_eq!(mt.update(), mt.get_root());\nlet merkle_proof = mt.get_proof(index);\nassert!(mt.verify_merkle_proof(leaf, merkle_proof, index));\n\nlet message = b"51";\nlet (leaf, index) = mt.insert(message).unwrap();\nassert_eq!(mt.update(), mt.get_root());\nlet merkle_proof = mt.get_proof(index);\nassert!(mt.verify_merkle_proof(leaf, merkle_proof, index));\n')),(0,l.kt)("h2",{id:"eddsa"},"EDDSA"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"TODO")))}s.isMDXComponent=!0}}]);